{"version":"1","records":[{"hierarchy":{"lvl1":"高级回测分析"},"type":"lvl1","url":"/advanced-backtesting","position":0},{"hierarchy":{"lvl1":"高级回测分析"},"content":"","type":"content","url":"/advanced-backtesting","position":1},{"hierarchy":{"lvl1":"高级回测分析","lvl2":"分析买入/入场和卖出/出场标签"},"type":"lvl2","url":"/advanced-backtesting#id","position":2},{"hierarchy":{"lvl1":"高级回测分析","lvl2":"分析买入/入场和卖出/出场标签"},"content":"了解策略根据用于标记不同买入条件的买入/入场标签的行为可能很有帮助。你可能希望看到比默认回测输出更复杂的每个买入和卖出条件的统计信息。你还可能想要确定导致开仓信号的蜡烛上的指标值。\n\nNote\n\n以下买入原因分析仅适用于回测，不适用于超参数优化（hyperopt）。\n\n我们需要在回测时使用 --export 选项设置为 signals，以启用信号和交易的导出：freqtrade backtesting -c <config.json> --timeframe <tf> --strategy <strategy_name> --timerange=<timerange> --export=signals\n\n这会让 freqtrade 输出一个包含策略、交易对及其对应蜡烛 DataFrame 的 pickle 字典，这些蜡烛导致了入场和出场信号。\n根据你的策略产生的入场次数，这个文件可能会很大，因此请定期检查你的 user_data/backtest_results 文件夹，删除旧的导出文件。\n\n在运行下次回测前，请确保删除旧的回测结果，或使用 --cache none 选项运行回测，以确保不使用缓存结果。\n\n如果一切顺利，你现在应该能在 user_data/backtest_results 文件夹中看到 backtest-result-{timestamp}_signals.pkl 和 backtest-result-{timestamp}_exited.pkl 文件。\n\n要分析入场/出场标签，现在需要使用 freqtrade backtesting-analysis 命令，并提供 --analysis-groups 选项和空格分隔的参数：freqtrade backtesting-analysis -c <config.json> --analysis-groups 0 1 2 3 4 5\n\n该命令将读取最近的回测结果。--analysis-groups 选项用于指定显示每组或每笔交易利润的各种表格输出，范围从最简单（0）到最详细的每交易对、每买入和每卖出标签（4）：\n\n0：按 enter_tag 汇总的整体胜率和利润\n\n1：按 enter_tag 分组的利润汇总\n\n2：按 enter_tag 和 exit_tag 分组的利润汇总\n\n3：按交易对和 enter_tag 分组的利润汇总\n\n4：按交易对、enter_ 和 exit_tag 分组的利润汇总（此表可能非常大）\n\n5：按 exit_tag 分组的利润汇总\n\n更多选项可通过 -h 参数查看。\n\n以下是翻译后的中文内容，保持了Markdown格式：","type":"content","url":"/advanced-backtesting#id","position":3},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"使用 backtest-filename","lvl2":"分析买入/入场和卖出/出场标签"},"type":"lvl3","url":"/advanced-backtesting#id-backtest-filename","position":4},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"使用 backtest-filename","lvl2":"分析买入/入场和卖出/出场标签"},"content":"默认情况下，backtesting-analysis 处理 user_data/backtest_results 目录中最新的回测结果。\n如果您想分析之前回测的结果，请使用 --backtest-filename 选项来指定所需的文件。这让您可以随时重新访问和分析历史回测输出，只需提供相关回测结果的文件名：freqtrade backtesting-analysis -c <config.json> --timeframe <tf> --strategy <strategy_name> --timerange <timerange> --export signals --backtest-filename backtest-result-2025-03-05_20-38-34.zip\n\n您应该会在日志中看到类似以下的输出，其中包含导出的时间戳文件名：2022-06-14 16:28:32,698 - freqtrade.misc - INFO - dumping json to \"mystrat_backtest-2022-06-14_16-28-32.json\"\n\n然后您可以在 backtesting-analysis 中使用该文件名：freqtrade backtesting-analysis -c <config.json> --backtest-filename=mystrat_backtest-2022-06-14_16-28-32.json\n\n要使用来自不同结果目录的结果，您可以使用 --backtest-directory 来指定目录：freqtrade backtesting-analysis -c <config.json> --backtest-directory custom_results/ --backtest-filename mystrat_backtest-2022-06-14_16-28-32.json","type":"content","url":"/advanced-backtesting#id-backtest-filename","position":5},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"调整要显示的买入和卖出标签","lvl2":"分析买入/入场和卖出/出场标签"},"type":"lvl3","url":"/advanced-backtesting#id-1","position":6},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"调整要显示的买入和卖出标签","lvl2":"分析买入/入场和卖出/出场标签"},"content":"要在输出中只显示特定的买入和卖出标签，请使用以下两个选项：--enter-reason-list : 要分析的入场信号的空格分隔列表。默认：\"all\"\n--exit-reason-list : 要分析的出场信号的空格分隔列表。默认：\"all\"\n\n例如：freqtrade backtesting-analysis -c <config.json> --analysis-groups 0 2 --enter-reason-list enter_tag_a enter_tag_b --exit-reason-list roi custom_exit_tag_a stop_loss","type":"content","url":"/advanced-backtesting#id-1","position":7},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"输出信号蜡烛的指标","lvl2":"分析买入/入场和卖出/出场标签"},"type":"lvl3","url":"/advanced-backtesting#id-2","position":8},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"输出信号蜡烛的指标","lvl2":"分析买入/入场和卖出/出场标签"},"content":"freqtrade backtesting-analysis 的真正强大之处在于能够打印信号蜡烛上的指标值，以便对买入信号指标进行细致调查和调优。要打印给定指标集的列，请使用 --indicator-list 选项：freqtrade backtesting-analysis -c <config.json> --analysis-groups 0 2 --enter-reason-list enter_tag_a enter_tag_b --exit-reason-list roi custom_exit_tag_a stop_loss --indicator-list rsi rsi_1h bb_lowerband ema_9 macd macdsignal\n\n这些指标必须存在于你的策略主 DataFrame（主时间框架或信息性时间框架）中，否则它们将在脚本输出中被忽略。\n\n指标列表\n\n指标值将在入场和出场点都显示。如果指定了 --indicator-list all，则只会显示入场点的指标，以避免因策略不同而导致的列表过大。\n\n分析中自动包含一系列蜡烛和交易相关字段，只需在 indicator-list 中包含即可自动访问，包括：\n\nopen_date     ： 交易开仓时间\n\nclose_date    ： 交易平仓时间\n\nmin_rate      ： 持仓期间最低价\n\nmax_rate      ： 持仓期间最高价\n\nopen          ： 信号蜡烛开盘价\n\nclose         ： 信号蜡烛收盘价\n\nhigh          ： 信号蜡烛最高价\n\nlow           ： 信号蜡烛最低价\n\nvolume        ： 信号蜡烛成交量\n\nprofit_ratio  ： 交易利润率\n\nprofit_abs    ： 交易的绝对利润","type":"content","url":"/advanced-backtesting#id-2","position":9},{"hierarchy":{"lvl1":"高级回测分析","lvl4":"指标值示例输出","lvl3":"输出信号蜡烛的指标","lvl2":"分析买入/入场和卖出/出场标签"},"type":"lvl4","url":"/advanced-backtesting#id-3","position":10},{"hierarchy":{"lvl1":"高级回测分析","lvl4":"指标值示例输出","lvl3":"输出信号蜡烛的指标","lvl2":"分析买入/入场和卖出/出场标签"},"content":"freqtrade backtesting-analysis -c user_data/config.json --analysis-groups 0 --indicator-list chikou_span tenkan_sen \n\n在此示例中，\n我们希望显示交易入场和出场点的 chikou_span 和 tenkan_sen 指标值。\n\n指标输出示例：\n\n交易对\n\n开仓时间\n\n入场原因\n\n出场原因\n\nchikou_span (入场)\n\ntenkan_sen (入场)\n\nchikou_span (出场)\n\ntenkan_sen (出场)\n\nDOGE/USDT\n\n2024-07-06 00:35:00+00:00\n\n\n\nexit_signal\n\n0.105\n\n0.106\n\n0.105\n\n0.107\n\nBTC/USDT\n\n2024-08-05 14:20:00+00:00\n\n\n\nroi\n\n54643.440\n\n51696.400\n\n54386.000\n\n52072.010\n\n如表所示，chikou_span (入场) 表示交易开仓时的指标值，\n而 chikou_span (出场) 则表示平仓时的指标值。\n这种详细的指标值视图增强了分析能力。\n\n指标后缀 (入场) 和 (出场) 用于区分交易开仓和平仓时的指标值。\n\n交易级指标\n\n某些交易级指标没有 (入场) 或 (出场) 后缀。这些指标包括：pair, stake_amount,\nmax_stake_amount, amount, open_date, close_date, open_rate, close_rate, fee_open, fee_close, trade_duration,\nprofit_ratio, profit_abs, exit_reason,initial_stop_loss_abs, initial_stop_loss_ratio, stop_loss_abs, stop_loss_ratio,\nmin_rate, max_rate, is_open, enter_tag, leverage, is_short, open_timestamp, close_timestamp 和 orders","type":"content","url":"/advanced-backtesting#id-3","position":11},{"hierarchy":{"lvl1":"高级回测分析","lvl4":"基于入场或出场信号过滤指标","lvl3":"输出信号蜡烛的指标","lvl2":"分析买入/入场和卖出/出场标签"},"type":"lvl4","url":"/advanced-backtesting#id-4","position":12},{"hierarchy":{"lvl1":"高级回测分析","lvl4":"基于入场或出场信号过滤指标","lvl3":"输出信号蜡烛的指标","lvl2":"分析买入/入场和卖出/出场标签"},"content":"--indicator-list 选项默认会显示入场和出场信号的指标值。要仅显示入场信号的指标值，可使用 --entry-only 参数。类似地，仅显示出场信号指标值可用 --exit-only 参数。\n\n示例：仅显示入场信号指标值：freqtrade backtesting-analysis -c user_data/config.json --analysis-groups 0 --indicator-list chikou_span tenkan_sen --entry-only\n\n示例：仅显示出场信号指标值：freqtrade backtesting-analysis -c user_data/config.json --analysis-groups 0 --indicator-list chikou_span tenkan_sen --exit-only\n\nNote\n\n使用这些过滤器时，指标名称不会带有 (入场) 或 (出场) 后缀。","type":"content","url":"/advanced-backtesting#id-4","position":13},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"按日期过滤交易输出","lvl2":"分析买入/入场和卖出/出场标签"},"type":"lvl3","url":"/advanced-backtesting#id-5","position":14},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"按日期过滤交易输出","lvl2":"分析买入/入场和卖出/出场标签"},"content":"要仅显示回测时间范围内某些日期之间的交易，请在 YYYYMMDD-[YYYYMMDD] 格式下提供常用的 timerange 选项：--timerange : 用于过滤输出交易的时间范围，起始日期包含，结束日期不包含。例如：20220101-20221231\n\n例如，如果你的回测时间范围是 20220101-20221231，但只想输出 1 月份的交易：freqtrade backtesting-analysis -c <config.json> --timerange 20220101-20220201","type":"content","url":"/advanced-backtesting#id-5","position":15},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"打印被拒绝的信号","lvl2":"分析买入/入场和卖出/出场标签"},"type":"lvl3","url":"/advanced-backtesting#id-6","position":16},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"打印被拒绝的信号","lvl2":"分析买入/入场和卖出/出场标签"},"content":"使用 --rejected-signals 选项打印被拒绝的信号。freqtrade backtesting-analysis -c <config.json> --rejected-signals","type":"content","url":"/advanced-backtesting#id-6","position":17},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"将表格写入 CSV","lvl2":"分析买入/入场和卖出/出场标签"},"type":"lvl3","url":"/advanced-backtesting#id-csv","position":18},{"hierarchy":{"lvl1":"高级回测分析","lvl3":"将表格写入 CSV","lvl2":"分析买入/入场和卖出/出场标签"},"content":"部分表格输出可能很大，直接打印到终端不太方便。\n使用 --analysis-to-csv 选项可禁用表格标准输出，并将其写入 CSV 文件。freqtrade backtesting-analysis -c <config.json> --analysis-to-csv\n\n默认情况下，这会为你在 backtesting-analysis 命令中指定的每个输出表写一个文件，例如：freqtrade backtesting-analysis -c <config.json> --analysis-to-csv --rejected-signals --analysis-groups 0 1\n\n这会写入 user_data/backtest_results：\n\nrejected_signals.csv\n\ngroup_0.csv\n\ngroup_1.csv\n\n要自定义文件写入路径，还可指定 --analysis-csv-path 选项。freqtrade backtesting-analysis -c <config.json> --analysis-to-csv --analysis-csv-path another/data/path/","type":"content","url":"/advanced-backtesting#id-csv","position":19},{"hierarchy":{"lvl1":"高级超参数优化"},"type":"lvl1","url":"/advanced-hyperopt","position":0},{"hierarchy":{"lvl1":"高级超参数优化"},"content":"","type":"content","url":"/advanced-hyperopt","position":1},{"hierarchy":{"lvl1":"高级超参数优化","lvl2":"高级超参数优化（Hyperopt）"},"type":"lvl2","url":"/advanced-hyperopt#id-hyperopt","position":2},{"hierarchy":{"lvl1":"高级超参数优化","lvl2":"高级超参数优化（Hyperopt）"},"content":"本页介绍一些高级 Hyperopt 主题，可能比创建普通超参数优化类需要更高的编码技能和 Python 知识。","type":"content","url":"/advanced-hyperopt#id-hyperopt","position":3},{"hierarchy":{"lvl1":"高级超参数优化","lvl3":"创建和使用自定义损失函数","lvl2":"高级超参数优化（Hyperopt）"},"type":"lvl3","url":"/advanced-hyperopt#id","position":4},{"hierarchy":{"lvl1":"高级超参数优化","lvl3":"创建和使用自定义损失函数","lvl2":"高级超参数优化（Hyperopt）"},"content":"要使用自定义损失函数类，请确保你的自定义 hyperopt 损失类中定义了 hyperopt_loss_function 函数。\n对于下方的示例，你需要在 hyperopt 命令中添加参数 --hyperopt-loss SuperDuperHyperOptLoss，以便使用该函数。\n\n下面是一个示例，与默认 Hyperopt 损失实现完全相同。完整示例可见于 \n\nuserdata/hyperopts。from datetime import datetime\nfrom typing import Any, Dict\n\nfrom pandas import DataFrame\n\nfrom freqtrade.constants import Config\nfrom freqtrade.optimize.hyperopt import IHyperOptLoss\n\nTARGET_TRADES = 600\nEXPECTED_MAX_PROFIT = 3.0\nMAX_ACCEPTED_TRADE_DURATION = 300\n\nclass SuperDuperHyperOptLoss(IHyperOptLoss):\n    \"\"\"\n    定义 hyperopt 的默认损失函数\n    \"\"\"\n\n    @staticmethod\n    def hyperopt_loss_function(\n        *,\n        results: DataFrame,\n        trade_count: int,\n        min_date: datetime,\n        max_date: datetime,\n        config: Config,\n        processed: dict[str, DataFrame],\n        backtest_stats: dict[str, Any],\n        starting_balance: float,\n        **kwargs,\n    ) -> float:\n        \"\"\"\n        目标函数，结果越小越好\n        这是传统算法（freqtrade 一直使用的）。权重分配如下：\n        * 0.4 给交易时长\n        * 0.25：避免交易亏损\n        * 1.0 给总利润，相对于上面定义的期望值（`EXPECTED_MAX_PROFIT`）\n        \"\"\"\n        total_profit = results['profit_ratio'].sum()\n        trade_duration = results['trade_duration'].mean()\n\n        trade_loss = 1 - 0.25 * exp(-(trade_count - TARGET_TRADES) ** 2 / 10 ** 5.8)\n        profit_loss = max(0, 1 - total_profit / EXPECTED_MAX_PROFIT)\n        duration_loss = 0.4 * min(trade_duration / MAX_ACCEPTED_TRADE_DURATION, 1)\n        result = trade_loss + profit_loss + duration_loss\n        return result\n\n目前，参数说明如下：\n\nresults：包含结果交易的 DataFrame。\n结果中可用的列如下（与回测时 --export trades 输出文件一致）：pair, profit_ratio, profit_abs, open_date, open_rate, fee_open, close_date, close_rate, fee_close, amount, trade_duration, is_open, exit_reason, stake_amount, min_rate, max_rate, stop_loss_ratio, stop_loss_abs\n\ntrade_count：交易数量（等同于 len(results)）\n\nmin_date：使用的时间范围起始日期\n\nmax_date：使用的时间范围结束日期\n\nconfig：使用的配置对象（注意：如果某些策略相关参数属于 hyperopt 空间，这里未必会更新全部参数）。\n\nprocessed：以交易对为键的 DataFrame 字典，包含回测用到的数据。\n\nbacktest_stats：回测统计信息，格式与回测文件“strategy”子结构一致。可用字段见 optimize_reports.py 中的 generate_strategy_stats()。\n\nstarting_balance：回测使用的初始资金。\n\n该函数需返回一个浮点数（float）。数值越小，结果越好。参数和权重分配可自行调整。\n\nNote\n\n该函数每个 epoch 调用一次——请尽量优化代码，避免拖慢 hyperopt。\n\n*args 和 **kwargs\n\n请保留接口中的 *args 和 **kwargs，以便未来扩展。","type":"content","url":"/advanced-hyperopt#id","position":5},{"hierarchy":{"lvl1":"高级超参数优化","lvl3":"覆盖预定义空间","lvl2":"高级超参数优化（Hyperopt）"},"type":"lvl3","url":"/advanced-hyperopt#overriding-pre-defined-spaces","position":6},{"hierarchy":{"lvl1":"高级超参数优化","lvl3":"覆盖预定义空间","lvl2":"高级超参数优化（Hyperopt）"},"content":"要覆盖预定义空间（如 roi_space、generate_roi_table、stoploss_space、trailing_space、max_open_trades_space），请在策略中定义一个嵌套的 Hyperopt 类，并如下定义所需空间：from freqtrade.optimize.space import Categorical, Dimension, Integer, SKDecimal\n\nclass MyAwesomeStrategy(IStrategy):\n    class HyperOpt:\n        # 自定义止损空间\n        def stoploss_space():\n            return [SKDecimal(-0.05, -0.01, decimals=3, name='stoploss')]\n\n        # 自定义 ROI 空间\n        def roi_space() -> List[Dimension]:\n            return [\n                Integer(10, 120, name='roi_t1'),\n                Integer(10, 60, name='roi_t2'),\n                Integer(10, 40, name='roi_t3'),\n                SKDecimal(0.01, 0.04, decimals=3, name='roi_p1'),\n                SKDecimal(0.01, 0.07, decimals=3, name='roi_p2'),\n                SKDecimal(0.01, 0.20, decimals=3, name='roi_p3'),\n            ]\n\n        def generate_roi_table(params: Dict) -> dict[int, float]:\n\n            roi_table = {}\n            roi_table[0] = params['roi_p1'] + params['roi_p2'] + params['roi_p3']\n            roi_table[params['roi_t3']] = params['roi_p1'] + params['roi_p2']\n            roi_table[params['roi_t3'] + params['roi_t2']] = params['roi_p1']\n            roi_table[params['roi_t3'] + params['roi_t2'] + params['roi_t1']] = 0\n\n            return roi_table\n\n        def trailing_space() -> List[Dimension]:\n            # 这里所有参数都是必需的，只能修改类型或范围。\n            return [\n                # 固定为 true，如果优化 trailing_stop，则假定始终使用追踪止损。\n                Categorical([True], name='trailing_stop'),\n\n                SKDecimal(0.01, 0.35, decimals=3, name='trailing_stop_positive'),\n                # 'trailing_stop_positive_offset' 应大于 'trailing_stop_positive'，\n                # 所以这里用中间参数表示两者的差值。'trailing_stop_positive_offset' 的值在\n                # generate_trailing_params() 方法中构造。\n                # 这类似于用于构造 ROI 表的 hyperspace 维度。\n                SKDecimal(0.001, 0.1, decimals=3, name='trailing_stop_positive_offset_p1'),\n\n                Categorical([True, False], name='trailing_only_offset_is_reached'),\n        ]\n\n        # 自定义最大持仓数空间\n        def max_open_trades_space(self) -> List[Dimension]:\n            return [\n                Integer(-1, 10, name='max_open_trades'),\n            ]\n\nNote\n\n所有覆盖都是可选的，可根据需要混合使用。","type":"content","url":"/advanced-hyperopt#overriding-pre-defined-spaces","position":7},{"hierarchy":{"lvl1":"高级超参数优化","lvl4":"动态参数","lvl3":"覆盖预定义空间","lvl2":"高级超参数优化（Hyperopt）"},"type":"lvl4","url":"/advanced-hyperopt#id-1","position":8},{"hierarchy":{"lvl1":"高级超参数优化","lvl4":"动态参数","lvl3":"覆盖预定义空间","lvl2":"高级超参数优化（Hyperopt）"},"content":"参数也可以动态定义，但在 \n\nbot_start() 回调 被调用后，实例必须能访问到这些参数。\nclass MyAwesomeStrategy(IStrategy):\n\n    def bot_start(self, **kwargs) -> None:\n        self.buy_adx = IntParameter(20, 30, default=30, optimize=True)\n\n    # ...\n\nWarning\n\n以这种方式创建的参数不会出现在 list-strategies 的参数计数中。","type":"content","url":"/advanced-hyperopt#id-1","position":9},{"hierarchy":{"lvl1":"高级超参数优化","lvl4":"覆盖 Base estimator","lvl3":"覆盖预定义空间","lvl2":"高级超参数优化（Hyperopt）"},"type":"lvl4","url":"/advanced-hyperopt#id-base-estimator","position":10},{"hierarchy":{"lvl1":"高级超参数优化","lvl4":"覆盖 Base estimator","lvl3":"覆盖预定义空间","lvl2":"高级超参数优化（Hyperopt）"},"content":"你可以通过在 Hyperopt 子类中实现 generate_estimator()，为 Hyperopt 定义自己的 optuna 采样器。class MyAwesomeStrategy(IStrategy):\n    class HyperOpt:\n        def generate_estimator(dimensions: List['Dimension'], **kwargs):\n            return \"NSGAIIISampler\"\n\n\n可用值包括 “NSGAIISampler”、“TPESampler”、“GPSampler”、“CmaEsSampler”、“NSGAIIISampler”、“QMCSampler”（详情见 \n\noptuna-samplers 文档），也可以是继承自 optuna.samplers.BaseSampler 的类实例。\n\n有时需要自行研究以发现更多采样器（如 optunahub 提供的）。\n\nNote\n\n虽然可以自定义 estimator，但需要你自己研究参数并分析/理解应使用哪些参数。\n如果不确定，建议直接使用默认值（\"NSGAIIISampler\" 被证明最为通用）。\n\n使用 Optunahub 的 AutoSampler\n\nAutoSampler 文档\n\n安装必要依赖pip install optunahub cmaes torch scipy\n\n在策略中实现 generate_estimator()# ...\nfrom freqtrade.strategy.interface import IStrategy\nfrom typing import List\nimport optunahub\n# ... \n\nclass my_strategy(IStrategy):\n    class HyperOpt:\n        def generate_estimator(dimensions: List[\"Dimension\"], **kwargs):\n            if \"random_state\" in kwargs.keys():\n                return optunahub.load_module(\"samplers/auto_sampler\").AutoSampler(seed=kwargs[\"random_state\"])\n            else:\n                return optunahub.load_module(\"samplers/auto_sampler\").AutoSampler()\n\n\n显然，optuna 支持的其他采样器也可用同样方式集成。","type":"content","url":"/advanced-hyperopt#id-base-estimator","position":11},{"hierarchy":{"lvl1":"高级超参数优化","lvl3":"空间类型选项","lvl2":"高级超参数优化（Hyperopt）"},"type":"lvl3","url":"/advanced-hyperopt#id-2","position":12},{"hierarchy":{"lvl1":"高级超参数优化","lvl3":"空间类型选项","lvl2":"高级超参数优化（Hyperopt）"},"content":"对于附加空间，scikit-optimize（结合 Freqtrade）提供以下空间类型：\n\nCategorical - 从类别列表中选择（如 Categorical(['a', 'b', 'c'], name=\"cat\")）\n\nInteger - 从整数范围中选择（如 Integer(1, 10, name='rsi')）\n\nSKDecimal - 从有限精度的小数范围中选择（如 SKDecimal(0.1, 0.5, decimals=3, name='adx')）。仅 Freqtrade 提供。\n\nReal - 从全精度小数范围中选择（如 Real(0.1, 0.5, name='adx')）\n\n你可以从 freqtrade.optimize.space 导入所有这些类型，尽管 Categorical、Integer 和 Real 只是 scikit-optimize 空间的别名。SKDecimal 由 freqtrade 提供，用于更快的优化。from freqtrade.optimize.space import Categorical, Dimension, Integer, SKDecimal, Real  # noqa\n\nSKDecimal vs. Real\n\n我们建议几乎所有场景都使用 SKDecimal，而不是 Real 空间。虽然 Real 空间提供全精度（高达约 16 位小数），但这种精度很少需要，且会导致 hyperopt 时间过长。\n\n假设定义了一个较小的空间（SKDecimal(0.10, 0.15, decimals=2, name='xxx')）——SKDecimal 只有 5 种可能（[0.10, 0.11, 0.12, 0.13, 0.14, 0.15]）。\n\n相应的 real 空间 Real(0.10, 0.15 name='xxx') 则有几乎无限多的可能（[0.10, 0.010000000001, 0.010000000002, ... 0.014999999999, 0.01500000000]）。","type":"content","url":"/advanced-hyperopt#id-2","position":13},{"hierarchy":{"lvl1":"高级委托流分析"},"type":"lvl1","url":"/advanced-orderflow","position":0},{"hierarchy":{"lvl1":"高级委托流分析"},"content":"","type":"content","url":"/advanced-orderflow","position":1},{"hierarchy":{"lvl1":"高级委托流分析","lvl2":"委托流（Orderflow）数据"},"type":"lvl2","url":"/advanced-orderflow#id-orderflow","position":2},{"hierarchy":{"lvl1":"高级委托流分析","lvl2":"委托流（Orderflow）数据"},"content":"本指南将带你了解如何在 Freqtrade 中利用公共成交数据进行高级委托流分析。\n\n实验性功能\n\n委托流功能目前处于测试阶段，未来版本可能会有变动。如有问题或建议，请在 \n\nFreqtrade GitHub 仓库 反馈。\n\n目前尚未与 freqAI 联合测试——将这两者结合使用暂不在官方支持范围内。\n\n性能提示\n\n委托流需要原始成交数据。这类数据体量较大，freqtrade 在下载最近 X 根 K 线的成交数据时，初次启动可能会变慢。此外，启用该功能会增加内存占用。请确保有足够的系统资源。","type":"content","url":"/advanced-orderflow#id-orderflow","position":3},{"hierarchy":{"lvl1":"高级委托流分析","lvl3":"快速开始","lvl2":"委托流（Orderflow）数据"},"type":"lvl3","url":"/advanced-orderflow#id","position":4},{"hierarchy":{"lvl1":"高级委托流分析","lvl3":"快速开始","lvl2":"委托流（Orderflow）数据"},"content":"","type":"content","url":"/advanced-orderflow#id","position":5},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"启用公共成交数据","lvl3":"快速开始","lvl2":"委托流（Orderflow）数据"},"type":"lvl4","url":"/advanced-orderflow#id-1","position":6},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"启用公共成交数据","lvl3":"快速开始","lvl2":"委托流（Orderflow）数据"},"content":"在你的 config.json 文件中，将 exchange 部分的 use_public_trades 选项设置为 true。\"exchange\": {\n   ...\n   \"use_public_trades\": true,\n}","type":"content","url":"/advanced-orderflow#id-1","position":7},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"配置委托流处理","lvl3":"快速开始","lvl2":"委托流（Orderflow）数据"},"type":"lvl4","url":"/advanced-orderflow#id-2","position":8},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"配置委托流处理","lvl3":"快速开始","lvl2":"委托流（Orderflow）数据"},"content":"在 config.json 的 orderflow 部分定义你想要的委托流处理设置。你可以调整如下参数：\n\ncache_size：缓存多少根历史委托流 K 线，避免每根新 K 线都重新计算\n\nmax_candles：限制获取成交数据的最大 K 线数量\n\nscale：控制 footprint 图的价格分箱大小\n\nstacked_imbalance_range：定义连续失衡价位的最小数量\n\nimbalance_volume：过滤成交量低于该阈值的失衡\n\nimbalance_ratio：过滤买卖量差低于该值的失衡\"orderflow\": {\n    \"cache_size\": 1000, \n    \"max_candles\": 1500, \n    \"scale\": 0.5, \n    \"stacked_imbalance_range\": 3, // 至少需要这么多连续失衡\n    \"imbalance_volume\": 1, // 过滤低于该值的失衡\n    \"imbalance_ratio\": 3 // 过滤低于该比值的失衡\n  },","type":"content","url":"/advanced-orderflow#id-2","position":9},{"hierarchy":{"lvl1":"高级委托流分析","lvl3":"下载回测用成交数据","lvl2":"委托流（Orderflow）数据"},"type":"lvl3","url":"/advanced-orderflow#id-3","position":10},{"hierarchy":{"lvl1":"高级委托流分析","lvl3":"下载回测用成交数据","lvl2":"委托流（Orderflow）数据"},"content":"如需下载历史成交数据用于回测，请在 freqtrade download-data 命令中加上 --dl-trades 参数。freqtrade download-data -p BTC/USDT:USDT --timerange 20230101- --trading-mode futures --timeframes 5m --dl-trades\n\n数据可用性\n\n并非所有交易所都提供公共成交数据。对于支持的交易所，如果你用 --dl-trades 下载数据而数据不可用，freqtrade 会发出警告。","type":"content","url":"/advanced-orderflow#id-3","position":11},{"hierarchy":{"lvl1":"高级委托流分析","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"type":"lvl3","url":"/advanced-orderflow#id-4","position":12},{"hierarchy":{"lvl1":"高级委托流分析","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"content":"启用后，你的数据表（dataframe）会新增如下列：\ndataframe[\"trades\"] # 包含每笔成交的详细信息。\ndataframe[\"orderflow\"] # footprint 图字典（见下文）\ndataframe[\"imbalances\"] # 委托流失衡信息。\ndataframe[\"bid\"] # 总买单量\ndataframe[\"ask\"] # 总卖单量\ndataframe[\"delta\"] # 买卖量差。\ndataframe[\"min_delta\"] # 本 K 线内最小 delta\ndataframe[\"max_delta\"] # 本 K 线内最大 delta\ndataframe[\"total_trades\"] # 总成交笔数\ndataframe[\"stacked_imbalances_bid\"] # 堆叠买方失衡区间起点价位列表\ndataframe[\"stacked_imbalances_ask\"] # 堆叠卖方失衡区间起点价位列表\n\n你可以在策略代码中访问这些列进行进一步分析。例如：def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    # 计算累计 delta\n    dataframe[\"cum_delta\"] = cumulative_delta(dataframe[\"delta\"])\n    # 访问总成交笔数\n    total_trades = dataframe[\"total_trades\"]\n    ...\n\ndef cumulative_delta(delta: Series):\n    cumdelta = delta.cumsum()\n    return cumdelta\n","type":"content","url":"/advanced-orderflow#id-4","position":13},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"Footprint 图（dataframe[\"orderflow\"]）","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"type":"lvl4","url":"/advanced-orderflow#footprint-dataframe-orderflow","position":14},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"Footprint 图（dataframe[\"orderflow\"]）","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"content":"该列为不同价位的买卖订单提供详细分布，有助于洞察委托流动态。配置中的 scale 参数决定价格分箱大小。\n\norderflow 列为如下结构的字典：{\n    \"price\": {\n        \"bid_amount\": 0.0,\n        \"ask_amount\": 0.0,\n        \"bid\": 0,\n        \"ask\": 0,\n        \"delta\": 0.0,\n        \"total_volume\": 0.0,\n        \"total_trades\": 0\n    }\n}","type":"content","url":"/advanced-orderflow#footprint-dataframe-orderflow","position":15},{"hierarchy":{"lvl1":"高级委托流分析","lvl5":"orderflow 列说明","lvl4":"Footprint 图（dataframe[\"orderflow\"]）","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"type":"lvl5","url":"/advanced-orderflow#orderflow","position":16},{"hierarchy":{"lvl1":"高级委托流分析","lvl5":"orderflow 列说明","lvl4":"Footprint 图（dataframe[\"orderflow\"]）","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"content":"key：价格分箱（以 scale 为间隔分箱）\n\nbid_amount：每个价位的买入总量\n\nask_amount：每个价位的卖出总量\n\nbid：每个价位的买单数\n\nask：每个价位的卖单数\n\ndelta：每个价位的买卖量差\n\ntotal_volume：每个价位的总成交量（买入+卖出）\n\ntotal_trades：每个价位的总成交笔数（买单+卖单）\n\n利用这些特性，你可以基于委托流分析获得市场情绪和潜在交易机会。","type":"content","url":"/advanced-orderflow#orderflow","position":17},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"原始成交数据（dataframe[\"trades\"]）","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"type":"lvl4","url":"/advanced-orderflow#id-dataframe-trades","position":18},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"原始成交数据（dataframe[\"trades\"]）","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"content":"该列为本 K 线期间发生的每笔成交组成的列表，可用于更细粒度的委托流分析。\n\n每条记录为如下结构的字典：\n\ntimestamp：成交时间戳\n\ndate：成交日期\n\nprice：成交价格\n\namount：成交量\n\nside：买入或卖出\n\nid：成交唯一标识\n\ncost：成交总额（价格 * 数量）","type":"content","url":"/advanced-orderflow#id-dataframe-trades","position":19},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"失衡（dataframe[\"imbalances\"]）","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"type":"lvl4","url":"/advanced-orderflow#id-dataframe-imbalances","position":20},{"hierarchy":{"lvl1":"高级委托流分析","lvl4":"失衡（dataframe[\"imbalances\"]）","lvl3":"访问委托流数据","lvl2":"委托流（Orderflow）数据"},"content":"该列为字典，记录委托流中的失衡信息。当某价位的买卖量差异显著时，视为失衡。\n\n每行数据如下——以价格为索引，对应的 bid/ask 失衡值为列：{\n    \"price\": {\n        \"bid_imbalance\": False,\n        \"ask_imbalance\": False\n    }\n}","type":"content","url":"/advanced-orderflow#id-dataframe-imbalances","position":21},{"hierarchy":{"lvl1":"高级安装后配置"},"type":"lvl1","url":"/advanced-setup","position":0},{"hierarchy":{"lvl1":"高级安装后配置"},"content":"","type":"content","url":"/advanced-setup","position":1},{"hierarchy":{"lvl1":"高级安装后配置","lvl2":"高级安装后任务"},"type":"lvl2","url":"/advanced-setup#id","position":2},{"hierarchy":{"lvl1":"高级安装后配置","lvl2":"高级安装后任务"},"content":"本页介绍了一些在机器人安装后可以执行的高级任务和配置选项，在某些环境下可能会用到。\n\n如果你不了解这里提到的内容，通常你并不需要这些操作。","type":"content","url":"/advanced-setup#id","position":3},{"hierarchy":{"lvl1":"高级安装后配置","lvl3":"运行多个 Freqtrade 实例","lvl2":"高级安装后任务"},"type":"lvl3","url":"/advanced-setup#id-freqtrade","position":4},{"hierarchy":{"lvl1":"高级安装后配置","lvl3":"运行多个 Freqtrade 实例","lvl2":"高级安装后任务"},"content":"本节将介绍如何在同一台机器上同时运行多个机器人。","type":"content","url":"/advanced-setup#id-freqtrade","position":5},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"需要注意的事项","lvl3":"运行多个 Freqtrade 实例","lvl2":"高级安装后任务"},"type":"lvl4","url":"/advanced-setup#id-1","position":6},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"需要注意的事项","lvl3":"运行多个 Freqtrade 实例","lvl2":"高级安装后任务"},"content":"使用不同的数据库文件。\n\n使用不同的 Telegram 机器人（需要多个不同的配置文件，仅在启用 Telegram 时适用）。\n\n使用不同的端口（仅在启用 Freqtrade REST API Web 服务器时适用）。","type":"content","url":"/advanced-setup#id-1","position":7},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"不同的数据库文件","lvl3":"运行多个 Freqtrade 实例","lvl2":"高级安装后任务"},"type":"lvl4","url":"/advanced-setup#id-2","position":8},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"不同的数据库文件","lvl3":"运行多个 Freqtrade 实例","lvl2":"高级安装后任务"},"content":"为了跟踪你的交易、利润等，freqtrade 使用 SQLite 数据库存储各种信息，如你过去执行的交易和当前持有的仓位。这不仅可以让你跟踪利润，更重要的是，即使机器人进程重启或意外终止，也能保持活动状态的追踪。\n\n默认情况下，freqtrade 会为 dry-run 和实盘机器人分别使用不同的数据库文件（假设配置和命令行参数中都未指定 database-url）。实盘模式下默认数据库为 tradesv3.sqlite，dry-run 模式下为 tradesv3.dryrun.sqlite。\n\n用于指定这些文件路径的可选参数是 --db-url，它需要一个有效的 SQLAlchemy url。\n因此，当你仅用 config 和 strategy 参数以 dry-run 模式启动机器人时，以下两条命令效果相同：freqtrade trade -c MyConfig.json -s MyStrategy\n# 等价于\nfreqtrade trade -c MyConfig.json -s MyStrategy --db-url sqlite:///tradesv3.dryrun.sqlite\n\n这意味着，如果你在两个不同的终端运行 trade 命令（例如分别测试 USDT 和 BTC 交易），你需要为它们指定不同的数据库。\n\n如果你指定的数据库文件不存在，freqtrade 会自动创建一个同名数据库。因此，你可以用如下命令（在两个终端分别执行）测试自定义策略的 BTC 和 USDT 本位：# 终端 1：\nfreqtrade trade -c MyConfigBTC.json -s MyCustomStrategy --db-url sqlite:///user_data/tradesBTC.dryrun.sqlite\n# 终端 2：\nfreqtrade trade -c MyConfigUSDT.json -s MyCustomStrategy --db-url sqlite:///user_data/tradesUSDT.dryrun.sqlite\n\n同理，如果你想在实盘模式下做同样的事，也需要为每个实例创建至少一个新数据库，并指定“实盘”数据库路径，例如：# 终端 1：\nfreqtrade trade -c MyConfigBTC.json -s MyCustomStrategy --db-url sqlite:///user_data/tradesBTC.live.sqlite\n# 终端 2：\nfreqtrade trade -c MyConfigUSDT.json -s MyCustomStrategy --db-url sqlite:///user_data/tradesUSDT.live.sqlite\n\n关于 sqlite 数据库的更多用法（如手动录入或删除交易），请参见 \n\nSQL 速查表。","type":"content","url":"/advanced-setup#id-2","position":9},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"使用 docker 运行多个实例","lvl3":"运行多个 Freqtrade 实例","lvl2":"高级安装后任务"},"type":"lvl4","url":"/advanced-setup#id-docker","position":10},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"使用 docker 运行多个实例","lvl3":"运行多个 Freqtrade 实例","lvl2":"高级安装后任务"},"content":"要用 docker 运行多个 freqtrade 实例，你需要编辑 docker-compose.yml 文件，将所有实例作为独立服务添加。你可以将配置拆分为多个文件，便于模块化管理，这样如果需要修改所有机器人的通用配置，只需改一个文件即可。---\nversion: '3'\nservices:\n  freqtrade1:\n    image: freqtradeorg/freqtrade:stable\n    # image: freqtradeorg/freqtrade:develop\n    # 使用带绘图功能的镜像\n    # image: freqtradeorg/freqtrade:develop_plot\n    # 仅在需要额外依赖时才需 build\n    # build:\n    #   context: .\n    #   dockerfile: \"./docker/Dockerfile.custom\"\n    restart: always\n    container_name: freqtrade1\n    volumes:\n      - \"./user_data:/freqtrade/user_data\"\n    # 在本地 8080 端口暴露 api\n    # 启用前请阅读 https://www.freqtrade.io/zh_CN/latest/rest-api/ 文档\n     ports:\n     - \"127.0.0.1:8080:8080\"\n    # 运行 `docker compose up` 时的默认命令\n    command: >\n      trade\n      --logfile /freqtrade/user_data/logs/freqtrade1.log\n      --db-url sqlite:////freqtrade/user_data/tradesv3_freqtrade1.sqlite\n      --config /freqtrade/user_data/config.json\n      --config /freqtrade/user_data/config.freqtrade1.json\n      --strategy SampleStrategy\n  \n  freqtrade2:\n    image: freqtradeorg/freqtrade:stable\n    # image: freqtradeorg/freqtrade:develop\n    # 使用带绘图功能的镜像\n    # image: freqtradeorg/freqtrade:develop_plot\n    # 仅在需要额外依赖时才需 build\n    # build:\n    #   context: .\n    #   dockerfile: \"./docker/Dockerfile.custom\"\n    restart: always\n    container_name: freqtrade2\n    volumes:\n      - \"./user_data:/freqtrade/user_data\"\n    # 在本地 8081 端口暴露 api\n    # 启用前请阅读 https://www.freqtrade.io/zh_CN/latest/rest-api/ 文档\n    ports:\n      - \"127.0.0.1:8081:8080\"\n    # 运行 `docker compose up` 时的默认命令\n    command: >\n      trade\n      --logfile /freqtrade/user_data/logs/freqtrade2.log\n      --db-url sqlite:////freqtrade/user_data/tradesv3_freqtrade2.sqlite\n      --config /freqtrade/user_data/config.json\n      --config /freqtrade/user_data/config.freqtrade2.json\n      --strategy SampleStrategy\n\n\n你可以使用任意命名方式，freqtrade1 和 freqtrade2 只是示例。注意，每个实例都需要不同的数据库文件、端口映射和 telegram 配置。","type":"content","url":"/advanced-setup#id-docker","position":11},{"hierarchy":{"lvl1":"高级安装后配置","lvl3":"使用不同的数据库系统","lvl2":"高级安装后任务"},"type":"lvl3","url":"/advanced-setup#id-3","position":12},{"hierarchy":{"lvl1":"高级安装后配置","lvl3":"使用不同的数据库系统","lvl2":"高级安装后任务"},"content":"Freqtrade 使用 SQLAlchemy，支持多种数据库系统。因此，理论上支持多种数据库。\nFreqtrade 不会自动安装任何额外的数据库驱动。请参考 \n\nSQLAlchemy 文档 获取各数据库系统的安装说明。\n\n已知可用的数据库系统有：\n\nsqlite（默认）\n\nPostgreSQL\n\nMariaDB\n\nWarning\n\n使用下列数据库系统时，需自行负责管理。Freqtrade 团队不提供安装、维护（或备份）等支持。","type":"content","url":"/advanced-setup#id-3","position":13},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"PostgreSQL","lvl3":"使用不同的数据库系统","lvl2":"高级安装后任务"},"type":"lvl4","url":"/advanced-setup#postgresql","position":14},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"PostgreSQL","lvl3":"使用不同的数据库系统","lvl2":"高级安装后任务"},"content":"安装：\npip install psycopg2-binary\n\n用法：\n... --db-url postgresql+psycopg2://<用户名>:<密码>@localhost:5432/<数据库>\n\nFreqtrade 启动时会自动创建所需表。\n\n如运行多个 Freqtrade 实例，需为每个实例单独建库，或为每个连接使用不同用户/Schema。","type":"content","url":"/advanced-setup#postgresql","position":15},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"MariaDB / MySQL","lvl3":"使用不同的数据库系统","lvl2":"高级安装后任务"},"type":"lvl4","url":"/advanced-setup#mariadb-mysql","position":16},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"MariaDB / MySQL","lvl3":"使用不同的数据库系统","lvl2":"高级安装后任务"},"content":"Freqtrade 通过 SQLAlchemy 支持 MariaDB。\n\n安装：\npip install pymysql\n\n用法：\n... --db-url mysql+pymysql://<用户名>:<密码>@localhost:3306/<数据库>","type":"content","url":"/advanced-setup#mariadb-mysql","position":17},{"hierarchy":{"lvl1":"高级安装后配置","lvl3":"配置机器人为 systemd 服务","lvl2":"高级安装后任务"},"type":"lvl3","url":"/advanced-setup#configure-the-bot-running-as-a-systemd-service","position":18},{"hierarchy":{"lvl1":"高级安装后配置","lvl3":"配置机器人为 systemd 服务","lvl2":"高级安装后任务"},"content":"将 freqtrade.service 文件复制到你的 systemd 用户目录（通常为 ~/.config/systemd/user），并根据实际情况修改 WorkingDirectory 和 ExecStart。\n\nNote\n\n某些系统（如 Raspbian）不会从用户目录加载服务单元文件。这种情况下，请将 freqtrade.service 复制到 /etc/systemd/user/（需超级用户权限）。\n\n之后可用如下命令启动守护进程：systemctl --user start freqtrade\n\n如需在用户注销后仍能运行，需为 freqtrade 用户启用 linger：sudo loginctl enable-linger \"$USER\"\n\n如以服务方式运行机器人，可用 systemd 服务管理器作为软件 watchdog 监控 freqtrade 状态，并在故障时自动重启。如果配置文件中设置了 internals.sd_notify 为 true，或命令行使用了 --sd-notify，机器人会通过 sd_notify 协议向 systemd 发送心跳，并在状态变化时告知 systemd 当前状态（运行、暂停或停止）。\n\nfreqtrade.service.watchdog 文件提供了使用 systemd 作为 watchdog 的服务单元配置示例。\n\nNote\n\n如果机器人运行在 Docker 容器中，sd_notify 与 systemd 服务管理器之间的通信将无法工作。","type":"content","url":"/advanced-setup#configure-the-bot-running-as-a-systemd-service","position":19},{"hierarchy":{"lvl1":"高级安装后配置","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"type":"lvl3","url":"/advanced-setup#advanced-logging","position":20},{"hierarchy":{"lvl1":"高级安装后配置","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"content":"Freqtrade 使用 Python 的默认 logging 模块。\nPython 支持非常丰富的\n\n日志配置，远超本页所能涵盖。\n\n如果 freqtrade 配置文件未提供 log_config，则默认使用彩色终端输出格式。使用 --logfile logfile.log 会启用 RotatingFileHandler。\n\n如不满意日志格式或 RotatingFileHandler 的默认设置，可通过在配置文件中添加 log_config 自定义日志。\n\n默认配置大致如下，文件处理器已提供但未启用（filename 行被注释）。取消注释并填写有效路径即可启用。{\n  \"log_config\": {\n      \"version\": 1,\n      \"formatters\": {\n          \"basic\": {\n              \"format\": \"%(message)s\"\n          },\n          \"standard\": {\n              \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n          }\n      },\n      \"handlers\": {\n          \"console\": {\n              \"class\": \"freqtrade.loggers.ft_rich_handler.FtRichHandler\",\n              \"formatter\": \"basic\"\n          },\n          \"file\": {\n              \"class\": \"logging.handlers.RotatingFileHandler\",\n              \"formatter\": \"standard\",\n              // \"filename\": \"someRandomLogFile.log\",\n              \"maxBytes\": 10485760,\n              \"backupCount\": 10\n          }\n      },\n      \"root\": {\n          \"handlers\": [\n              \"console\",\n              // \"file\"\n          ],\n          \"level\": \"INFO\",\n      }\n  }\n}\n\n高亮行\n\n上述代码块中高亮的行定义了 Rich handler，属于同一组。\n\n格式化器 “standard” 和 “file” 属于 FileHandler。\n\n每个 handler 必须使用已定义的 formatter（按名称），其 class 必须可用且为有效日志类。\n要实际启用 handler，需在 “root” 段的 “handlers” 列表中添加。\n如省略该段，freqtrade 不会输出日志（至少不会用未配置的 handler 输出）。\n\n显式日志配置\n\n建议将日志配置从主配置文件中提取出来，通过\n\n多配置文件功能传递给机器人，避免重复代码。\n\n在许多 Linux 系统上，机器人可配置为将日志发送到 syslog 或 journald 系统服务。Windows 下也可远程记录到 syslog 服务器。--logfile 命令行参数可用于此目的。","type":"content","url":"/advanced-setup#advanced-logging","position":21},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"日志输出到 syslog","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"type":"lvl4","url":"/advanced-setup#id-syslog","position":22},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"日志输出到 syslog","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"content":"要将 Freqtrade 日志发送到本地或远程 syslog，请用 “log_config” 配置日志。{\n  // ...\n  \"log_config\": {\n    \"version\": 1,\n    \"formatters\": {\n      \"syslog_fmt\": {\n        \"format\": \"%(name)s - %(levelname)s - %(message)s\"\n      }\n    },\n    \"handlers\": {\n      // 其他 handler\n      \"syslog\": {\n         \"class\": \"logging.handlers.SysLogHandler\",\n          \"formatter\": \"syslog_fmt\",\n          // 可用上面任一 address\n          \"address\": \"/dev/log\"\n      }\n    },\n    \"root\": {\n      \"handlers\": [\n        // 其他 handler\n        \"syslog\",\n        \n      ]\n    }\n\n  }\n}\n\n更多日志 handler 配置 可用于同时输出到控制台等。","type":"content","url":"/advanced-setup#id-syslog","position":23},{"hierarchy":{"lvl1":"高级安装后配置","lvl5":"Syslog 用法","lvl4":"日志输出到 syslog","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"type":"lvl5","url":"/advanced-setup#syslog","position":24},{"hierarchy":{"lvl1":"高级安装后配置","lvl5":"Syslog 用法","lvl4":"日志输出到 syslog","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"content":"日志以 user facility 发送到 syslog。可用如下命令查看：\n\ntail -f /var/log/user\n\n或安装图形日志查看器（如 Ubuntu 的 ‘Log File Viewer’）。\n\n许多系统上，syslog（rsyslog）和 journald 互通，因此日志可用 journalctl 或 syslog 工具查看。\n你可根据习惯自由组合。\n\n如需将机器人日志重定向到专用日志文件，在 /etc/rsyslog.d/50-default.conf 末尾添加：if $programname startswith \"freqtrade\" then -/var/log/freqtrade.log\n\n如需开启 rsyslog 的重复消息抑制（如多条心跳合并为一条），在 /etc/rsyslog.conf 添加：# 过滤重复消息\n$RepeatedMsgReduction on","type":"content","url":"/advanced-setup#syslog","position":25},{"hierarchy":{"lvl1":"高级安装后配置","lvl5":"Syslog 地址","lvl4":"日志输出到 syslog","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"type":"lvl5","url":"/advanced-setup#syslog-1","position":26},{"hierarchy":{"lvl1":"高级安装后配置","lvl5":"Syslog 地址","lvl4":"日志输出到 syslog","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"content":"syslog 地址可为 Unix 域套接字（文件名）或 UDP 套接字（IP:端口）。\n\n常见示例：\n\n\"address\": \"/dev/log\" —— 绝大多数系统的本地 syslog。\n\n\"address\": \"/var/run/syslog\" —— MacOS 使用。\n\n\"address\": \"localhost:514\" —— 本地 syslog 的 UDP。\n\n\"address\": \"<ip>:514\" —— 远程 syslog。\n\n已废弃：命令行配置 syslog\n\n--logfile syslog:<syslog_address> —— 通过 <syslog_address> 发送日志到 syslog。\n\n地址可为 Unix 域套接字或 UDP（IP:端口）。\n\n常见用法：\n\n--logfile syslog:/dev/log —— 本地 syslog。\n\n--logfile syslog —— 等同于上。\n\n--logfile syslog:/var/run/syslog —— MacOS。\n\n--logfile syslog:localhost:514 —— 本地 UDP。\n\n--logfile syslog:<ip>:514 —— 远程 syslog。","type":"content","url":"/advanced-setup#syslog-1","position":27},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"日志输出到 journald","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"type":"lvl4","url":"/advanced-setup#id-journald","position":28},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"日志输出到 journald","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"content":"需安装 cysystemd python 包（pip install cysystemd），Windows 不支持 journald。\n\n要将 Freqtrade 日志发送到 journald，请在配置中添加如下片段：{\n  // ...\n  \"log_config\": {\n    \"version\": 1,\n    \"formatters\": {\n      \"journald_fmt\": {\n        \"format\": \"%(name)s - %(levelname)s - %(message)s\"\n      }\n    },\n    \"handlers\": {\n      // 其他 handler\n      \"journald\": {\n         \"class\": \"cysystemd.journal.JournaldLogHandler\",\n          \"formatter\": \"journald_fmt\",\n      }\n    },\n    \"root\": {\n      \"handlers\": [\n        // .. \n        \"journald\",\n        \n      ]\n    }\n\n  }\n}\n\n更多日志 handler 配置 可用于同时输出到控制台等。\n\n日志以 user facility 发送到 journald。可用如下命令查看：\n\njournalctl -f —— 实时查看所有 journald 日志。\n\njournalctl -f -u freqtrade.service —— 机器人以 systemd 服务运行时查看。\n\njournalctl 还有许多过滤选项，详见其手册。\n\n许多系统上，syslog（rsyslog）和 journald 互通，因此日志可用 --logfile syslog 或 --logfile journald，并可用 journalctl 或 syslog 工具查看。\n你可根据习惯自由组合。\n\n已废弃：命令行配置 journald\n\n用 --logfile journald 命令行参数将日志发送到 journald。","type":"content","url":"/advanced-setup#id-journald","position":29},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"日志格式为 JSON","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"type":"lvl4","url":"/advanced-setup#id-json","position":30},{"hierarchy":{"lvl1":"高级安装后配置","lvl4":"日志格式为 JSON","lvl3":"高级日志配置","lvl2":"高级安装后任务"},"content":"你也可以将默认输出流配置为 JSON 格式。\n“fmt_dict” 属性定义了 json 输出的键及 \n\npython logging LogRecord 属性。\n\n如下配置将默认输出改为 JSON。该 formatter 也可与 RotatingFileHandler 配合使用。建议至少保留一种人类可读格式。{\n  // ...\n  \"log_config\": {\n    \"version\": 1,\n    \"formatters\": {\n       \"json\": {\n          \"()\": \"freqtrade.loggers.json_formatter.JsonFormatter\",\n          \"fmt_dict\": {\n              \"timestamp\": \"asctime\",\n              \"level\": \"levelname\",\n              \"logger\": \"name\",\n              \"message\": \"message\"\n          }\n      }\n    },\n    \"handlers\": {\n      // 其他 handler\n      \"jsonStream\": {\n          \"class\": \"logging.StreamHandler\",\n          \"formatter\": \"json\"\n      }\n    },\n    \"root\": {\n      \"handlers\": [\n        // .. \n        \"jsonStream\",\n        \n      ]\n    }\n\n  }\n}","type":"content","url":"/advanced-setup#id-json","position":31},{"hierarchy":{"lvl1":"回测"},"type":"lvl1","url":"/backtesting","position":0},{"hierarchy":{"lvl1":"回测"},"content":"","type":"content","url":"/backtesting","position":1},{"hierarchy":{"lvl1":"回测","lvl2":"回测（Backtesting）"},"type":"lvl2","url":"/backtesting#id-backtesting","position":2},{"hierarchy":{"lvl1":"回测","lvl2":"回测（Backtesting）"},"content":"本页将介绍如何通过回测验证你的策略表现。\n\n回测需要有历史数据。\n\n如何获取你关注的交易对和交易所的数据，请参阅文档的\n\n数据下载部分。","type":"content","url":"/backtesting#id-backtesting","position":3},{"hierarchy":{"lvl1":"回测","lvl3":"回测命令参考","lvl2":"回测（Backtesting）"},"type":"lvl3","url":"/backtesting#id","position":4},{"hierarchy":{"lvl1":"回测","lvl3":"回测命令参考","lvl2":"回测（Backtesting）"},"content":"用法: freqtrade backtesting [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                             [--strategy-path PATH]\n                             [--recursive-strategy-search]\n                             [--freqaimodel NAME] [--freqaimodel-path PATH]\n                             [-i TIMEFRAME] [--timerange TIMERANGE]\n                             [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                             [--max-open-trades INT]\n                             [--stake-amount STAKE_AMOUNT] [--fee FLOAT]\n                             [-p PAIRS [PAIRS ...]] [--eps]\n                             [--enable-protections]\n                             [--dry-run-wallet DRY_RUN_WALLET]\n                             [--timeframe-detail TIMEFRAME_DETAIL]\n                             [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                             [--export {none,trades,signals}]\n                             [--backtest-filename PATH]\n                             [--backtest-directory PATH]\n                             [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n                             [--cache {none,day,week,month}]\n                             [--freqai-backtest-live-models]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --max-open-trades INT\n                        覆盖配置设置中的 `max_open_trades` 值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖配置设置中的 `stake_amount` 值。\n  --fee FLOAT           指定手续费比率。将应用两次（在交易进入和退出时）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --eps, --enable-position-stacking\n                        允许多次购买同一交易对（仓位叠加）。\n  --enable-protections, --enableprotections\n                        为回测启用保护机制。这将显著降低回测速度，但会包含已配置的保护机制。\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        起始余额，用于回测/超参数优化和模拟运行。\n  --timeframe-detail TIMEFRAME_DETAIL\n                        为回测指定详细时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        提供要回测的策略列表（用空格分隔）。请注意，时间框架需要在配置中或通过命令行设置。\n                        当与 `--export trades` 一起使用时，策略名称会被注入到文件名中\n                        （因此 `backtest-data.json` 会变成 `backtest-data-SampleStrategy.json`）。\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-\n                        filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或\n                        `--export-directory` 作为基础目录。\n  --backtest-directory PATH, --export-directory PATH\n                        用于回测结果的目录。示例：\n                        `--export-directory=user_data/backtest_results/`。\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        显示按[日、周、月、年]的回测明细。\n  --cache {none,day,week,month}\n                        加载不超过指定时间的缓存回测结果（默认：day）。\n  --freqai-backtest-live-models\n                        使用已准备好的模型运行回测。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人要使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        为 freqaimodels 指定额外的查找路径。\n","type":"content","url":"/backtesting#id","position":5},{"hierarchy":{"lvl1":"回测","lvl3":"用回测测试你的策略","lvl2":"回测（Backtesting）"},"type":"lvl3","url":"/backtesting#id-1","position":6},{"hierarchy":{"lvl1":"回测","lvl3":"用回测测试你的策略","lvl2":"回测（Backtesting）"},"content":"现在你已经有了完善的入场和出场策略，并准备了一些历史数据，你就可以用真实数据来测试它了。这就是我们所说的\n\n回测。\n\n回测会使用你配置文件中的加密货币（交易对），并默认从 user_data/data/<exchange> 加载历史K线（OHLCV）数据。\n如果没有该交易所/交易对/周期的数据，回测会提示你先用 freqtrade download-data 下载。详情请参阅\n\n数据下载部分。\n\n回测结果可以帮助你判断机器人获利的概率是否大于亏损。\n\n所有收益计算都包含手续费，freqtrade 会用交易所的默认手续费进行计算。\n\n回测中使用动态交易对列表\n\n回测支持动态交易对列表（但并非所有处理器都可用于回测），但这依赖于当前市场状态，无法反映历史时期的真实交易对列表。\n并且，使用非 StaticPairlist 时，回测结果无法保证可复现。\n详情请阅读\n\n交易对列表文档。\n\n如需获得可复现结果，建议用 \n\ntest-pairlist 命令生成静态交易对列表。\n\nCaution\n\nFreqtrade 默认会将回测结果导出到 user_data/backtest_results。\n导出的交易可用于\n\n进一步分析或用 \n\nplotting 子命令（freqtrade plot-dataframe）进行可视化。","type":"content","url":"/backtesting#id-1","position":7},{"hierarchy":{"lvl1":"回测","lvl4":"起始余额","lvl3":"用回测测试你的策略","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-2","position":8},{"hierarchy":{"lvl1":"回测","lvl4":"起始余额","lvl3":"用回测测试你的策略","lvl2":"回测（Backtesting）"},"content":"回测需要一个起始余额，可通过命令行参数 --dry-run-wallet <余额> 或 --starting-balance <余额>，也可通过配置项 dry_run_wallet 设置。\n该金额必须大于 stake_amount, 否则机器人无法模拟任何交易。","type":"content","url":"/backtesting#id-2","position":9},{"hierarchy":{"lvl1":"回测","lvl4":"动态交易金额","lvl3":"用回测测试你的策略","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-3","position":10},{"hierarchy":{"lvl1":"回测","lvl4":"动态交易金额","lvl3":"用回测测试你的策略","lvl2":"回测（Backtesting）"},"content":"回测支持\n\n动态交易金额，即将 stake_amount 配置为 “unlimited”, 会将起始余额按 max_open_trades 平均分配。\n前期盈利会导致后续交易金额增加，实现复利。","type":"content","url":"/backtesting#id-3","position":11},{"hierarchy":{"lvl1":"回测","lvl4":"回测命令示例","lvl3":"用回测测试你的策略","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-4","position":12},{"hierarchy":{"lvl1":"回测","lvl4":"回测命令示例","lvl3":"用回测测试你的策略","lvl2":"回测（Backtesting）"},"content":"用 5 分钟K线（OHLCV）数据（默认）freqtrade backtesting --strategy AwesomeStrategy\n\n其中 --strategy AwesomeStrategy / -s AwesomeStrategy 指的是策略类名，该类在 user_data/strategies 目录下的 python 文件中。\n\n用 1 分钟K线（OHLCV）数据freqtrade backtesting --strategy AwesomeStrategy --timeframe 1m\n\n自定义起始余额为 1000（以 stake 货币计）freqtrade backtesting --strategy AwesomeStrategy --dry-run-wallet 1000\n\n使用不同的本地历史K线（OHLCV）数据源\n\n假设你从 Binance 下载了历史数据，保存在 user_data/data/binance-20180101 目录。\n可用如下命令进行回测：freqtrade backtesting --strategy AwesomeStrategy --datadir user_data/data/binance-20180101 \n\n对比多个策略freqtrade backtesting --strategy-list SampleStrategy1 AwesomeStrategy --timeframe 5m\n\n其中 SampleStrategy1 和 AwesomeStrategy 均为策略类名。\n\n不导出交易到文件freqtrade backtesting --strategy backtesting --export none --config config.json \n\n仅当你确定不需要后续可视化或分析结果时使用。\n\n导出交易到自定义文件夹freqtrade backtesting --strategy backtesting --export trades --backtest-directory=user_data/custom-backtest-results\n\n更多关于\n\n策略启动期的内容请阅读相关文档。\n\n自定义手续费\n\n有时你的账户有手续费返还（如大额账户或月交易量达标），ccxt 无法感知。\n此时可用 --fee 命令行参数指定手续费。\n手续费为比例，回测时会收取两次（开仓和平仓各一次）。\n\n例如，单笔手续费为 0.1%（即 0.001），可用如下命令：freqtrade backtesting --fee 0.001\n\nCaution\n\n仅在你想测试不同手续费时使用该参数。默认情况下，回测会自动获取交易所默认手续费。\n\n用 timerange 缩小测试集\n\n用 --timerange 参数可指定测试集时间范围。\n\n如用 --timerange=20190501-，则从 2019 年 5 月 1 日起用所有可用数据：freqtrade backtesting --timerange=20190501-\n\n也可指定具体日期区间。\n\n完整 timerange 语法：\n\n用到 2018/01/31 的数据：--timerange=-20180131\n\n用 2018/01/31 之后的数据：--timerange=20180131-\n\n用 2018/01/31 到 2018/03/01 的数据：--timerange=20180131-20180301\n\n用 POSIX/epoch 时间戳区间：--timerange=1527595200-1527618600","type":"content","url":"/backtesting#id-4","position":13},{"hierarchy":{"lvl1":"回测","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl3","url":"/backtesting#id-5","position":14},{"hierarchy":{"lvl1":"回测","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"回测最重要的是理解结果。\n\n回测结果大致如下：                                                 BACKTESTING REPORT                                                  \n┏━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃          Pair ┃ Trades ┃ Avg Profit % ┃ Tot Profit USDT ┃ Tot Profit % ┃    Avg Duration ┃  Win  Draw  Loss  Win% ┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ LTC/USDT:USDT │     16 │          1.0 │          56.176 │         5.62 │        16:16:00 │   16     0     0   100 │\n│ ETC/USDT:USDT │     12 │         0.72 │          30.936 │         3.09 │         9:55:00 │   11     0     1  91.7 │\n│ ETH/USDT:USDT │      8 │         0.66 │          17.864 │         1.79 │ 1 day, 13:55:00 │    7     0     1  87.5 │\n│ XLM/USDT:USDT │     10 │         0.31 │          11.054 │         1.11 │        12:08:00 │    9     0     1  90.0 │\n│ BTC/USDT:USDT │      8 │         0.21 │           7.289 │         0.73 │ 3 days, 1:24:00 │    6     0     2  75.0 │\n│ XRP/USDT:USDT │      9 │        -0.14 │          -7.261 │        -0.73 │        21:18:00 │    8     0     1  88.9 │\n│ DOT/USDT:USDT │      6 │         -0.4 │          -9.187 │        -0.92 │         5:35:00 │    4     0     2  66.7 │\n│ ADA/USDT:USDT │      8 │        -1.76 │         -52.098 │        -5.21 │        11:38:00 │    6     0     2  75.0 │\n│         TOTAL │     77 │         0.22 │          54.774 │         5.48 │        22:12:00 │   67     0    10  87.0 │\n└───────────────┴────────┴──────────────┴─────────────────┴──────────────┴─────────────────┴────────────────────────┘\n                                               LEFT OPEN TRADES REPORT                                                \n┏━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃          Pair ┃ Trades ┃ Avg Profit % ┃ Tot Profit USDT ┃ Tot Profit % ┃     Avg Duration ┃  Win  Draw  Loss  Win% ┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ BTC/USDT:USDT │      1 │        -4.14 │          -9.930 │        -0.99 │ 17 days, 8:00:00 │    0     0     1     0 │\n│ ETC/USDT:USDT │      1 │        -4.24 │         -15.365 │        -1.54 │         10:40:00 │    0     0     1     0 │\n│ DOT/USDT:USDT │      1 │        -5.29 │         -19.125 │        -1.91 │         11:30:00 │    0     0     1     0 │\n│         TOTAL │      3 │        -4.56 │         -44.420 │        -4.44 │  6 days, 2:03:00 │    0     0     3     0 │\n└───────────────┴────────┴──────────────┴─────────────────┴──────────────┴──────────────────┴────────────────────────┘\n                                                ENTER TAG STATS                                                \n┏━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ Enter Tag ┃ Entries ┃ Avg Profit % ┃ Tot Profit USDT ┃ Tot Profit % ┃ Avg Duration ┃  Win  Draw  Loss  Win% ┃\n┡━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│     OTHER │      77 │         0.22 │          54.774 │         5.48 │     22:12:00 │   67     0    10  87.0 │\n│     TOTAL │      77 │         0.22 │          54.774 │         5.48 │     22:12:00 │   67     0    10  87.0 │\n└───────────┴─────────┴──────────────┴─────────────────┴──────────────┴──────────────┴────────────────────────┘\n                                                EXIT REASON STATS                                                 \n┏━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ Exit Reason ┃ Exits ┃ Avg Profit % ┃ Tot Profit USDT ┃ Tot Profit % ┃    Avg Duration ┃  Win  Draw  Loss  Win% ┃\n┡━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         roi │    67 │         1.05 │         242.179 │        24.22 │        15:49:00 │   67     0     0   100 │\n│ exit_signal │     4 │        -2.23 │         -31.217 │        -3.12 │  1 day, 8:38:00 │    0     0     4     0 │\n│  force_exit │     3 │        -4.56 │         -44.420 │        -4.44 │ 6 days, 2:03:00 │    0     0     3     0 │\n│   stop_loss │     3 │       -10.14 │        -111.768 │       -11.18 │  1 day, 3:05:00 │    0     0     3     0 │\n│       TOTAL │    77 │         0.22 │          54.774 │         5.48 │        22:12:00 │   67     0    10  87.0 │\n└─────────────┴───────┴──────────────┴─────────────────┴──────────────┴─────────────────┴────────────────────────┘\n                                                        MIXED TAG STATS                                                        \n┏━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ Enter Tag ┃ Exit Reason ┃ Trades ┃ Avg Profit % ┃ Tot Profit USDT ┃ Tot Profit % ┃    Avg Duration ┃  Win  Draw  Loss  Win% ┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│           │         roi │     67 │         1.05 │         242.179 │        24.22 │        15:49:00 │   67     0     0   100 │\n│           │ exit_signal │      4 │        -2.23 │         -31.217 │        -3.12 │  1 day, 8:38:00 │    0     0     4     0 │\n│           │  force_exit │      3 │        -4.56 │         -44.420 │        -4.44 │ 6 days, 2:03:00 │    0     0     3     0 │\n│           │   stop_loss │      3 │       -10.14 │        -111.768 │       -11.18 │  1 day, 3:05:00 │    0     0     3     0 │\n│     TOTAL │             │     77 │         0.22 │          54.774 │         5.48 │        22:12:00 │   67     0    10  87.0 │\n└───────────┴─────────────┴────────┴──────────────┴─────────────────┴──────────────┴─────────────────┴────────────────────────┘\n                          SUMMARY METRICS                          \n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ Metric                        ┃ Value                           ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ Backtesting from              │ 2025-07-01 00:00:00             │\n│ Backtesting to                │ 2025-08-01 00:00:00             │\n│ Trading Mode                  │ Isolated Futures                │\n│ Max open trades               │ 3                               │\n│                               │                                 │\n│ Total/Daily Avg Trades        │ 77 / 2.48                       │\n│ Starting balance              │ 1000 USDT                       │\n│ Final balance                 │ 1054.774 USDT                   │\n│ Absolute profit               │ 54.774 USDT                     │\n│ Total profit %                │ 5.48%                           │\n│ CAGR %                        │ 87.36%                          │\n│ Sortino                       │ 2.48                            │\n│ Sharpe                        │ 3.75                            │\n│ Calmar                        │ 40.99                           │\n│ SQN                           │ 0.69                            │\n│ Profit factor                 │ 1.29                            │\n│ Expectancy (Ratio)            │ 0.71 (0.04)                     │\n│ Avg. daily profit             │ 1.767 USDT                      │\n│ Avg. stake amount             │ 345.016 USDT                    │\n│ Total trade volume            │ 53316.954 USDT                  │\n│                               │                                 │\n│ Long / Short trades           │ 67 / 10                         │\n│ Long / Short profit %         │ 8.94% / -3.47%                  │\n│ Long / Short profit USDT      │ 89.425 / -34.651                │\n│                               │                                 │\n│ Best Pair                     │ LTC/USDT:USDT 5.62%             │\n│ Worst Pair                    │ ADA/USDT:USDT -5.21%            │\n│ Best trade                    │ ETC/USDT:USDT 2.00%             │\n│ Worst trade                   │ ADA/USDT:USDT -10.17%           │\n│ Best day                      │ 26.91 USDT                      │\n│ Worst day                     │ -47.741 USDT                    │\n│ Days win/draw/lose            │ 20 / 6 / 5                      │\n│ Min/Max/Avg. Duration Winners │ 0d 00:35 / 5d 18:15 / 0d 15:49  │\n│ Min/Max/Avg. Duration Losers  │ 0d 10:40 / 17d 08:00 / 2d 17:00 │\n│ Max Consecutive Wins / Loss   │ 36 / 3                          │\n│ Rejected Entry signals        │ 258                             │\n│ Entry/Exit Timeouts           │ 0 / 0                           │\n│                               │                                 │\n│ Min balance                   │ 1003.168 USDT                   │\n│ Max balance                   │ 1149.421 USDT                   │\n│ Max % of account underwater   │ 8.23%                           │\n│ Absolute drawdown             │ 94.647 USDT (8.23%)             │\n│ Drawdown duration             │ 9 days 08:50:00                 │\n│ Profit at drawdown start      │ 149.421 USDT                    │\n│ Profit at drawdown end        │ 54.774 USDT                     │\n│ Drawdown start                │ 2025-07-22 15:10:00             │\n│ Drawdown end                  │ 2025-08-01 00:00:00             │\n│ Market change                 │ 30.51%                          │\n└───────────────────────────────┴─────────────────────────────────┘\n\nBacktested 2025-07-01 00:00:00 -> 2025-08-01 00:00:00 | Max open trades : 3\n                                                            STRATEGY SUMMARY                                                            \n┏━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━┓\n┃       Strategy ┃ Trades ┃ Avg Profit % ┃ Tot Profit USDT ┃ Tot Profit % ┃ Avg Duration ┃  Win  Draw  Loss  Win% ┃           Drawdown ┃\n┡━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━┩\n│ SampleStrategy │     77 │         0.22 │          54.774 │         5.48 │     22:12:00 │   67     0    10  87.0 │ 94.647 USDT  8.23% │\n└────────────────┴────────┴──────────────┴─────────────────┴──────────────┴──────────────┴────────────────────────┴────────────────────┘","type":"content","url":"/backtesting#id-5","position":15},{"hierarchy":{"lvl1":"回测","lvl4":"回测报告表格","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-6","position":16},{"hierarchy":{"lvl1":"回测","lvl4":"回测报告表格","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"第一张表包含机器人所有交易，包括\"未平仓交易\"。\n\n最后一行给出策略总体表现，如：│         TOTAL │     77 │         0.22 │          54.774 │         5.48 │        22:12:00 │   67     0    10  87.0 │\n\n机器人共进行了 77 笔交易，平均持仓时长 22:12:00, 总收益率 5.48%, 即用 1000 USDT 起始资金赚取了 54.774 USDT。\n\nAvg Profit % 列为所有交易的平均收益率。\n\nTot Profit % 列为相对于起始余额的总收益率。\n\n如上例，起始余额 1000 USDT，绝对收益 54.774 USDT，则 Tot Profit % = (54.774 / 1000) * 100 ~= 5.48%。\n\n策略表现受入场、出场、minimal_roi 和 stop_loss 等多因素影响。\n\n例如，若 minimal_roi 仅为：\"minimal_roi\": {\n    \"0\":  0.01\n},\n\n则每次盈利 1% 就会平仓，无法获得更高收益。\n\n反之，若 minimal_roi 过高，如 \"0\":  0.55（55%），几乎不可能达到。\n因此，策略表现是多种因素的综合结果，包括配置和交易对选择。","type":"content","url":"/backtesting#id-6","position":17},{"hierarchy":{"lvl1":"回测","lvl4":"未平仓交易表","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-7","position":18},{"hierarchy":{"lvl1":"回测","lvl4":"未平仓交易表","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"第二张表为回测期结束时被\"强制平仓\"的所有交易，便于完整展示。\n这些交易也包含在第一张表中，但单独列出便于分析。\n\n以下是翻译后的中文内容，保持了Markdown格式：","type":"content","url":"/backtesting#id-7","position":19},{"hierarchy":{"lvl1":"回测","lvl4":"进入标签统计表","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-8","position":20},{"hierarchy":{"lvl1":"回测","lvl4":"进入标签统计表","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"第三个表格提供按进入标签（例如 enter_long、enter_short）分类的交易明细，显示每个标签的进入次数、平均利润百分比、基础货币总利润、总利润百分比、平均持续时间以及盈利、平局和亏损的次数。","type":"content","url":"/backtesting#id-8","position":21},{"hierarchy":{"lvl1":"回测","lvl4":"退出原因统计表","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-9","position":22},{"hierarchy":{"lvl1":"回测","lvl4":"退出原因统计表","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"第四个表格包含退出原因的汇总（例如 exit_signal、roi、stop_loss、force_exit）。此表格可以告诉您哪个领域需要额外改进（例如，如果许多 exit_signal 交易都是亏损的，您应该致力于改善退出信号或考虑禁用它）。","type":"content","url":"/backtesting#id-9","position":23},{"hierarchy":{"lvl1":"回测","lvl4":"混合标签统计表","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-10","position":24},{"hierarchy":{"lvl1":"回测","lvl4":"混合标签统计表","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"第五个表格结合了进入标签和退出原因，提供了不同进入标签与特定退出原因组合表现的详细视图。这有助于识别哪些进入和退出策略的组合最为有效。","type":"content","url":"/backtesting#id-10","position":25},{"hierarchy":{"lvl1":"回测","lvl4":"汇总指标","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-11","position":26},{"hierarchy":{"lvl1":"回测","lvl4":"汇总指标","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"回测报告最后是汇总指标表，它包含了您的策略在回测数据上表现的关键指标。。┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ Metric                        ┃ Value                           ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ Backtesting from              │ 2025-07-01 00:00:00             │\n│ Backtesting to                │ 2025-08-01 00:00:00             │\n│ Trading Mode                  │ Isolated Futures                │\n│ Max open trades               │ 3                               │\n│                               │                                 │\n│ Total/Daily Avg Trades        │ 72 / 2.32                       │\n│ Starting balance              │ 1000 USDT                       │\n│ Final balance                 │ 1106.734 USDT                   │\n│ Absolute profit               │ 106.734 USDT                    │\n│ Total profit %                │ 10.67%                          │\n│ CAGR %                        │ 230.04%                         │\n│ Sortino                       │ 4.99                            │\n│ Sharpe                        │ 8.00                            │\n│ Calmar                        │ 77.76                           │\n│ SQN                           │ 1.52                            │\n│ Profit factor                 │ 1.79                            │\n│ Expectancy (Ratio)            │ 1.48 (0.07)                     │\n│ Avg. daily profit             │ 3.443 USDT                      │\n│ Avg. stake amount             │ 363.133 USDT                    │\n│ Total trade volume            │ 52466.174 USDT                  │\n│                               │                                 │\n│ Best Pair                     │ LTC/USDT:USDT 4.48%             │\n│ Worst Pair                    │ ADA/USDT:USDT -1.78%            │\n│ Best trade                    │ ETC/USDT:USDT 2.00%             │\n│ Worst trade                   │ ADA/USDT:USDT -10.17%           │\n│ Best day                      │ 23.535 USDT                     │\n│ Worst day                     │ -49.813 USDT                    │\n│ Days win/draw/lose            │ 21 / 6 / 4                      │\n│ Min/Max/Avg. Duration Winners │ 0d 00:35 / 5d 18:15 / 0d 15:30  │\n│ Min/Max/Avg. Duration Losers  │ 0d 12:00 / 17d 08:00 / 3d 23:28 │\n│ Max Consecutive Wins / Loss   │ 58 / 4                          │\n│ Rejected Entry signals        │ 254                             │\n│ Entry/Exit Timeouts           │ 0 / 0                           │\n│                               │                                 │\n│ Min balance                   │ 1003.168 USDT                   │\n│ Max balance                   │ 1209 USDT                       │\n│ Max % of account underwater   │ 8.46%                           │\n│ Absolute drawdown             │ 102.266 USDT (8.46%)            │\n│ Drawdown duration             │ 9 days 08:50:00                 │\n│ Profit at drawdown start      │ 209 USDT                        │\n│ Profit at drawdown end        │ 106.734 USDT                    │\n│ Drawdown start                │ 2025-07-22 15:10:00             │\n│ Drawdown end                  │ 2025-08-01 00:00:00             │\n│ Market change                 │ 30.51%                          │\n└───────────────────────────────┴─────────────────────────────────┘\n\nBacktesting from / Backtesting to：回测区间（通常由 --timerange 指定）\n\nTrading Mode：现货或合约\n\nMax open trades：max_open_trades（或 --max-open-trades）设置，或交易对列表长度（取较小值）\n\nTotal/Daily Avg Trades：总交易数 / 日均交易数（总交易数除以天数）\n\nStarting balance：起始余额（由 dry-run-wallet 指定）\n\nFinal balance：最终余额 = 起始余额 + 绝对收益\n\nAbsolute profit：以 stake 货币计的收益\n\nTotal profit %：总收益率，对应第一张表 TOTAL 行的 Tot Profit %，计算方式为 (最终余额-起始余额)/起始余额\n\nCAGR %：年化复合增长率\n\nSortino：年化 Sortino 比率\n\nSharpe：年化 Sharpe 比率\n\nCalmar：年化 Calmar 比率\n\nSQN：系统质量指数（Van Tharp 提出）\n\nProfit factor：所有盈利交易的利润总和除以所有亏损交易的损失总和。\n\nExpectancy (Ratio)：期望比率，即每笔交易的平均利润或损失。负的期望比率意味着您的策略不盈利。\n\nAvg. daily profit：每日平均利润，计算公式为 (总利润 / 回测天数)。\n\nAvg. stake amount：平均持仓金额（动态交易金额时为平均值）\n\nTotal trade volume：总交易量\n\nLong / Short trades：多头/空头交易次数分类（仅在有空头交易时显示）。\n\nLong / Short profit %：多头和空头交易的利润百分比（仅在有空头交易时显示）。\n\nLong / Short profit USDT：多头和空头交易在基础货币中的利润（仅在有空头交易时显示）。\n\nBest Pair / Worst Pair：表现最好/最差的交易对及其 Tot Profit %\n\nBest Trade / Worst Trade：单笔最大盈利/亏损\n\nBest day / Worst day：单日最大盈利/亏损\n\nDays win/draw/lose：盈利/亏损天数（平局通常是没有平仓交易的天数）。\n\nMin/Max/Avg. Duration Winners：盈利交易的最小、最大和平均持续时间。\n\nMin/Max/Avg. Duration Losers：亏损交易的最小、最大和平均持续时间。\n\nMax Consecutive Wins / Loss：最大连胜/连败次数\n\nRejected Entry signals：因已达最大持仓数而被拒绝的入场信号\n\nEntry/Exit Timeouts：未成交的入场/出场订单数（仅自定义定价时适用）\n\nMin balance / Max balance：回测期间最低/最高钱包余额\n\nMax % of account underwater：自模拟开始以来账户从峰值下降的最大百分比。计算公式为 (最大余额 - 当前余额) / (最大余额) 的最大值。\n\nAbsolute drawdown：经历的最大绝对回撤，包括相对于账户的百分比，计算公式为 (绝对回撤) / (回撤高点 + 起始余额)。\n\nDrawdown duration：最大回撤期间的持续时间。\n\nProfit at drawdown start / Profit at drawdown end：最大回撤期间开始和结束时的利润。\n\nDrawdown start / Drawdown end：最大回撤的开始和结束日期时间（也可以通过 plot-dataframe 子命令进行可视化）。\n\nMarket change：回测期间市场的变化。计算为所有交易对从第一根到最后一根K线使用\"收盘价\"列的变化平均值。","type":"content","url":"/backtesting#id-11","position":27},{"hierarchy":{"lvl1":"回测","lvl4":"日/周/月/年分解","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-12","position":28},{"hierarchy":{"lvl1":"回测","lvl4":"日/周/月/年分解","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"可用 --breakdown <> 参数查看日/周/月/年分解结果。\n\n如需可视化每月和每年分解，可用：freqtrade backtesting --strategy MyAwesomeStrategy --breakdown month year                                MONTH BREAKDOWN\n┏━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Month ┃ Trades ┃ Tot Profit USDT ┃ Profit Factor ┃  Win  Draw  Loss  Win% ┃\n┡━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ 31/01/2020 │     12 │          44.451 │          7.28 │   10     0     2  83.3 │\n│ 29/02/2020 │     30 │           45.41 │          2.36 │   17     0    13  56.7 │\n│ 31/03/2020 │     35 │         142.024 │          2.42 │   14     0    21  40.0 │\n│ 30/04/2020 │     67 │         -23.692 │          0.81 │   24     0    43  35.8 │\n...\n...\n│ 30/04/2025 │    203 │          -63.43 │          0.81 │   73     0   130  36.0 │\n│ 31/05/2025 │    142 │         104.675 │          1.28 │   59     0    83  41.5 │\n│ 30/06/2025 │    177 │          -1.014 │           1.0 │   85     0    92  48.0 │\n│ 31/07/2025 │    155 │         232.762 │           1.6 │   63     0    92  40.6 │\n└────────────┴────────┴─────────────────┴───────────────┴────────────────────────┘\n                                  YEAR BREAKDOWN\n┏━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃       Year ┃ Trades ┃ Tot Profit USDT ┃ Profit Factor ┃  Win  Draw  Loss  Win% ┃\n┡━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ 31/12/2020 │    896 │         868.889 │          1.46 │  351     0   545  39.2 │\n│ 31/12/2021 │   1778 │        4487.163 │          1.93 │  745     0  1033  41.9 │\n│ 31/12/2022 │   1736 │          938.27 │          1.27 │  698     0  1038  40.2 │\n│ 31/12/2023 │   1712 │        1677.126 │          1.68 │  670     0  1042  39.1 │\n│ 31/12/2024 │   1609 │        3198.424 │          2.22 │  773     0   836  48.0 │\n│ 31/12/2025 │   1042 │         716.174 │          1.33 │  420     0   622  40.3 │\n└────────────┴────────┴─────────────────┴───────────────┴────────────────────────┘\n\n输出将显示包含所选期间已实现绝对利润（以基础货币计）的表格，以及其他统计信息，如交易次数、利润因子以及在此期间实现（平仓）的盈利、平局和亏损分布。","type":"content","url":"/backtesting#id-12","position":29},{"hierarchy":{"lvl1":"回测","lvl4":"回测结果缓存","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-13","position":30},{"hierarchy":{"lvl1":"回测","lvl4":"回测结果缓存","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"为节省时间，回测默认会复用一天内相同策略和配置的缓存结果。若需强制重新回测，可加 --cache none 参数。\n\nWarning\n\n对于开放式 timerange（如 --timerange 20210101-），缓存会自动禁用，因为无法保证底层数据未变。若原回测因数据缺失导致结果不完整，后续补数据后也可能误用缓存。此时请用 --cache none 强制新回测。","type":"content","url":"/backtesting#id-13","position":31},{"hierarchy":{"lvl1":"回测","lvl4":"进一步分析回测结果","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-14","position":32},{"hierarchy":{"lvl1":"回测","lvl4":"进一步分析回测结果","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"freqtrade 默认会导出交易到文件，便于后续分析。\n你可以用 pandas 加载这些交易，具体见\n\n数据分析部分。","type":"content","url":"/backtesting#id-14","position":33},{"hierarchy":{"lvl1":"回测","lvl4":"回测输出文件","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-15","position":34},{"hierarchy":{"lvl1":"回测","lvl4":"回测输出文件","lvl3":"理解回测结果","lvl2":"回测（Backtesting）"},"content":"freqtrade 生成的输出文件为 zip 包，包含：\n\n回测报告（json 格式）\n\n市场变化数据（feather 格式）\n\n策略文件副本\n\n策略参数副本（如用到参数文件）\n\n配置文件副本（已脱敏）\n\n这样可保证结果可复现（前提是数据一致）。\n\n仅包含策略和配置文件，不包含依赖。","type":"content","url":"/backtesting#id-15","position":35},{"hierarchy":{"lvl1":"回测","lvl3":"回测的假设","lvl2":"回测（Backtesting）"},"type":"lvl3","url":"/backtesting#id-16","position":36},{"hierarchy":{"lvl1":"回测","lvl3":"回测的假设","lvl2":"回测（Backtesting）"},"content":"由于回测无法获知K线内的详细价格变化，因此需做如下假设：\n\n遵守交易所\n\n交易限制\n\n入场价为开盘价，除非有自定义定价逻辑\n\n只要价格在K线高低区间内，所有订单都能成交（无滑点）\n\n出场信号在下一根K线开盘价成交\n\n平仓后释放持仓位，可用于新交易对\n\n出场信号优先于止损（假定信号在K线开盘触发）\n\nROI\n\n出场价与高点比较，但用 ROI 值（如 ROI=2%，高点=5%，则以2%出场）\n\n出场价不会低于K线最低点，2% ROI 可能实际以2.4%成交（若低点为2.4%）\n\nROI 在触发K线生效时（如 120: 0.02，1hK线，从 60: 0.05），用K线开盘价作为出场价\n\nROI 为 <N>=-1 时，强制平仓用低点，除非 N 恰好在K线开盘\n\n止损严格按止损价成交，即使低点更低，但实际亏损会比止损价多2倍手续费\n\n止损在同一K线内优先于 ROI，因此回测中止损次数可能多于 dry-run/实盘\n\n低点先于高点（止损优先保护资金）\n\n跟踪止损\n\n仅当止损价低于K线低点时才调整（否则会被触发）\n\n入场K线触发跟踪止损时，用\"最小偏移量\"(stop_positive_offset)为基准（非高点），再计算止损。自定义止损不适用此规则。\n\n先高点再低点，止损用调整后的止损价\n\nROI 优先于跟踪止损，若两者都触发则以 ROI 为准\n\n出场原因仅说明触发条件，不代表盈亏（如负 ROI 也可能显示为 exit_signal）\n\n多信号同K线时的处理顺序：\n\n出场信号\n\n止损\n\nROI\n\n跟踪止损\n\n反向开仓（仅合约）时，若平仓K线有反向信号，则直接反向建仓\n\n基于上述假设，回测尽量贴近真实交易。但回测永远无法替代 dry-run。\n请牢记，历史表现不代表未来。\n\n此外，策略作者应仔细阅读\n\n开发策略时的常见错误部分，避免回测用到实际不可用的数据。","type":"content","url":"/backtesting#id-16","position":37},{"hierarchy":{"lvl1":"回测","lvl4":"回测中的交易限制","lvl3":"回测的假设","lvl2":"回测（Backtesting）"},"type":"lvl4","url":"/backtesting#id-17","position":38},{"hierarchy":{"lvl1":"回测","lvl4":"回测中的交易限制","lvl3":"回测的假设","lvl2":"回测（Backtesting）"},"content":"交易所有最小/最大下单量、最小/最大持仓金额等限制，通常在交易所文档\"交易规则\"部分列出，不同交易对差异很大。\n\n回测（以及实盘和 dry-run）会遵守这些限制，并确保止损价低于最小下单金额，因此实际下单金额会略高于交易所要求。\n但 freqtrade 无法获知历史限制。\n\n这可能导致用历史价格计算的最小下单金额被高估（如历史高价时），出现最小金额 > 50 美元的情况。\n\n例如：\n\nBTC 最小可交易量为 0.001。\nBTC 当前价格 22,000 美元（0.001 BTC = 22 美元），但回测区间内最高价为 50,000 美元。\n此时最小金额可能为 0.001 * 50_000 = 50 美元。","type":"content","url":"/backtesting#id-17","position":39},{"hierarchy":{"lvl1":"回测","lvl5":"交易精度限制","lvl4":"回测中的交易限制","lvl3":"回测的假设","lvl2":"回测（Backtesting）"},"type":"lvl5","url":"/backtesting#id-18","position":40},{"hierarchy":{"lvl1":"回测","lvl5":"交易精度限制","lvl4":"回测中的交易限制","lvl3":"回测的假设","lvl2":"回测（Backtesting）"},"content":"大多数交易所对价格和数量有精度限制，不能买 1.0020401 个，或以 1.24567123123 的价格成交。\n实际会按交易所定义四舍五入或截断，如数量 1.002，价格 1.24567。\n\n这些精度值基于当前交易所限制（如上文所述），历史精度不可用。","type":"content","url":"/backtesting#id-18","position":41},{"hierarchy":{"lvl1":"回测","lvl3":"提高回测精度","lvl2":"回测（Backtesting）"},"type":"lvl3","url":"/backtesting#id-19","position":42},{"hierarchy":{"lvl1":"回测","lvl3":"提高回测精度","lvl2":"回测（Backtesting）"},"content":"回测最大局限是无法获知K线内价格变化（高点先于收盘还是反之？）。\n假设用 1 小时K线回测，则每根K线有 4 个价格（开、高、低、收）。\n\n虽然回测会做一些假设（见上文），但永远无法完美，始终有偏差。\n为缓解此问题，freqtrade 支持用更小周期模拟K线内波动。\n\n只需在回测命令后加 --timeframe-detail 5m：freqtrade backtesting --strategy AwesomeStrategy --timeframe 1h --timeframe-detail 5m\n\n这会加载 1 小时主周期和 5 分钟细节周期的数据。\n策略分析仍用 1 小时周期。\n但有信号或持仓时，会用 5 分钟周期分析细节。\n这样能更准确模拟K线内波动，尤其在高周期下结果差异明显。\n\n入场仍以主K线开盘价为准，但释放持仓位可能提前（如 5 分钟K线触发出场信号），可用于新交易。\n\n所有回调函数（如 custom_exit()、custom_stoploss() 等）在持仓后会对每根 5 分钟K线运行一次（如 1 小时主周期、5 分钟细节周期，则每单 12 次）。\n\n--timeframe-detail 必须小于主周期，否则回测无法启动。\n\n显然，这会占用更多内存（5 分钟数据量大于 1 小时），也会影响运行时间（取决于交易数量和持仓时长）。数据需提前下载好。\n\nTip\n\n建议在策略开发最后阶段用此功能，确保策略未利用\n\n回测假设漏洞。若细节模式下表现与常规模式相近，实盘表现也有较大概率接近（但只有 dry-run 才能真正验证）。\n\n极端差异示例\n\n在极端情况下（所有对在 10:00 K线有入场信号，max_open_trades=1），用 --timeframe-detail 回测可能出现如下交易序列：\n\n交易对\n\n入场时间\n\n出场时间\n\n持仓时长\n\nBTC/USDT\n\n2024-01-01 10:00:00\n\n2021-01-01 10:05:00\n\n5m\n\nETH/USDT\n\n2024-01-01 10:05:00\n\n2021-01-01 10:15:00\n\n10m\n\nXRP/USDT\n\n2024-01-01 10:15:00\n\n2021-01-01 10:30:00\n\n15m\n\nSOL/USDT\n\n2024-01-01 10:15:00\n\n2021-01-01 11:05:00\n\n50m\n\nBTC/USDT\n\n2024-01-01 11:05:00\n\n2021-01-01 12:00:00\n\n55m\n\n若不用细节数据，则为：\n\n交易对\n\n入场时间\n\n出场时间\n\n持仓时长\n\nBTC/USDT\n\n2024-01-01 10:00:00\n\n2021-01-01 11:00:00\n\n1h\n\nBTC/USDT\n\n2024-01-01 11:00:00\n\n2021-01-01 12:00:00\n\n1h\n\n差异显著，因为常规模式下每根K线只处理前 max_open_trades 个信号，持仓位只在K线结束时释放，导致新交易只能在下一根K线开仓。","type":"content","url":"/backtesting#id-19","position":43},{"hierarchy":{"lvl1":"回测","lvl3":"回测多策略","lvl2":"回测（Backtesting）"},"type":"lvl3","url":"/backtesting#id-20","position":44},{"hierarchy":{"lvl1":"回测","lvl3":"回测多策略","lvl2":"回测（Backtesting）"},"content":"如需对比多个策略，可用策略列表进行回测。\n\n每次仅支持一个周期，但数据只加载一次，适合对比多策略时节省时间。\n\n所有策略需在同一目录，或用 --recursive-strategy-search 支持子目录。freqtrade backtesting --timerange 20180401-20180410 --timeframe 5m --strategy-list Strategy001 Strategy002 --export trades\n\n结果会保存到 user_data/backtest_results/backtest-result-<datetime>.json，包含所有策略结果。\n会有一张表对比各策略胜率/亏损（同第一张表 TOTAL 行）。\n详细输出会依次展示每个策略，注意向上滚动查看。================================================== STRATEGY SUMMARY ===================================================================\n| Strategy    |  Trades |   Avg Profit % |   Tot Profit BTC |   Tot Profit % | Avg Duration   |  Wins |  Draws | Losses | Drawdown % |\n|-------------+---------+----------------+------------------+----------------+----------------+-------+--------+--------+------------|\n| Strategy1   |     429 |           0.36 |       0.00762792 |          76.20 | 4:12:00        |   186 |      0 |    243 |       45.2 |\n| Strategy2   |    1487 |          -0.13 |      -0.00988917 |         -98.79 | 4:43:00        |   662 |      0 |    825 |     241.68 |","type":"content","url":"/backtesting#id-20","position":45},{"hierarchy":{"lvl1":"回测","lvl3":"下一步","lvl2":"回测（Backtesting）"},"type":"lvl3","url":"/backtesting#id-21","position":46},{"hierarchy":{"lvl1":"回测","lvl3":"下一步","lvl2":"回测（Backtesting）"},"content":"恭喜，策略已盈利。如果机器人还能帮你找到最优参数呢？\n下一步请学习\n\n如何用 Hyperopt 寻找最优参数","type":"content","url":"/backtesting#id-21","position":47},{"hierarchy":{"lvl1":"Freqtrade 基础"},"type":"lvl1","url":"/bot-basics","position":0},{"hierarchy":{"lvl1":"Freqtrade 基础"},"content":"本页为你介绍 Freqtrade 的基本概念及其工作原理。","type":"content","url":"/bot-basics","position":1},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"Freqtrade 术语"},"type":"lvl2","url":"/bot-basics#freqtrade","position":2},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"Freqtrade 术语"},"content":"策略（Strategy）：你的交易策略，告诉机器人该做什么。\n\n交易（Trade）：已开仓的持仓。\n\n挂单（Open Order）：当前已在交易所下单但尚未成交的订单。\n\n交易对（Pair）：可交易的币对，通常格式为 Base/Quote（如现货的 XRP/USDT，合约的 XRP/USDT:USDT）。\n\n周期（Timeframe）：K 线的时间长度（如 \"5m\"、\"1h\" 等）。\n\n指标（Indicators）：技术指标（SMA、EMA、RSI 等）。\n\n限价单（Limit order）：以指定价格或更优价格成交的限价订单。\n\n市价单（Market order）：保证成交，但可能因订单量影响价格。\n\n当前利润（Current Profit）：该交易当前的浮动（未实现）利润。主要用于机器人和 UI。\n\n已实现利润（Realized Profit）：已实现的利润。仅在\n\n部分出场时相关，具体计算逻辑见该文档。\n\n总利润（Total Profit）：已实现和未实现利润之和。相对数值（%）以该交易总投资为基准计算。","type":"content","url":"/bot-basics#freqtrade","position":3},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"手续费处理"},"type":"lvl2","url":"/bot-basics#id","position":4},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"手续费处理"},"content":"Freqtrade 的所有利润计算均包含手续费。\n\n回测 / 超参数优化 / 模拟盘模式下，使用交易所默认手续费（最低档）。\n\n实盘时，使用交易所实际手续费（包括 BNB 折扣等）。","type":"content","url":"/bot-basics#id","position":5},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"交易对命名"},"type":"lvl2","url":"/bot-basics#id-1","position":6},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"交易对命名"},"content":"Freqtrade 遵循 \n\nccxt 命名规范。\n在错误的市场使用错误的命名方式，通常会导致机器人无法识别该交易对，报错 \"this pair is not available\"。","type":"content","url":"/bot-basics#id-1","position":7},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"现货交易对命名","lvl2":"交易对命名"},"type":"lvl3","url":"/bot-basics#id-2","position":8},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"现货交易对命名","lvl2":"交易对命名"},"content":"现货交易对命名为 base/quote（如 ETH/USDT）。","type":"content","url":"/bot-basics#id-2","position":9},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"合约交易对命名","lvl2":"交易对命名"},"type":"lvl3","url":"/bot-basics#id-3","position":10},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"合约交易对命名","lvl2":"交易对命名"},"content":"合约交易对命名为 base/quote:settle（如 ETH/USDT:USDT）。","type":"content","url":"/bot-basics#id-3","position":11},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"机器人执行逻辑"},"type":"lvl2","url":"/bot-basics#bot-execution-logic","position":12},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"机器人执行逻辑"},"content":"以 dry-run 或实盘模式启动 freqtrade（使用 freqtrade trade）会启动机器人并进入主循环。\n\n这也会运行 bot_start() 回调。\n\n默认情况下，机器人循环每隔几秒运行一次（由 internals.process_throttle_secs 控制），执行以下操作：\n\n从持久化存储获取已开仓交易\n\n计算当前可交易的交易对列表\n\n下载交易对及所有\n\n信息性交易对的 OHLCV 数据\n该步骤每根 K 线只执行一次，以避免不必要的网络流量\n\n调用策略的 bot_loop_start() 回调\n\n按交易对分析策略\n\n调用 populate_indicators()\n\n调用 populate_entry_trend()\n\n调用 populate_exit_trend()\n\n更新交易的挂单状态\n\n对已成交订单调用策略的 order_filled() 回调\n\n检查挂单超时\n\n对未成交进场单调用 check_entry_timeout() 回调\n\n对未成交出场单调用 check_exit_timeout() 回调\n\n对所有挂单调用 adjust_order_price() 回调\n\n对未成交进场单调用 adjust_entry_price()（仅当未实现 adjust_order_price() 时调用）\n\n对未成交出场单调用 adjust_exit_price()（仅当未实现 adjust_order_price() 时调用）\n\n检查已持仓并视情况下出场单\n\n考虑止损、ROI、出场信号、custom_exit() 和 custom_stoploss()\n\n根据 exit_pricing 配置或 custom_exit_price() 回调确定出场价格\n\n下出场单前调用策略的 confirm_trade_exit() 回调\n\n若启用，检查已开仓交易的持仓调整，调用 adjust_trade_position() 并视情况下补仓单\n\n检查交易槽位是否可用（是否已达 max_open_trades）\n\n检查进场信号，尝试开新仓\n\n根据 entry_pricing 配置或 custom_entry_price() 回调确定进场价格\n\n在杠杆和合约模式下，调用 leverage() 回调确定杠杆倍数\n\n调用 custom_stake_amount() 回调确定下单金额\n\n下进场单前调用策略的 confirm_trade_entry() 回调\n\n该循环会不断重复，直到机器人被停止。\n\n","type":"content","url":"/bot-basics#bot-execution-logic","position":13},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"Freqtrade 机器人主循环流程图","lvl2":"机器人执行逻辑"},"type":"lvl3","url":"/bot-basics#freqtrade-1","position":14},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"Freqtrade 机器人主循环流程图","lvl2":"机器人执行逻辑"},"content":"","type":"content","url":"/bot-basics#freqtrade-1","position":15},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"主循环执行流程","lvl3":"Freqtrade 机器人主循环流程图","lvl2":"机器人执行逻辑"},"type":"lvl4","url":"/bot-basics#id-4","position":16},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"主循环执行流程","lvl3":"Freqtrade 机器人主循环流程图","lvl2":"机器人执行逻辑"},"content":"流程图图片flowchart TD\n    A[Start Main Loop] --> B[Get Open Trades from Storage]\n    B --> C[Calculate Tradeable Pairs List]\n    C --> D[Download OHLCV Data]\n    D --> E[Call bot_loop_start Callback]\n    \n    E --> F[Analyze Strategy by Pair]\n    F --> G[Call populate_indicators]\n    G --> H[Call populate_entry_trend]\n    H --> I[Call populate_exit_trend]\n    \n    I --> J[Update Order Status]\n    J --> K{Order Filled?}\n    K -->|Yes| L[Call order_filled Callback]\n    K -->|No| M[Check Order Timeout]\n    \n    L --> N[Check Order Timeout]\n    M --> N\n    N --> O{Unfilled Orders?}\n    O -->|Yes| P[Call adjust_order_price]\n    O -->|No| Q[Check Exit Conditions]\n    \n    P --> R{Entry or Exit Order?}\n    R -->|Entry| S[Call adjust_entry_price]\n    R -->|Exit| T[Call adjust_exit_price]\n    S --> Q\n    T --> Q\n    \n    Q --> U{Need to Exit?}\n    U -->|Yes| V[Check Stop Loss, ROI, Exit Signals]\n    U -->|No| W[Check Position Adjustment]\n    \n    V --> X[Determine Exit Price]\n    X --> Y[Call confirm_trade_exit]\n    Y --> Z[Place Exit Order]\n    \n    W --> AA{Position Adjustment Enabled?}\n    AA -->|Yes| BB[Call adjust_trade_position]\n    AA -->|No| CC[Check Available Slots]\n    BB --> CC\n    \n    CC --> DD{Max Open Trades Reached?}\n    DD -->|No| EE[Check Entry Signals]\n    DD -->|Yes| FF[End Current Loop]\n    \n    EE --> GG{Entry Signal Found?}\n    GG -->|Yes| HH[Determine Entry Price]\n    GG -->|No| FF\n    \n    HH --> II[Call leverage Callback]\n    II --> JJ[Call custom_stake_amount]\n    JJ --> KK[Call confirm_trade_entry]\n    KK --> LL[Place Entry Order]\n    LL --> FF\n    \n    FF --> MM{Bot Stopped?}\n    MM -->|No| A\n    MM -->|Yes| NN[End Bot]\n    \n    style A fill:#e1f5fe\n    style NN fill:#ffebee\n    style FF fill:#f3e5f5\n    style Q fill:#fff3e0\n    style V fill:#fff3e0\n    style EE fill:#fff3e0","type":"content","url":"/bot-basics#id-4","position":17},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"type":"lvl3","url":"/bot-basics#id-5","position":18},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"content":"","type":"content","url":"/bot-basics#id-5","position":19},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"1. 数据准备阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"type":"lvl4","url":"/bot-basics#id-1-1","position":20},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"1. 数据准备阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"content":"获取已开仓交易: 从数据库或文件系统读取当前持仓状态\n\n计算交易对列表: 根据配置和策略确定可交易的交易对\n\n下载 OHLCV 数据: 获取最新的价格和交易量数据","type":"content","url":"/bot-basics#id-1-1","position":21},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"2. 策略分析阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"type":"lvl4","url":"/bot-basics#id-2-1","position":22},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"2. 策略分析阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"content":"populate_indicators(): 计算技术指标\n\npopulate_entry_trend(): 生成进场信号\n\npopulate_exit_trend(): 生成出场信号","type":"content","url":"/bot-basics#id-2-1","position":23},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"3. 订单管理阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"type":"lvl4","url":"/bot-basics#id-3-1","position":24},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"3. 订单管理阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"content":"更新挂单状态: 检查订单是否成交\n\n处理超时订单: 对未成交订单进行调整或取消\n\n价格调整: 根据市场情况调整订单价格","type":"content","url":"/bot-basics#id-3-1","position":25},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"4. 持仓管理阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"type":"lvl4","url":"/bot-basics#id-4-1","position":26},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"4. 持仓管理阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"content":"检查出场条件: 止损、ROI、出场信号等\n\n持仓调整: 根据策略调整现有持仓\n\n确认出场: 执行出场操作","type":"content","url":"/bot-basics#id-4-1","position":27},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"5. 开仓管理阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"type":"lvl4","url":"/bot-basics#id-5-1","position":28},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"5. 开仓管理阶段","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"content":"检查槽位: 确认是否还有可用的交易槽位\n\n信号检查: 寻找新的进场机会\n\n确认开仓: 执行开仓操作","type":"content","url":"/bot-basics#id-5-1","position":29},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"6. 循环控制","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"type":"lvl4","url":"/bot-basics#id-6","position":30},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl4":"6. 循环控制","lvl3":"关键步骤说明","lvl2":"机器人执行逻辑"},"content":"循环间隔: 由 internals.process_throttle_secs 控制\n\n停止检查: 检查是否需要停止机器人","type":"content","url":"/bot-basics#id-6","position":31},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"重要回调函数","lvl2":"机器人执行逻辑"},"type":"lvl3","url":"/bot-basics#id-7","position":32},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"重要回调函数","lvl2":"机器人执行逻辑"},"content":"回调函数\n\n执行时机\n\n用途\n\nbot_loop_start()\n\n每次循环开始\n\n初始化或清理工作\n\npopulate_indicators()\n\n策略分析时\n\n计算技术指标\n\npopulate_entry_trend()\n\n策略分析时\n\n生成进场信号\n\npopulate_exit_trend()\n\n策略分析时\n\n生成出场信号\n\norder_filled()\n\n订单成交时\n\n处理成交事件\n\nadjust_order_price()\n\n订单超时时\n\n调整订单价格\n\nconfirm_trade_entry()\n\n开仓前\n\n确认开仓操作\n\nconfirm_trade_exit()\n\n出场前\n\n确认出场操作\n\nadjust_trade_position()\n\n持仓调整时\n\n调整持仓大小","type":"content","url":"/bot-basics#id-7","position":33},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"配置参数","lvl2":"机器人执行逻辑"},"type":"lvl3","url":"/bot-basics#id-8","position":34},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"配置参数","lvl2":"机器人执行逻辑"},"content":"internals.process_throttle_secs: 控制循环间隔时间\n\nmax_open_trades: 最大同时开仓数量\n\nentry_pricing: 进场价格策略\n\nexit_pricing: 出场价格策略\n\n这个流程图清晰地展示了 Freqtrade 机器人如何通过持续的主循环来管理交易，确保策略能够及时响应市场变化并执行相应的交易操作。","type":"content","url":"/bot-basics#id-8","position":35},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"回测 / 超参数优化执行逻辑"},"type":"lvl2","url":"/bot-basics#backtesting-hyperopt-execution-logic","position":36},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"回测 / 超参数优化执行逻辑"},"content":"回测 或 \n\n超参数优化 只执行上述部分逻辑，因为大多数交易操作都是完全模拟的。\n\n加载配置交易对的历史数据。\n\n调用一次 bot_start()。\n\n计算指标（每个交易对调用一次 populate_indicators()）。\n\n计算进出场信号（每个交易对调用一次 populate_entry_trend() 和 populate_exit_trend()）。\n\n按 K 线循环，模拟进出场点。\n\n调用策略的 bot_loop_start() 回调。\n\n检查订单超时，通过 unfilledtimeout 配置或 check_entry_timeout() / check_exit_timeout() 回调。\n\n对所有挂单调用 adjust_order_price() 回调。\n\n对未成交进场单调用 adjust_entry_price()（仅当未实现 adjust_order_price() 时调用！）\n\n对未成交出场单调用 adjust_exit_price()（仅当未实现 adjust_order_price() 时调用！）\n\n检查进场信号（enter_long / enter_short 列）。\n\n确认进出场（如策略实现则调用 confirm_trade_entry() 和 confirm_trade_exit()）。\n\n调用 custom_entry_price()（如策略实现）确定进场价格（价格会调整到开盘 K 线内）。\n\n在杠杆和合约模式下，调用 leverage() 回调确定杠杆倍数。\n\n调用 custom_stake_amount() 回调确定下单金额。\n\n若启用，检查已开仓交易的持仓调整，调用 adjust_trade_position() 判断是否需补仓。\n\n对已成交进场单调用 order_filled() 回调。\n\n调用 custom_stoploss() 和 custom_exit() 寻找自定义出场点。\n\n基于出场信号、自定义出场和部分出场的退出：调用 custom_exit_price() 确定出场价格（价格会调整到收盘 K 线内）。\n\n对已成交出场单调用 order_filled() 回调。\n\n生成回测报告输出\n\n手续费设置\n\n回测和超参数优化均在计算中包含交易所默认手续费。可通过 --fee 参数为回测/超参指定自定义手续费。\n\n回调调用频率\n\n回测每根 K 线最多调用一次每个回调（--timeframe-detail 会修改为每根详细 K 线一次）。\n实盘大多数回调每次循环调用一次（通常每 ~5 秒），这可能导致回测与实盘不一致。","type":"content","url":"/bot-basics#backtesting-hyperopt-execution-logic","position":37},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"实盘或 DryRun 与回测的区别"},"type":"lvl2","url":"/bot-basics#id-dryrun","position":38},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"实盘或 DryRun 与回测的区别"},"content":"通过对比回测逻辑和正常主循环逻辑，我发现了以下主要差异：","type":"content","url":"/bot-basics#id-dryrun","position":39},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"主要差异分析"},"type":"lvl2","url":"/bot-basics#id-9","position":40},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"主要差异分析"},"content":"","type":"content","url":"/bot-basics#id-9","position":41},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"1. 数据加载方式","lvl2":"主要差异分析"},"type":"lvl3","url":"/bot-basics#id-1-2","position":42},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"1. 数据加载方式","lvl2":"主要差异分析"},"content":"回测: 一次性加载配置交易对的历史数据\n\n正常循环: 每次循环都下载最新的 OHLCV 数据","type":"content","url":"/bot-basics#id-1-2","position":43},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"2. 初始化调用","lvl2":"主要差异分析"},"type":"lvl3","url":"/bot-basics#id-2-2","position":44},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"2. 初始化调用","lvl2":"主要差异分析"},"content":"回测: 调用一次 bot_start()\n\n正常循环: 每次循环调用 bot_loop_start()","type":"content","url":"/bot-basics#id-2-2","position":45},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"3. 指标计算频率","lvl2":"主要差异分析"},"type":"lvl3","url":"/bot-basics#id-3-2","position":46},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"3. 指标计算频率","lvl2":"主要差异分析"},"content":"回测: 每个交易对调用一次 populate_indicators()\n\n正常循环: 每次循环都重新计算指标","type":"content","url":"/bot-basics#id-3-2","position":47},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"4. 信号计算频率","lvl2":"主要差异分析"},"type":"lvl3","url":"/bot-basics#id-4-2","position":48},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"4. 信号计算频率","lvl2":"主要差异分析"},"content":"回测: 每个交易对调用一次 populate_entry_trend() 和 populate_exit_trend()\n\n正常循环: 每次循环都重新计算信号","type":"content","url":"/bot-basics#id-4-2","position":49},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"5. 时间处理方式","lvl2":"主要差异分析"},"type":"lvl3","url":"/bot-basics#id-5-2","position":50},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"5. 时间处理方式","lvl2":"主要差异分析"},"content":"回测: 按 K 线循环，模拟进出场点\n\n正常循环: 实时处理，基于实际时间间隔","type":"content","url":"/bot-basics#id-5-2","position":51},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"6. 订单处理","lvl2":"主要差异分析"},"type":"lvl3","url":"/bot-basics#id-6-1","position":52},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"6. 订单处理","lvl2":"主要差异分析"},"content":"回测: 模拟订单成交，基于历史数据\n\n正常循环: 实际下单到交易所，处理真实订单状态","type":"content","url":"/bot-basics#id-6-1","position":53},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"7. 价格确定","lvl2":"主要差异分析"},"type":"lvl3","url":"/bot-basics#id-7-1","position":54},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"7. 价格确定","lvl2":"主要差异分析"},"content":"回测: 价格调整到开盘/收盘 K 线内\n\n正常循环: 基于实时市场价格","type":"content","url":"/bot-basics#id-7-1","position":55},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"8. 回调函数调用时机","lvl2":"主要差异分析"},"type":"lvl3","url":"/bot-basics#id-8-1","position":56},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl3":"8. 回调函数调用时机","lvl2":"主要差异分析"},"content":"回测: 在模拟的 K 线时间点调用\n\n正常循环: 在真实事件发生时调用","type":"content","url":"/bot-basics#id-8-1","position":57},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"关键差异总结"},"type":"lvl2","url":"/bot-basics#id-10","position":58},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"关键差异总结"},"content":"方面\n\n回测模式\n\n正常循环模式\n\n数据来源\n\n历史数据\n\n实时数据\n\n处理频率\n\n按 K 线\n\n按时间间隔\n\n订单执行\n\n模拟成交\n\n真实成交\n\n价格机制\n\n基于 K 线价格\n\n基于实时价格\n\n时间精度\n\nK 线级别\n\n毫秒级别\n\n资源消耗\n\n一次性计算\n\n持续计算","type":"content","url":"/bot-basics#id-10","position":59},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"重要影响"},"type":"lvl2","url":"/bot-basics#id-11","position":60},{"hierarchy":{"lvl1":"Freqtrade 基础","lvl2":"重要影响"},"content":"性能差异: 回测一次性处理所有数据，而正常循环持续处理\n\n准确性差异: 回测基于历史数据，正常循环基于实时市场\n\n延迟差异: 回测无网络延迟，正常循环有网络和交易所延迟\n\n滑点差异: 回测通常假设无滑点，正常循环有真实滑点\n\n这些差异解释了为什么回测结果与实际交易结果可能存在显著差异。","type":"content","url":"/bot-basics#id-11","position":61},{"hierarchy":{"lvl1":"机器人使用指南"},"type":"lvl1","url":"/bot-usage","position":0},{"hierarchy":{"lvl1":"机器人使用指南"},"content":"","type":"content","url":"/bot-usage","position":1},{"hierarchy":{"lvl1":"机器人使用指南","lvl2":"启动机器人"},"type":"lvl2","url":"/bot-usage#id","position":2},{"hierarchy":{"lvl1":"机器人使用指南","lvl2":"启动机器人"},"content":"本页介绍机器人的不同参数及如何运行。\n\nNote\n\n如果你使用了 setup.sh，在运行 freqtrade 命令前不要忘记激活你的虚拟环境（source .venv/bin/activate）。\n\n时钟需同步\n\n运行机器人的系统时钟必须准确，并频繁与 NTP 服务器同步，以避免与交易所通信时出现问题。","type":"content","url":"/bot-usage#id","position":3},{"hierarchy":{"lvl1":"机器人使用指南","lvl3":"机器人命令","lvl2":"启动机器人"},"type":"lvl3","url":"/bot-usage#id-1","position":4},{"hierarchy":{"lvl1":"机器人使用指南","lvl3":"机器人命令","lvl2":"启动机器人"},"content":"用法: freqtrade [-h] [-V]\n                 {trade,create-userdir,new-config,show-config,new-strategy,download-data,convert-data,convert-trade-data,trades-to-ohlcv,list-data,backtesting,backtesting-show,backtesting-analysis,edge,hyperopt,hyperopt-list,hyperopt-show,list-exchanges,list-markets,list-pairs,list-strategies,list-hyperoptloss,list-freqaimodels,list-timeframes,show-trades,test-pairlist,convert-db,install-ui,plot-dataframe,plot-profit,webserver,strategy-updater,lookahead-analysis,recursive-analysis}\n                 ...\n\n免费、开源的加密货币交易机器人\n\n位置参数:\n  {trade,create-userdir,new-config,show-config,new-strategy,download-data,convert-data,convert-trade-data,trades-to-ohlcv,list-data,backtesting,backtesting-show,backtesting-analysis,edge,hyperopt,hyperopt-list,hyperopt-show,list-exchanges,list-markets,list-pairs,list-strategies,list-hyperoptloss,list-freqaimodels,list-timeframes,show-trades,test-pairlist,convert-db,install-ui,plot-dataframe,plot-profit,webserver,strategy-updater,lookahead-analysis,recursive-analysis}\n    trade                 交易模块。\n    create-userdir        创建用户数据目录。\n    new-config            创建新配置。\n    show-config           显示已解析的配置。\n    new-strategy          创建新策略。\n    download-data         下载回测数据。\n    convert-data          将蜡烛图（OHLCV）数据从一种格式转换为另一种格式。\n    convert-trade-data    将交易数据从一种格式转换为另一种格式。\n    trades-to-ohlcv       将交易数据转换为 OHLCV 数据。\n    list-data             列出已下载的数据。\n    backtesting           回测模块。\n    backtesting-show      显示过去的回测结果。\n    backtesting-analysis  回测分析模块。\n    edge                  Edge 模块。\n    hyperopt              超参数优化模块。\n    hyperopt-list         列出超参数优化结果。\n    hyperopt-show         显示超参数优化结果的详细信息。\n    list-exchanges        打印可用的交易所。\n    list-markets          打印交易所上的市场。\n    list-pairs            打印交易所上的交易对。\n    list-strategies       打印可用的策略。\n    list-hyperoptloss     打印可用的超参数优化损失函数。\n    list-freqaimodels     打印可用的 freqAI 模型。\n    list-timeframes       打印交易所上可用的时间周期。\n    show-trades           显示交易。\n    test-pairlist         测试您的交易对列表配置。\n    convert-db            将数据库迁移到不同的系统。\n    install-ui            安装 FreqUI。\n    plot-dataframe        绘制带有指标的蜡烛图。\n    plot-profit           生成显示利润的图表。\n    webserver             Web 服务器模块。\n    strategy-updater      将过时的策略文件更新到当前版本。\n    lookahead-analysis    检查潜在的前瞻性偏差。\n    recursive-analysis    检查潜在的递归公式问题。\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  -V, --version         显示程序版本号并退出。","type":"content","url":"/bot-usage#id-1","position":5},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"机器人交易命令","lvl3":"机器人命令","lvl2":"启动机器人"},"type":"lvl4","url":"/bot-usage#id-2","position":6},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"机器人交易命令","lvl3":"机器人命令","lvl2":"启动机器人"},"content":"用法: freqtrade trade [-h] [-v] [--no-color] [--logfile FILE] [-V] [-c PATH]\n                       [-d PATH] [--userdir PATH] [-s NAME]\n                       [--strategy-path PATH] [--recursive-strategy-search]\n                       [--freqaimodel NAME] [--freqaimodel-path PATH]\n                       [--db-url PATH] [--sd-notify] [--dry-run]\n                       [--dry-run-wallet DRY_RUN_WALLET] [--fee FLOAT]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --db-url PATH         覆盖交易数据库 URL，这在自定义部署中很有用（默认：`sqlite:///tradesv3.sqlite` 用于实时运行模式，`sqlite:///tradesv3.dryrun.sqlite` 用于模拟运行）。\n  --sd-notify           通知 systemd 服务管理器。\n  --dry-run             强制以模拟模式进行交易（移除交易所密钥并模拟交易）。\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        启动余额，用于回测/超参数优化和模拟运行。\n  --fee FLOAT           指定手续费比率。将在交易开仓和平仓时各应用一次。\n\n通用参数:\n  -v, --verbose                            详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color                               禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE          记录到指定的文件。特殊值包括：'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version                            显示程序版本号并退出。\n  -c PATH, --config PATH                   指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH 交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH     用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME     指定机器人将使用的策略类名。\n  --strategy-path PATH         指定额外的策略查找路径。\n  --recursive-strategy-search  在策略文件夹中递归查找策略。\n  --freqaimodel NAME           指定自定义 freqaimodels。\n  --freqaimodel-path PATH      指定 freqaimodels 的额外查找路径。","type":"content","url":"/bot-usage#id-2","position":7},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何指定使用哪个配置文件？","lvl3":"机器人命令","lvl2":"启动机器人"},"type":"lvl4","url":"/bot-usage#id-3","position":8},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何指定使用哪个配置文件？","lvl3":"机器人命令","lvl2":"启动机器人"},"content":"机器人允许你通过 -c/--config 命令行选项选择要使用的配置文件：freqtrade trade -c path/far/far/away/config.json\n\n默认情况下，机器人会从当前工作目录加载 config.json 配置文件。","type":"content","url":"/bot-usage#id-3","position":9},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何使用多个配置文件？","lvl3":"机器人命令","lvl2":"启动机器人"},"type":"lvl4","url":"/bot-usage#id-4","position":10},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何使用多个配置文件？","lvl3":"机器人命令","lvl2":"启动机器人"},"content":"机器人允许你通过命令行指定多个 -c/--config 选项来使用多个配置文件。后面配置文件中定义的参数会覆盖前面配置文件中同名参数。\n\n例如，你可以为交易所的 key 和 secret 单独做一个配置文件，在 Dry 模式下用默认配置文件（key 和 secret 为空，Dry 模式下不需要）：freqtrade trade -c ./config.json\n\n在正常实盘模式下同时指定两个配置文件：freqtrade trade -c ./config.json -c path/to/secrets/keys.config.json\n\n这样可以通过为包含密钥的文件设置合适的文件权限，保护你的交易所密钥和 secret，\n同时在项目 issue 或互联网上发布配置示例时，避免敏感数据泄露。\n\n更多细节和示例请参见\n\n配置文档。","type":"content","url":"/bot-usage#id-4","position":11},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"自定义数据存储位置","lvl3":"机器人命令","lvl2":"启动机器人"},"type":"lvl4","url":"/bot-usage#id-5","position":12},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"自定义数据存储位置","lvl3":"机器人命令","lvl2":"启动机器人"},"content":"Freqtrade 允许通过 freqtrade create-userdir --userdir someDirectory 创建 user-data 目录。\n该目录结构如下：user_data/\n├── backtest_results\n├── data\n├── hyperopts\n├── hyperopt_results\n├── plot\n└── strategies\n\n你可以在配置中添加 “user_data_dir” 设置，让机器人始终指向该目录。\n或者每次命令都传入 --userdir。\n如果目录不存在，机器人会启动失败，但会自动创建必要的子目录。\n\n该目录应包含你的自定义策略、自定义超参和超参损失函数、回测历史数据（通过回测命令或下载脚本获取）和绘图输出。\n\n建议使用版本控制来跟踪策略的更改。","type":"content","url":"/bot-usage#id-5","position":13},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何使用 --strategy？","lvl3":"机器人命令","lvl2":"启动机器人"},"type":"lvl4","url":"/bot-usage#id-strategy","position":14},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何使用 --strategy？","lvl3":"机器人命令","lvl2":"启动机器人"},"content":"该参数允许你加载自定义策略类。\n要测试机器人安装情况，可以使用 create-userdir 子命令安装的 SampleStrategy（通常在 user_data/strategy/sample_strategy.py）。\n\n机器人会在 user_data/strategies 目录下查找你的策略文件。\n如需使用其他目录，请阅读下节关于 --strategy-path 的说明。\n\n要加载策略，只需在该参数中传入类名（如：CustomStrategy）。\n\n示例：\n在 user_data/strategies 下有文件 my_awesome_strategy.py，其中有策略类 AwesomeStrategy，加载方法如下：freqtrade trade --strategy AwesomeStrategy\n\n如果找不到你的策略文件，机器人会显示错误信息（如文件未找到或代码有误）。\n\n更多关于策略文件的信息请参见\n\n\n策略自定义。","type":"content","url":"/bot-usage#id-strategy","position":15},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何使用 --strategy-path？","lvl3":"机器人命令","lvl2":"启动机器人"},"type":"lvl4","url":"/bot-usage#id-strategy-path","position":16},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何使用 --strategy-path？","lvl3":"机器人命令","lvl2":"启动机器人"},"content":"该参数允许你添加额外的策略查找路径，会优先于默认路径查找（传入的路径必须是目录！）：freqtrade trade --strategy AwesomeStrategy --strategy-path /some/directory","type":"content","url":"/bot-usage#id-strategy-path","position":17},{"hierarchy":{"lvl1":"机器人使用指南","lvl5":"如何安装策略？","lvl4":"如何使用 --strategy-path？","lvl3":"机器人命令","lvl2":"启动机器人"},"type":"lvl5","url":"/bot-usage#id-6","position":18},{"hierarchy":{"lvl1":"机器人使用指南","lvl5":"如何安装策略？","lvl4":"如何使用 --strategy-path？","lvl3":"机器人命令","lvl2":"启动机器人"},"content":"非常简单。只需将你的策略文件复制到 user_data/strategies 目录，或使用 --strategy-path。这样机器人就可以使用它了。","type":"content","url":"/bot-usage#id-6","position":19},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何使用 --db-url？","lvl3":"机器人命令","lvl2":"启动机器人"},"type":"lvl4","url":"/bot-usage#id-db-url","position":20},{"hierarchy":{"lvl1":"机器人使用指南","lvl4":"如何使用 --db-url？","lvl3":"机器人命令","lvl2":"启动机器人"},"content":"在 Dry-run 模式下，默认不会将交易存储到数据库。如果你希望将机器人操作存储到数据库，可以使用 --db-url。该参数也可用于生产环境下指定自定义数据库。例如：freqtrade trade -c config.json --db-url sqlite:///tradesv3.dry_run.sqlite","type":"content","url":"/bot-usage#id-db-url","position":21},{"hierarchy":{"lvl1":"机器人使用指南","lvl3":"下一步","lvl2":"启动机器人"},"type":"lvl3","url":"/bot-usage#id-7","position":22},{"hierarchy":{"lvl1":"机器人使用指南","lvl3":"下一步","lvl2":"启动机器人"},"content":"机器人的最优策略会随市场趋势变化而变化。下一步请阅读\n\n\n策略自定义。","type":"content","url":"/bot-usage#id-7","position":23},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/commands","position":0},{"hierarchy":{"lvl1":""},"content":"“”\"text\nAvailable commands and their arguments:\n\nCommand: trade    help=“Trade module.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-s, --strategy\n--strategy-path\n--recursive-strategy-search\n--freqaimodel\n--freqaimodel-path\n--db-url\n--sd-notify\n--dry-run\n--dry-run-wallet, --starting-balance\n--fee\n\nCommand: create-userdir    help=“Create user-data directory.”\n-h, --help\n--userdir, --user-data-dir\n--reset\n\nCommand: new-config    help=“Create new config”\n-h, --help\n-c, --config\n\nCommand: show-config    help=“Show resolved config”\n-h, --help\n--userdir, --user-data-dir\n-c, --config\n--show-sensitive\n\nCommand: new-strategy    help=“Create new strategy”\n-h, --help\n--userdir, --user-data-dir\n-s, --strategy\n--strategy-path\n--template\n\nCommand: download-data    help=“Download backtesting data.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-p, --pairs\n--pairs-file\n--days\n--new-pairs-days\n--include-inactive-pairs\n--timerange\n--dl-trades\n--convert\n--exchange\n-t, --timeframes\n--erase\n--data-format-ohlcv\n--data-format-trades\n--trading-mode, --tradingmode\n--prepend\n\nCommand: convert-data    help=“Convert candle (OHLCV) data from one format to another.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-p, --pairs\n--format-from\n--format-to\n--erase\n--exchange\n-t, --timeframes\n--trading-mode, --tradingmode\n--candle-types\n\nCommand: convert-trade-data    help=“Convert trade data from one format to another.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-p, --pairs\n--format-from\n--format-to\n--erase\n--exchange\n\nCommand: trades-to-ohlcv    help=“Convert trade data to OHLCV data.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-p, --pairs\n-t, --timeframes\n--exchange\n--data-format-ohlcv\n--data-format-trades\n--trading-mode, --tradingmode\n\nCommand: list-data    help=“List downloaded data.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--exchange\n--data-format-ohlcv\n--data-format-trades\n--trades\n-p, --pairs\n--trading-mode, --tradingmode\n--show-timerange\n\nCommand: backtesting    help=“Backtesting module.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-s, --strategy\n--strategy-path\n--recursive-strategy-search\n--freqaimodel\n--freqaimodel-path\n-i, --timeframe\n--timerange\n--data-format-ohlcv\n--max-open-trades\n--stake-amount\n--fee\n-p, --pairs\n--eps, --enable-position-stacking\n--enable-protections, --enableprotections\n--dry-run-wallet, --starting-balance\n--timeframe-detail\n--strategy-list\n--export\n--export-filename, --backtest-filename\n--breakdown\n--cache\n--freqai-backtest-live-models\n\nCommand: backtesting-show    help=“Show past Backtest results”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--export-filename, --backtest-filename\n--show-pair-list\n--breakdown\n\nCommand: backtesting-analysis    help=“Backtest Analysis module.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--export-filename, --backtest-filename\n--analysis-groups\n--enter-reason-list\n--exit-reason-list\n--indicator-list\n--entry-only\n--exit-only\n--timerange\n--rejected-signals\n--analysis-to-csv\n--analysis-csv-path\n\nCommand: edge    help=“Edge module.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-s, --strategy\n--strategy-path\n--recursive-strategy-search\n--freqaimodel\n--freqaimodel-path\n-i, --timeframe\n--timerange\n--data-format-ohlcv\n--max-open-trades\n--stake-amount\n--fee\n-p, --pairs\n--stoplosses\n\nCommand: hyperopt    help=“Hyperopt module.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-s, --strategy\n--strategy-path\n--recursive-strategy-search\n--freqaimodel\n--freqaimodel-path\n-i, --timeframe\n--timerange\n--data-format-ohlcv\n--max-open-trades\n--stake-amount\n--fee\n-p, --pairs\n--hyperopt\n--hyperopt-path\n--eps, --enable-position-stacking\n--enable-protections, --enableprotections\n--dry-run-wallet, --starting-balance\n--timeframe-detail\n-e, --epochs\n--spaces\n--print-all\n--print-json\n-j, --job-workers\n--random-state\n--min-trades\n--hyperopt-loss, --hyperoptloss\n--disable-param-export\n--ignore-missing-spaces, --ignore-unparameterized-spaces\n--analyze-per-epoch\n--early-stop\n\nCommand: hyperopt-list    help=“List Hyperopt results”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--best\n--profitable\n--min-trades\n--max-trades\n--min-avg-time\n--max-avg-time\n--min-avg-profit\n--max-avg-profit\n--min-total-profit\n--max-total-profit\n--min-objective\n--max-objective\n--print-json\n--no-details\n--hyperopt-filename\n--export-csv\n\nCommand: hyperopt-show    help=“Show details of Hyperopt results”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--best\n--profitable\n-n, --index\n--print-json\n--hyperopt-filename\n--no-header\n--disable-param-export\n--breakdown\n\nCommand: list-exchanges    help=“Print available exchanges.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-1, --one-column\n-a, --all\n\nCommand: list-markets    help=“Print markets on exchange.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--exchange\n--print-list\n--print-json\n-1, --one-column\n--print-csv\n--base\n--quote\n-a, --all\n--trading-mode, --tradingmode\n\nCommand: list-pairs    help=“Print pairs on exchange.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--exchange\n--print-list\n--print-json\n-1, --one-column\n--print-csv\n--base\n--quote\n-a, --all\n--trading-mode, --tradingmode\n\nCommand: list-strategies    help=“Print available strategies.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--strategy-path\n-1, --one-column\n--recursive-strategy-search\n\nCommand: list-hyperoptloss    help=“Print available hyperopt loss functions.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--hyperopt-path\n-1, --one-column\n\nCommand: list-freqaimodels    help=“Print available freqAI models.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--freqaimodel-path\n-1, --one-column\n\nCommand: list-timeframes    help=“Print available timeframes for the exchange.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--exchange\n-1, --one-column\n\nCommand: show-trades    help=“Show trades.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--db-url\n--trade-ids\n--print-json\n\nCommand: test-pairlist    help=“Test your pairlist configuration.”\n-h, --help\n--userdir, --user-data-dir\n-v, --verbose\n-c, --config\n--quote\n-1, --one-column\n--print-json\n--exchange\n\nCommand: convert-db    help=“Migrate database to different system”\n-h, --help\n--db-url\n--db-url-from\n\nCommand: install-ui    help=“Install FreqUI”\n-h, --help\n--erase\n--prerelease\n--ui-version\n\nCommand: plot-dataframe    help=“Plot candles with indicators.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-s, --strategy\n--strategy-path\n--recursive-strategy-search\n--freqaimodel\n--freqaimodel-path\n-p, --pairs\n--indicators1\n--indicators2\n--plot-limit\n--db-url\n--trade-source\n--export\n--export-filename, --backtest-filename\n--timerange\n-i, --timeframe\n--no-trades\n\nCommand: plot-profit    help=“Generate plot showing profits.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-s, --strategy\n--strategy-path\n--recursive-strategy-search\n--freqaimodel\n--freqaimodel-path\n-p, --pairs\n--timerange\n--export\n--export-filename, --backtest-filename\n--db-url\n--trade-source\n-i, --timeframe\n--auto-open\n\nCommand: webserver    help=“Webserver module.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n\nCommand: strategy-updater    help=“updates outdated strategy files to the current version”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n--strategy-list\n--strategy-path\n--recursive-strategy-search\n\nCommand: lookahead-analysis    help=“Check for potential look ahead bias.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-s, --strategy\n--strategy-path\n--recursive-strategy-search\n--freqaimodel\n--freqaimodel-path\n-i, --timeframe\n--timerange\n--data-format-ohlcv\n--max-open-trades\n--stake-amount\n--fee\n-p, --pairs\n--enable-protections, --enableprotections\n--dry-run-wallet, --starting-balance\n--timeframe-detail\n--strategy-list\n--export\n--export-filename, --backtest-filename\n--freqai-backtest-live-models\n--minimum-trade-amount\n--targeted-trade-amount\n--lookahead-analysis-exportfilename\n\nCommand: recursive-analysis    help=“Check for potential recursive formula issue.”\n-h, --help\n-v, --verbose\n--no-color\n--logfile, --log-file\n-V, --version\n-c, --config\n-d, --datadir, --data-dir\n--userdir, --user-data-dir\n-s, --strategy\n--strategy-path\n--recursive-strategy-search\n--freqaimodel\n--freqaimodel-path\n-i, --timeframe\n--timerange\n--data-format-ohlcv\n-p, --pairs\n--startup-candle\n“”\"","type":"content","url":"/commands","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/backtesting-analysis","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade backtesting-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                      [-V] [-c PATH] [-d PATH]\n                                      [--userdir PATH]\n                                      [--backtest-filename PATH]\n                                      [--backtest-directory PATH]\n                                      [--analysis-groups {0,1,2,3,4,5} [{0,1,2,3,4,5} ...]]\n                                      [--enter-reason-list ENTER_REASON_LIST [ENTER_REASON_LIST ...]]\n                                      [--exit-reason-list EXIT_REASON_LIST [EXIT_REASON_LIST ...]]\n                                      [--indicator-list INDICATOR_LIST [INDICATOR_LIST ...]]\n                                      [--entry-only] [--exit-only]\n                                      [--timerange TIMERANGE]\n                                      [--rejected-signals] [--analysis-to-csv]\n                                      [--analysis-csv-path ANALYSIS_CSV_PATH]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或 `--export-directory` 作为基础目录。\n  --analysis-groups {0,1,2,3,4,5} [{0,1,2,3,4,5} ...]\n                        分组输出 - 0: 按入场标签的简单盈亏，1: 按入场标签，\n                        2: 按入场标签和出场标签，3: 按交易对和入场标签，\n                        4: 按交易对、入场标签和出场标签（这可能会变得相当大），\n                        5: 按出场标签\n  --enter-reason-list ENTER_REASON_LIST [ENTER_REASON_LIST ...]\n                        要分析的入场信号列表（用空格分隔）。\n                        默认：全部。例如：'entry_tag_a entry_tag_b'\n  --exit-reason-list EXIT_REASON_LIST [EXIT_REASON_LIST ...]\n                        要分析的出场信号列表（用空格分隔）。\n                        默认：全部。例如：'exit_tag_a roi stop_loss trailing_stop_loss'\n  --indicator-list INDICATOR_LIST [INDICATOR_LIST ...]\n                        要分析的指标列表（用空格分隔）。例如：\n                        'close rsi bb_lowerband profit_abs'\n  --entry-only          仅分析入场信号。\n  --exit-only           仅分析出场信号。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --rejected-signals    分析被拒绝的信号。\n  --analysis-to-csv     将选定的分析表保存为单独的CSV文件。\n  --analysis-csv-path ANALYSIS_CSV_PATH\n                        如果启用了 --analysis-to-csv，指定保存分析CSV文件的路径。\n                        默认：user_data/backtesting_results/\n\nCommon arguments:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n","type":"content","url":"/backtesting-analysis","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/backtesting-show","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade backtesting-show [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                  [-c PATH] [-d PATH] [--userdir PATH]\n                                  [--backtest-filename PATH]\n                                  [--backtest-directory PATH]\n                                  [--show-pair-list]\n                                  [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或 `--export-directory` 作为基础目录。\n  --backtest-directory PATH, --export-directory PATH\n                        用于回测结果的目录。示例：\n                        `--export-directory=user_data/backtest_results/`。\n  --show-pair-list      按利润排序显示回测交易对列表。\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        显示按[日、周、月、年]的回测明细。\n\nCommon arguments:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n","type":"content","url":"/backtesting-show","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/backtesting-1","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade backtesting [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                             [--strategy-path PATH]\n                             [--recursive-strategy-search]\n                             [--freqaimodel NAME] [--freqaimodel-path PATH]\n                             [-i TIMEFRAME] [--timerange TIMERANGE]\n                             [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                             [--max-open-trades INT]\n                             [--stake-amount STAKE_AMOUNT] [--fee FLOAT]\n                             [-p PAIRS [PAIRS ...]] [--eps]\n                             [--enable-protections]\n                             [--dry-run-wallet DRY_RUN_WALLET]\n                             [--timeframe-detail TIMEFRAME_DETAIL]\n                             [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                             [--export {none,trades,signals}]\n                             [--backtest-filename PATH]\n                             [--backtest-directory PATH]\n                             [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n                             [--cache {none,day,week,month}]\n                             [--freqai-backtest-live-models]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --max-open-trades INT\n                        覆盖配置设置中的 `max_open_trades` 值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖配置设置中的 `stake_amount` 值。\n  --fee FLOAT           指定手续费比率。将应用两次（在交易进入和退出时）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --eps, --enable-position-stacking\n                        允许多次购买同一交易对（仓位叠加）。\n  --enable-protections, --enableprotections\n                        为回测启用保护机制。这将显著降低回测速度，但会包含已配置的保护机制。\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        起始余额，用于回测/超参数优化和模拟运行。\n  --timeframe-detail TIMEFRAME_DETAIL\n                        为回测指定详细时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        提供要回测的策略列表（用空格分隔）。请注意，时间框架需要在配置中或通过命令行设置。\n                        当与 `--export trades` 一起使用时，策略名称会被注入到文件名中\n                        （因此 `backtest-data.json` 会变成 `backtest-data-SampleStrategy.json`）。\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-\n                        filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或\n                        `--export-directory` 作为基础目录。\n  --backtest-directory PATH, --export-directory PATH\n                        用于回测结果的目录。示例：\n                        `--export-directory=user_data/backtest_results/`。\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        显示按[日、周、月、年]的回测明细。\n  --cache {none,day,week,month}\n                        加载不超过指定时间的缓存回测结果（默认：day）。\n  --freqai-backtest-live-models\n                        使用已准备好的模型运行回测。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人要使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        为 freqaimodels 指定额外的查找路径。\n","type":"content","url":"/backtesting-1","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/convert-data","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade convert-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                              [-c PATH] [-d PATH] [--userdir PATH]\n                              [-p PAIRS [PAIRS ...]] --format-from\n                              {json,jsongz,feather,parquet} --format-to\n                              {json,jsongz,feather,parquet} [--erase]\n                              [--exchange EXCHANGE]\n                              [-t TIMEFRAMES [TIMEFRAMES ...]]\n                              [--trading-mode {spot,margin,futures}]\n                              [--candle-types {spot,futures,mark,index,premiumIndex,funding_rate} [{spot,futures,mark,index,premiumIndex,funding_rate} ...]]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --format-from {json,jsongz,feather,parquet}\n                        数据转换的源格式。\n  --format-to {json,jsongz,feather,parquet}\n                        数据转换的目标格式。\n  --erase               清除所选交易所/交易对/时间框架的所有现有数据。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        指定要下载的行情数据。空格分隔的列表。\n                        默认：`1m 5m`。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n  --candle-types {spot,futures,mark,index,premiumIndex,funding_rate} [{spot,futures,mark,index,premiumIndex,funding_rate} ...]\n                        选择要转换的K线类型。默认为所有可用类型。\n\nCommon arguments:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n","type":"content","url":"/convert-data","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/convert-db","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade convert-db [-h] [--db-url PATH] [--db-url-from PATH]\n\n选项:\n  -h, --help          显示帮助信息并退出\n  --db-url PATH       覆盖交易数据库 URL，这在自定义部署中很有用\n                      （默认：实盘模式为 `sqlite:///tradesv3.sqlite`，\n                      模拟运行模式为 `sqlite:///tradesv3.dryrun.sqlite`）。\n  --db-url-from PATH  迁移数据库时使用的源数据库 URL。","type":"content","url":"/convert-db","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/convert-trade-data","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade convert-trade-data [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-p PAIRS [PAIRS ...]] --format-from\n                                    {json,jsongz,feather,parquet,kraken_csv}\n                                    --format-to {json,jsongz,feather,parquet}\n                                    [--erase] [--exchange EXCHANGE]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --format-from {json,jsongz,feather,parquet,kraken_csv}\n                        数据转换的源格式。\n  --format-to {json,jsongz,feather,parquet}\n                        数据转换的目标格式。\n  --erase               清除所选交易所/交易对/时间框架的所有现有数据。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/convert-trade-data","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/create-userdir","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade create-userdir [-h] [--userdir PATH] [--reset]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  --reset               将示例文件重置为其原始状态。","type":"content","url":"/create-userdir","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/download-data","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade download-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH]\n                               [-p PAIRS [PAIRS ...]] [--pairs-file FILE]\n                               [--days INT] [--new-pairs-days INT]\n                               [--include-inactive-pairs]\n                               [--timerange TIMERANGE] [--dl-trades]\n                               [--convert] [--exchange EXCHANGE]\n                               [-t TIMEFRAMES [TIMEFRAMES ...]] [--erase]\n                               [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                               [--data-format-trades {json,jsongz,feather,parquet}]\n                               [--trading-mode {spot,margin,futures}]\n                               [--prepend]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --pairs-file FILE     包含交易对列表的文件。优先于 --pairs 或配置文件中的 pairs。\n  --days INT            下载指定天数的数据。\n  --new-pairs-days INT  为新交易对下载指定天数的数据。\n                        默认：`None`。\n  --include-inactive-pairs\n                        也下载非活跃交易对的数据。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --dl-trades           下载成交单数据而不是 OHLCV 数据。\n  --convert             将下载的成交单数据转换为 OHLCV 数据。仅在与 `--dl-trades` 结合使用时适用。\n                        对于没有历史 OHLCV 的交易所（如 Kraken）会自动转换。\n                        如果未提供此参数，请使用 `trades-to-ohlcv` 命令手动转换。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        指定要下载的行情数据。空格分隔的列表。\n                        默认：`1m 5m`。\n  --erase               清除所选交易所/交易对/时间框架的所有现有数据。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --data-format-trades {json,jsongz,feather,parquet}\n                        下载的成交单数据的存储格式。（默认：`feather`）。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n  --prepend             允许数据前置。（数据追加被禁用）\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n","type":"content","url":"/download-data","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/edge-1","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade edge [-h] [-v] [--no-color] [--logfile FILE] [-V] [-c PATH]\n                      [-d PATH] [--userdir PATH] [-s NAME]\n                      [--strategy-path PATH] [--recursive-strategy-search]\n                      [--freqaimodel NAME] [--freqaimodel-path PATH]\n                      [-i TIMEFRAME] [--timerange TIMERANGE]\n                      [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                      [--max-open-trades INT] [--stake-amount STAKE_AMOUNT]\n                      [--fee FLOAT] [-p PAIRS [PAIRS ...]]\n                      [--stoplosses STOPLOSS_RANGE]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --max-open-trades INT\n                        覆盖配置设置中的 `max_open_trades` 值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖配置设置中的 `stake_amount` 值。\n  --fee FLOAT           指定手续费比率。将应用两次（在交易进入和退出时）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --stoplosses STOPLOSS_RANGE\n                        定义一组止损值，edge 将针对这些值评估策略。格式为 \"min,max,step\"（不带空格）。\n                        例如：`--stoplosses=-0.01,-0.1,-0.001`\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人要使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        为 freqaimodels 指定额外的查找路径。\n","type":"content","url":"/edge-1","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/hyperopt-list","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade hyperopt-list [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH] [--best]\n                               [--profitable] [--min-trades INT]\n                               [--max-trades INT] [--min-avg-time FLOAT]\n                               [--max-avg-time FLOAT] [--min-avg-profit FLOAT]\n                               [--max-avg-profit FLOAT]\n                               [--min-total-profit FLOAT]\n                               [--max-total-profit FLOAT]\n                               [--min-objective FLOAT] [--max-objective FLOAT]\n                               [--print-json] [--no-details]\n                               [--hyperopt-filename FILENAME]\n                               [--export-csv FILE]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --best                仅选择最佳 epoch。\n  --profitable          仅选择有利润的 epoch。\n  --min-trades INT      选择交易次数大于 INT 的 epoch。\n  --max-trades INT      选择交易次数小于 INT 的 epoch。\n  --min-avg-time FLOAT  选择平均用时大于指定值的 epoch。\n  --max-avg-time FLOAT  选择平均用时小于指定值的 epoch。\n  --min-avg-profit FLOAT\n                        选择平均利润大于指定值的 epoch。\n  --max-avg-profit FLOAT\n                        选择平均利润小于指定值的 epoch。\n  --min-total-profit FLOAT\n                        选择总利润大于指定值的 epoch。\n  --max-total-profit FLOAT\n                        选择总利润小于指定值的 epoch。\n  --min-objective FLOAT\n                        选择目标值大于指定值的 epoch。\n  --max-objective FLOAT\n                        选择目标值小于指定值的 epoch。\n  --print-json          以 JSON 格式输出结果。\n  --no-details          不打印最佳 epoch 的详细信息。\n  --hyperopt-filename FILENAME\n                        超参数优化结果文件名。例如：`--hyperopt-filename=hyperopt_results_2020-09-27_16-20-48.pickle`\n  --export-csv FILE     导出为 CSV 文件。此操作会禁用表格打印。\n                        例如：--export-csv hyperopt.csv\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/hyperopt-list","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/hyperopt-show","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade hyperopt-show [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH] [--best]\n                               [--profitable] [-n INT] [--print-json]\n                               [--hyperopt-filename FILENAME] [--no-header]\n                               [--disable-param-export]\n                               [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --best                仅选择最佳 epoch。\n  --profitable          仅选择有利润的 epoch。\n  -n INT, --index INT   指定要打印详细信息的 epoch 索引。\n  --print-json          以 JSON 格式输出结果。\n  --hyperopt-filename FILENAME\n                        超参数优化结果文件名。例如：`--hyperopt-filename=hyperopt_results_2020-09-27_16-20-48.pickle`\n  --no-header           不打印 epoch 详细信息标题。\n  --disable-param-export\n                        禁用自动导出超参数。\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        按 [日、周、月、年] 显示回测明细。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/hyperopt-show","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/hyperopt-1","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade hyperopt [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                          [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                          [--strategy-path PATH] [--recursive-strategy-search]\n                          [--freqaimodel NAME] [--freqaimodel-path PATH]\n                          [-i TIMEFRAME] [--timerange TIMERANGE]\n                          [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                          [--max-open-trades INT]\n                          [--stake-amount STAKE_AMOUNT] [--fee FLOAT]\n                          [-p PAIRS [PAIRS ...]] [--hyperopt-path PATH]\n                          [--eps] [--enable-protections]\n                          [--dry-run-wallet DRY_RUN_WALLET]\n                          [--timeframe-detail TIMEFRAME_DETAIL] [-e INT]\n                          [--spaces {all,buy,sell,roi,stoploss,trailing,protection,trades,default} [{all,buy,sell,roi,stoploss,trailing,protection,trades,default} ...]]\n                          [--print-all] [--print-json] [-j JOBS]\n                          [--random-state INT] [--min-trades INT]\n                          [--hyperopt-loss NAME] [--disable-param-export]\n                          [--ignore-missing-spaces] [--analyze-per-epoch]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --max-open-trades INT\n                        覆盖配置设置中的 `max_open_trades` 值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖配置设置中的 `stake_amount` 值。\n  --fee FLOAT           指定手续费比率。将应用两次（在交易进入和退出时）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --hyperopt-path PATH  指定超参数损失函数的额外查找路径。\n  --eps, --enable-position-stacking\n                        允许多次购买同一交易对（仓位叠加）。\n  --enable-protections, --enableprotections\n                        为回测启用保护机制。这将显著降低回测速度，但会包含已配置的保护机制。\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        起始余额，用于回测/超参数优化和模拟运行。\n  --timeframe-detail TIMEFRAME_DETAIL\n                        为回测指定详细时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  -e INT, --epochs INT  指定 epoch 数量（默认：100）。\n  --spaces {all,buy,sell,roi,stoploss,trailing,protection,trades,default} [{all,buy,sell,roi,stoploss,trailing,protection,trades,default} ...]\n                        指定要超参数优化的参数空间。空格分隔的列表。\n  --print-all           打印所有结果，而不仅仅是最佳结果。\n  --print-json          以 JSON 格式输出结果。\n  -j JOBS, --job-workers JOBS\n                        超参数优化的并发作业数（worker 进程数）。如果为 -1（默认），则使用所有 CPU；为 -2 时，使用所有 CPU 但保留一个，依此类推。如果为 1，则不使用并行计算。\n  --random-state INT    设置随机种子，以便复现超参数优化结果。\n  --min-trades INT      设置超参数优化路径中评估的最小交易次数（默认：1）。\n  --hyperopt-loss NAME, --hyperoptloss NAME\n                        指定超参数损失函数类（IHyperOptLoss）的类名。不同的损失函数会产生完全不同的结果，因为优化目标不同。内置损失函数包括：\n                        ShortTradeDurHyperOptLoss, OnlyProfitHyperOptLoss,\n                        SharpeHyperOptLoss, SharpeHyperOptLossDaily,\n                        SortinoHyperOptLoss, SortinoHyperOptLossDaily,\n                        CalmarHyperOptLoss, MaxDrawDownHyperOptLoss,\n                        MaxDrawDownRelativeHyperOptLoss,\n                        MaxDrawDownPerPairHyperOptLoss,\n                        ProfitDrawDownHyperOptLoss, MultiMetricHyperOptLoss\n  --disable-param-export\n                        禁用自动导出超参数。\n  --ignore-missing-spaces, --ignore-unparameterized-spaces\n                        对于未包含任何参数的超参数空间，抑制错误。\n  --analyze-per-epoch   每个 epoch 执行一次 populate_indicators。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人要使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        为 freqaimodels 指定额外的查找路径。","type":"content","url":"/hyperopt-1","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/install-ui","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade install-ui [-h] [--erase] [--prerelease]\n                            [--ui-version UI_VERSION]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --erase               清空 UI 文件夹，不下载新版本。\n  --prerelease          安装最新的 FreqUI 预发布版本。\n                        不建议在生产环境中使用。\n  --ui-version UI_VERSION\n                        指定要安装的 FreqUI 具体版本。\n                        不指定则安装最新版本。","type":"content","url":"/install-ui","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/list-data","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade list-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                           [-c PATH] [-d PATH] [--userdir PATH]\n                           [--exchange EXCHANGE]\n                           [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                           [--data-format-trades {json,jsongz,feather,parquet}]\n                           [--trades] [-p PAIRS [PAIRS ...]]\n                           [--trading-mode {spot,margin,futures}]\n                           [--show-timerange]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --data-format-trades {json,jsongz,feather,parquet}\n                        下载的成交单数据的存储格式。（默认：`feather`）。\n  --trades              针对成交单数据而非 OHLCV 数据进行操作。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n  --show-timerange      显示可用数据的时间范围（可能需要较长时间计算）。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/list-data","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/list-exchanges","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade list-exchanges [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                [-c PATH] [-d PATH] [--userdir PATH] [-1] [-a]\n                                [--trading-mode {spot,margin,futures}]\n                                [--dex-exchanges]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -1, --one-column      以单列格式输出。\n  -a, --all             打印 ccxt 库已知的所有交易所。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式\n  --dex-exchanges       仅打印 DEX 交易所。","type":"content","url":"/list-exchanges","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/list-freqaimodels","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade list-freqaimodels [-h] [-v] [--no-color] [--logfile FILE]\n                                   [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                   [--freqaimodel-path PATH] [-1]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --freqaimodel-path PATH\n                        为 freqaimodels 指定额外的查找路径。\n  -1, --one-column      以单列格式输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/list-freqaimodels","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/list-hyperoptloss","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade list-hyperoptloss [-h] [-v] [--no-color] [--logfile FILE]\n                                   [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                   [--hyperopt-path PATH] [-1]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --hyperopt-path PATH  为超参数损失函数指定额外的查找路径。\n  -1, --one-column      以单列格式输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/list-hyperoptloss","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/list-markets","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade list-markets [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                              [-c PATH] [-d PATH] [--userdir PATH]\n                              [--exchange EXCHANGE] [--print-list]\n                              [--print-json] [-1] [--print-csv]\n                              [--base BASE_CURRENCY [BASE_CURRENCY ...]]\n                              [--quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]]\n                              [-a] [--trading-mode {spot,margin,futures}]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  --print-list          以列表形式打印交易对或市场符号。默认以表格形式输出。\n  --print-json          以 JSON 格式打印交易对或市场符号列表。\n  -1, --one-column      以单列格式输出。\n  --print-csv           以 CSV 格式打印交易所交易对或市场数据。\n  --base BASE_CURRENCY [BASE_CURRENCY ...]\n                        指定基础货币。空格分隔的列表。\n  --quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]\n                        指定计价货币。空格分隔的列表。\n  -a, --all             打印所有交易对或市场符号。默认仅显示活跃的。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/list-markets","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/list-pairs","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade list-pairs [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                            [-c PATH] [-d PATH] [--userdir PATH]\n                            [--exchange EXCHANGE] [--print-list]\n                            [--print-json] [-1] [--print-csv]\n                            [--base BASE_CURRENCY [BASE_CURRENCY ...]]\n                            [--quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]]\n                            [-a] [--trading-mode {spot,margin,futures}]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  --print-list          以列表形式打印交易对。默认以表格形式输出。\n  --print-json          以 JSON 格式打印交易对列表。\n  -1, --one-column      以单列格式输出。\n  --print-csv           以 CSV 格式打印交易所交易对数据。\n  --base BASE_CURRENCY [BASE_CURRENCY ...]\n                        指定基础货币。空格分隔的列表。\n  --quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]\n                        指定计价货币。空格分隔的列表。\n  -a, --all             打印所有交易对。默认仅显示活跃的。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/list-pairs","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/list-strategies","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade list-strategies [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [--strategy-path PATH] [-1]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --strategy-path PATH  指定策略目录的路径。\n  -1, --one-column      以单列格式输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/list-strategies","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/list-timeframes","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade list-timeframes [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [--exchange EXCHANGE] [-1]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  -1, --one-column      以单列格式输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/list-timeframes","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/lookahead-analysis-1","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade lookahead-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-s NAME] [--strategy-path PATH]\n                                    [--recursive-strategy-search]\n                                    [--freqaimodel NAME]\n                                    [--freqaimodel-path PATH] [-i TIMEFRAME]\n                                    [--timerange TIMERANGE]\n                                    [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                    [--max-open-trades INT]\n                                    [--stake-amount STAKE_AMOUNT]\n                                    [--fee FLOAT] [-p PAIRS [PAIRS ...]]\n                                    [--enable-protections]\n                                    [--dry-run-wallet DRY_RUN_WALLET]\n                                    [--timeframe-detail TIMEFRAME_DETAIL]\n                                    [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                                    [--export {none,trades,signals}]\n                                    [--backtest-filename PATH]\n                                    [--backtest-directory PATH]\n                                    [--freqai-backtest-live-models]\n                                    [--minimum-trade-amount INT]\n                                    [--targeted-trade-amount INT]\n                                    [--lookahead-analysis-exportfilename LOOKAHEAD_ANALYSIS_EXPORTFILENAME]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间周期（`1m`, `5m`, `30m`, `1h`, `1d`）。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的蜡烛图（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --max-open-trades INT\n                        覆盖配置设置中的 `max_open_trades` 值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖配置设置中的 `stake_amount` 值。\n  --fee FLOAT           指定手续费比率。将在交易入场和出场时各应用一次。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅处理这些交易对。交易对以空格分隔。\n  --enable-protections, --enableprotections\n                        为回测启用保护措施。这将显著降低回测速度，但会包含已配置的保护措施。\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        起始余额，用于回测/超参数优化和模拟运行。\n  --timeframe-detail TIMEFRAME_DETAIL\n                        指定回测的详细时间周期（`1m`, `5m`, `30m`, `1h`, `1d`）。\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        提供要回测的策略列表，以空格分隔。请注意，时间周期需要在配置中或通过命令行设置。当与 `--export trades` 一起使用时，策略名称会被注入到文件名中（因此 `backtest-data.json` 变为 `backtest-data-SampleStrategy.json`）。\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或 `--export-directory` 作为基础目录。\n  --backtest-directory PATH, --export-directory PATH\n                        用于回测结果的目录。示例：\n                        `--export-directory=user_data/backtest_results/`。\n  --minimum-trade-amount INT\n                        前瞻分析的最小交易金额。\n  --targeted-trade-amount INT\n                        前瞻分析的目标交易金额。\n  --lookahead-analysis-exportfilename LOOKAHEAD_ANALYSIS_EXPORTFILENAME\n                        使用此 CSV 文件名存储前瞻分析结果。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        指定 freqaimodels 的额外查找路径。","type":"content","url":"/lookahead-analysis-1","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade [-h] [-V]\n                 {trade,create-userdir,new-config,show-config,new-strategy,download-data,convert-data,convert-trade-data,trades-to-ohlcv,list-data,backtesting,backtesting-show,backtesting-analysis,edge,hyperopt,hyperopt-list,hyperopt-show,list-exchanges,list-markets,list-pairs,list-strategies,list-hyperoptloss,list-freqaimodels,list-timeframes,show-trades,test-pairlist,convert-db,install-ui,plot-dataframe,plot-profit,webserver,strategy-updater,lookahead-analysis,recursive-analysis}\n                 ...\n\n免费、开源的加密货币交易机器人\n\n位置参数:\n  {trade,create-userdir,new-config,show-config,new-strategy,download-data,convert-data,convert-trade-data,trades-to-ohlcv,list-data,backtesting,backtesting-show,backtesting-analysis,edge,hyperopt,hyperopt-list,hyperopt-show,list-exchanges,list-markets,list-pairs,list-strategies,list-hyperoptloss,list-freqaimodels,list-timeframes,show-trades,test-pairlist,convert-db,install-ui,plot-dataframe,plot-profit,webserver,strategy-updater,lookahead-analysis,recursive-analysis}\n    trade                 交易模块。\n    create-userdir        创建用户数据目录。\n    new-config            创建新配置。\n    show-config           显示已解析的配置。\n    new-strategy          创建新策略。\n    download-data         下载回测数据。\n    convert-data          将蜡烛图（OHLCV）数据从一种格式转换为另一种格式。\n    convert-trade-data    将交易数据从一种格式转换为另一种格式。\n    trades-to-ohlcv       将交易数据转换为 OHLCV 数据。\n    list-data             列出已下载的数据。\n    backtesting           回测模块。\n    backtesting-show      显示过去的回测结果。\n    backtesting-analysis  回测分析模块。\n    edge                  Edge 模块。\n    hyperopt              超参数优化模块。\n    hyperopt-list         列出超参数优化结果。\n    hyperopt-show         显示超参数优化结果的详细信息。\n    list-exchanges        打印可用的交易所。\n    list-markets          打印交易所上的市场。\n    list-pairs            打印交易所上的交易对。\n    list-strategies       打印可用的策略。\n    list-hyperoptloss     打印可用的超参数优化损失函数。\n    list-freqaimodels     打印可用的 freqAI 模型。\n    list-timeframes       打印交易所上可用的时间周期。\n    show-trades           显示交易。\n    test-pairlist         测试您的交易对列表配置。\n    convert-db            将数据库迁移到不同的系统。\n    install-ui            安装 FreqUI。\n    plot-dataframe        绘制带有指标的蜡烛图。\n    plot-profit           生成显示利润的图表。\n    webserver             Web 服务器模块。\n    strategy-updater      将过时的策略文件更新到当前版本。\n    lookahead-analysis    检查潜在的前瞻性偏差。\n    recursive-analysis    检查潜在的递归公式问题。\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  -V, --version         显示程序版本号并退出。","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/new-config","position":0},{"hierarchy":{"lvl1":""},"content":"用法: `freqtrade new-config [-h] [-c PATH]`\n\n选项:\n\n  -h, --help            显示帮助信息并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。","type":"content","url":"/new-config","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/new-strategy","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade new-strategy [-h] [--userdir PATH] [-s NAME]\n                              [--strategy-path PATH]\n                              [--template {full,minimal,advanced}]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  -s NAME, --strategy NAME\n                        指定机器人使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --template {full,minimal,advanced}\n                        使用模板，可以是 `minimal`、`full`（包含多个示例指标）或 `advanced`。\n                        默认：`full`。","type":"content","url":"/new-strategy","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/plot-dataframe","position":0},{"hierarchy":{"lvl1":""},"content":"usage: freqtrade plot-dataframe [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                                [--strategy-path PATH]\n                                [--recursive-strategy-search]\n                                [--freqaimodel NAME] [--freqaimodel-path PATH]\n                                [-p PAIRS [PAIRS ...]]\n                                [--indicators1 INDICATORS1 [INDICATORS1 ...]]\n                                [--indicators2 INDICATORS2 [INDICATORS2 ...]]\n                                [--plot-limit INT] [--db-url PATH]\n                                [--trade-source {DB,file}]\n                                [--export {none,trades,signals}]\n                                [--backtest-filename PATH]\n                                [--timerange TIMERANGE] [-i TIMEFRAME]\n                                [--no-trades]\n\n选项:\n  -h, --help            显示此帮助信息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制到这些交易对。交易对以空格分隔。\n  --indicators1 INDICATORS1 [INDICATORS1 ...]\n                        设置您想要在图表第一行显示的策略指标。以空格分隔的列表。示例：\n                        `ema3 ema5`。默认：`['sma', 'ema3', 'ema5']`。\n  --indicators2 INDICATORS2 [INDICATORS2 ...]\n                        设置您想要在图表第三行显示的策略指标。以空格分隔的列表。示例：\n                        `fastd fastk`。默认：`['macd', 'macdsignal']`。\n  --plot-limit INT      指定绘图的刻度限制。注意：值过高会导致文件巨大。默认：750。\n  --db-url PATH         覆盖交易数据库URL，这在自定义部署中很有用（默认：实时运行模式为\n                        `sqlite:///tradesv3.sqlite`，模拟运行为\n                        `sqlite:///tradesv3.dryrun.sqlite`）。\n  --trade-source {DB,file}\n                        指定交易来源（可以是DB或file（回测文件））默认：file\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-\n                        filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或\n                        `--export-directory` 作为基础目录。\n  --timerange TIMERANGE\n                        指定使用的数据时间范围。\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --no-trades           跳过使用回测文件和数据库中的交易。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。如果您将输出重定向到文件，这可能很有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定文件。特殊值有：'syslog'、'journald'。\n                        有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或\n                        `config.json`，以存在的为准）。可以使用多个 --config 选项。\n                        可以设置为 `-` 从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含历史回测数据的交易所基础目录路径。要查看期货数据，\n                        请额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人将使用的策略类名称。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义 freqaimodels。\n  --freqaimodel-path PATH\n                        指定 freqaimodels 的额外查找路径。\n","type":"content","url":"/plot-dataframe","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/plot-profit","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade plot-profit [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH]\n                             [-s NAME] [--strategy-path PATH]\n                             [--recursive-strategy-search]\n                             [--freqaimodel NAME] [--freqaimodel-path PATH]\n                             [-p PAIRS [PAIRS ...]] [--timerange TIMERANGE]\n                             [--export {none,trades,signals}]\n                             [--backtest-filename PATH] [--db-url PATH]\n                             [--trade-source {DB,file}] [-i TIMEFRAME]\n                             [--auto-open]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅处理这些交易对。交易对以空格分隔。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或 `--export-directory` 作为基础目录。\n  --db-url PATH         覆盖交易数据库 URL，这在自定义部署中很有用（默认：`sqlite:///tradesv3.sqlite` 用于实时运行模式，`sqlite:///tradesv3.dryrun.sqlite` 用于模拟运行）。\n  --trade-source {DB,file}\n                        指定交易的来源（可以是 DB 或文件（回测文件））。默认：file。\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间周期（`1m`, `5m`, `30m`, `1h`, `1d`）。\n  --auto-open           自动打开生成的图表。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        指定 freqaimodels 的额外查找路径。","type":"content","url":"/plot-profit","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/recursive-analysis-1","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade recursive-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-s NAME] [--strategy-path PATH]\n                                    [--recursive-strategy-search]\n                                    [--freqaimodel NAME]\n                                    [--freqaimodel-path PATH] [-i TIMEFRAME]\n                                    [--timerange TIMERANGE]\n                                    [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                    [-p PAIRS [PAIRS ...]]\n                                    [--startup-candle STARTUP_CANDLE [STARTUP_CANDLE ...]]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间周期（`1m`, `5m`, `30m`, `1h`, `1d`）。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的蜡烛图（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅处理这些交易对。交易对以空格分隔。\n  --startup-candle STARTUP_CANDLE [STARTUP_CANDLE ...]\n                        指定要检查的启动蜡烛图（`199`, `499`, `999`, `1999`）。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        指定 freqaimodels 的额外查找路径。","type":"content","url":"/recursive-analysis-1","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/show-config","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade show-config [-h] [--userdir PATH] [-c PATH]\n                             [--show-sensitive]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  --show-sensitive      在输出中显示敏感信息。","type":"content","url":"/show-config","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/show-trades","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade show-trades [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH]\n                             [--db-url PATH]\n                             [--trade-ids TRADE_IDS [TRADE_IDS ...]]\n                             [--print-json]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --db-url PATH         覆盖交易数据库 URL，这在自定义部署中很有用（默认：`sqlite:///tradesv3.sqlite` 用于实时运行模式，`sqlite:///tradesv3.dryrun.sqlite` 用于模拟运行）。\n  --trade-ids TRADE_IDS [TRADE_IDS ...]\n                        指定交易 ID 列表。\n  --print-json          以 JSON 格式打印输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/show-trades","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/strategy-updater","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade strategy-updater [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                  [-c PATH] [-d PATH] [--userdir PATH]\n                                  [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                                  [--strategy-path PATH]\n                                  [--recursive-strategy-search]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        提供一个以空格分隔的策略列表进行回测。请注意，时间周期需要在配置文件或命令行中设置。当与 `--export trades` 一起使用时，策略名称会被注入到文件名中（例如 `backtest-data.json` 会变成 `backtest-data-SampleStrategy.json`）。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归查找策略。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/strategy-updater","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/test-pairlist","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade test-pairlist [-h] [--userdir PATH] [-v] [-c PATH]\n                               [--quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]]\n                               [-1] [--print-json] [--exchange EXCHANGE]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  --quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]\n                        指定报价货币。以空格分隔的列表。\n  -1, --one-column      以单列格式输出。\n  --print-json          以 JSON 格式打印交易对或市场符号列表。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。","type":"content","url":"/test-pairlist","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/trade","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade trade [-h] [-v] [--no-color] [--logfile FILE] [-V] [-c PATH]\n                       [-d PATH] [--userdir PATH] [-s NAME]\n                       [--strategy-path PATH] [--recursive-strategy-search]\n                       [--freqaimodel NAME] [--freqaimodel-path PATH]\n                       [--db-url PATH] [--sd-notify] [--dry-run]\n                       [--dry-run-wallet DRY_RUN_WALLET] [--fee FLOAT]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --db-url PATH         覆盖交易数据库 URL，这在自定义部署中很有用（默认：`sqlite:///tradesv3.sqlite` 用于实时运行模式，`sqlite:///tradesv3.dryrun.sqlite` 用于模拟运行）。\n  --sd-notify           通知 systemd 服务管理器。\n  --dry-run             强制以模拟模式进行交易（移除交易所密钥并模拟交易）。\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        启动余额，用于回测/超参数优化和模拟运行。\n  --fee FLOAT           指定手续费比率。将在交易开仓和平仓时各应用一次。\n\n通用参数:\n  -v, --verbose                            详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color                               禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE          记录到指定的文件。特殊值包括：'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version                            显示程序版本号并退出。\n  -c PATH, --config PATH                   指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH 交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH     用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME     指定机器人将使用的策略类名。\n  --strategy-path PATH         指定额外的策略查找路径。\n  --recursive-strategy-search  在策略文件夹中递归查找策略。\n  --freqaimodel NAME           指定自定义 freqaimodels。\n  --freqaimodel-path PATH      指定 freqaimodels 的额外查找路径。","type":"content","url":"/trade","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/trades-to-ohlcv","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade trades-to-ohlcv [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [-p PAIRS [PAIRS ...]]\n                                 [-t TIMEFRAMES [TIMEFRAMES ...]]\n                                 [--exchange EXCHANGE]\n                                 [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                 [--data-format-trades {json,jsongz,feather,parquet}]\n                                 [--trading-mode {spot,margin,futures}]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限定命令仅针对这些交易对。以空格分隔。\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        指定要下载的 K 线周期。以空格分隔的列表。默认：`1m 5m`。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的 K 线（OHLCV）数据的存储格式。（默认：`feather`）。\n  --data-format-trades {json,jsongz,feather,parquet}\n                        下载的成交数据的存储格式。（默认：`feather`）。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/trades-to-ohlcv","position":1},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/webserver","position":0},{"hierarchy":{"lvl1":""},"content":"用法: freqtrade webserver [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                           [-c PATH] [-d PATH] [--userdir PATH]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/webserver","position":1},{"hierarchy":{"lvl1":"配置 Freqtrade"},"type":"lvl1","url":"/configuration","position":0},{"hierarchy":{"lvl1":"配置 Freqtrade"},"content":"","type":"content","url":"/configuration","position":1},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl2":"配置机器人"},"type":"lvl2","url":"/configuration#id","position":2},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl2":"配置机器人"},"content":"Freqtrade 拥有众多可配置的功能和选项。\n\n默认情况下，这些设置通过配置文件进行管理（见下文）。","type":"content","url":"/configuration#id","position":3},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"Freqtrade 配置文件","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#freqtrade","position":4},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"Freqtrade 配置文件","lvl2":"配置机器人"},"content":"机器人在运行过程中会使用一组配置参数，这些参数共同构成了机器人的配置。通常，机器人会从一个文件（Freqtrade 配置文件）中读取其配置。\n\n默认情况下，机器人会从当前工作目录下的 config.json 文件加载配置。\n\n你可以通过 -c/--config 命令行选项指定机器人使用的其他配置文件。\n\n如果你使用了\n\n快速入门方法安装机器人，安装脚本应该已经为你创建了默认的配置文件（config.json）。\n\n如果没有创建默认配置文件，建议使用 freqtrade new-config --config user_data/config.json 生成一个基础配置文件。\n\nFreqtrade 配置文件需采用 JSON 格式编写。\n\n除了标准的 JSON 语法外，你还可以在配置文件中使用单行 // ... 和多行 /* ... */ 注释，以及参数列表中的尾随逗号。\n\n如果你不熟悉 JSON 格式也不用担心——只需用你喜欢的编辑器打开配置文件，修改你需要的参数，保存更改，最后重启机器人或在停止后重新运行即可。机器人在启动时会验证配置文件的语法，如果你编辑时出现错误，会在启动时警告并指出有问题的行。","type":"content","url":"/configuration#freqtrade","position":5},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"环境变量","lvl3":"Freqtrade 配置文件","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#environment-variables","position":6},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"环境变量","lvl3":"Freqtrade 配置文件","lvl2":"配置机器人"},"content":"可以通过环境变量设置 Freqtrade 配置中的选项。\n这会优先于配置文件或策略中的对应值。\n\n__ 和 ___ 的说明\n\n下文中的 __ 是两个 _\n\n下文中的 ___ 是三个 _\n\n环境变量必须以 FREQTRADE__ 为前缀，才能被 freqtrade 加载到配置中。\n\n__ 作为层级分隔符，因此格式应为 FREQTRADE__{section}__{key}。\n例如，定义 export FREQTRADE__STAKE_AMOUNT=200 会在配置中生成 {stake_amount: 200}。\n\n更复杂的例子如 export FREQTRADE__EXCHANGE__KEY=<yourExchangeKey>，用于保护你的交易所密钥安全。这样会将值放入配置的 exchange.key 部分。\n使用这种方式，所有配置项都可以通过环境变量设置。\n\n请注意，环境变量会覆盖配置文件中的对应设置，但命令行参数始终具有最高优先级。\n\n常见示例：FREQTRADE__TELEGRAM__CHAT_ID=<telegramchatid>\nFREQTRADE__TELEGRAM__TOKEN=<telegramToken>\nFREQTRADE__EXCHANGE__KEY=<yourExchangeKey>\nFREQTRADE__EXCHANGE__SECRET=<yourExchangeSecret>\n\nJSON 列表会被解析为 json，因此你可以如下设置交易对列表：export FREQTRADE__EXCHANGE__PAIR_WHITELIST='[\"BTC/USDT\", \"ETH/USDT\"]'\n\n3 种变量\n\n检测到的环境变量会在启动时记录日志——如果你发现某个值不是你期望的，请确认它是否被环境变量覆盖。\n\n上面提到了 3 种变量,它们的优先级从高到低如下:\n\n命令行参数优先级最高\n\n环境变量次之\n\n配置文件中的配置优先级最低\n\n验证合并结果\n\n你可以使用 \n\nshow-config 子命令 查看最终合并后的配置。\n\n加载顺序\n\n环境变量在初始配置加载后才会被加载。因此，无法通过环境变量提供配置文件路径。请使用命令行参数指定 --config path/to/config.json。\n\n这同样适用于 user_dir。虽然可以通过环境变量设置用户目录，但配置不会从该位置加载。","type":"content","url":"/configuration#environment-variables","position":7},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"多配置文件","lvl3":"Freqtrade 配置文件","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#multiple-configuration-files","position":8},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"多配置文件","lvl3":"Freqtrade 配置文件","lvl2":"配置机器人"},"content":"可以为机器人指定多个配置文件，或让机器人从标准输入流读取配置参数。\n\n你可以在 add_config_files 中指定额外的配置文件。\n\n该参数指定的文件会在初始配置文件加载后合并。\n\n文件路径相对于初始配置文件解析。\n\n这类似于使用多个 --config 参数，但更简单，无需每次都为所有命令指定所有文件。\n\n验证合并结果\n\n你可以使用 \n\nshow-config 子命令 查看最终合并后的配置。\n\n用多配置文件保护密钥\n\n你可以使用第二个配置文件存放密钥，这样可以分享\"主\"配置文件，同时保护 API 密钥。\n\n第二个文件只需覆盖你想要隐藏的内容。\n\n如果某个键在多个配置文件中出现，则\"最后指定的配置\"优先（如 config-private.json）。\n\n对于一次性命令，也可以如下指定多个 “--config” 参数：freqtrade trade --config user_data/config1.json --config user_data/config-private.json <...>\n\n下面的方式等价于上例，但通过配置文件中的 add_config_files，便于复用，某个配置文件 “user_data/config.json” 的配置片段如下：\"add_config_files\": [\n    \"config1.json\",\n    \"config-private.json\"\n]freqtrade trade --config user_data/config.json <...>\n\n配置冲突处理\n\n如果 config.json 和 config-import.json 都有同一配置项，则父配置优先。\n\n如下例，合并后 max_open_trades 为 3，因为主配置覆盖了可复用的\"import\"配置。\n\n“user_data/config.json” 部分代码如下：{\n    \"max_open_trades\": 3,\n    \"stake_currency\": \"USDT\",\n    \"add_config_files\": [\n        \"config-import.json\"\n    ]\n}\n\n“user_data/config-import.json” 部分代码如下：{\n    \"max_open_trades\": 10,\n    \"stake_amount\": \"unlimited\",\n}\n\n合并后的配置：{\n    \"max_open_trades\": 3,\n    \"stake_currency\": \"USDT\",\n    \"stake_amount\": \"unlimited\"\n}\n\n如果 add_config_files 中有多个文件，则它们被视为同一级，后出现的覆盖前面的（除非父级已定义该键）。","type":"content","url":"/configuration#multiple-configuration-files","position":9},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"编辑器自动补全与校验","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#id-1","position":10},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"编辑器自动补全与校验","lvl2":"配置机器人"},"content":"如果你使用支持 JSON schema 的编辑器，可以通过在配置文件顶部添加以下内容，获得自动补全和校验功能：{\n    \"$schema\": \"https://schema.freqtrade.io/schema.json\",\n}\n\n开发版 schema\n\n开发版 schema 可通过 https://schema.freqtrade.io/schema_dev.json 获取，但建议使用稳定版以获得最佳体验。","type":"content","url":"/configuration#id-1","position":11},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#configuration-parameters","position":12},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"配置参数","lvl2":"配置机器人"},"content":"下表列出了所有可用的配置参数。\n\nFreqtrade 也可以通过命令行（CLI）参数加载许多选项（可通过 --help 查看详情）。","type":"content","url":"/configuration#configuration-parameters","position":13},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"配置项优先级","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#configuration-option-prevalence","position":14},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"配置项优先级","lvl3":"配置参数","lvl2":"配置机器人"},"content":"所有选项的优先级如下：\n\n命令行参数优先于其他所有选项\n\n环境变量\n\n配置文件按顺序使用（最后的优先），并覆盖策略配置\n\n策略配置仅在未通过配置文件或命令行参数设置时使用。下表中带有 \n\n策略可覆盖 标记的选项即为如此。","type":"content","url":"/configuration#configuration-option-prevalence","position":15},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"参数表","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#id-2","position":16},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"参数表","lvl3":"配置参数","lvl2":"配置机器人"},"content":"必填参数标记为 必需，表示必须通过某种方式设置。\n\n参数表格\n\n参数\n\n描述\n\n是否必需\n\n数据类型\n\nmax_open_trades\n\n必需\n\n允许机器人同时持有的最大交易数。每个交易对只能有一个持仓，因此交易对列表长度也是一个限制。如果为 -1，则不限制（即可能无限开仓，受交易对列表限制）。\n\n详见下文。\n\n策略可覆盖。\n\n正整数或 -1。\n\nstake_currency\n\n必需\n\n用于交易的加密货币。\n\n字符串\n\nstake_amount\n\n必需\n\n每笔交易使用的加密货币数量。设为 “unlimited” 可让机器人使用全部可用余额。\n\n详见下文。\n\n正浮点数或 “unlimited”。\n\ntradable_balance_ratio\n\n\n\n机器人可用于交易的总账户余额比例。\n\n详见下文。默认值为 0.99（99%）。\n\n0.1 到 1.0 之间的正浮点数。\n\navailable_capital\n\n\n\n机器人可用的起始资金。适用于在同一交易所账户运行多个机器人。\n\n详见下文。\n\n正浮点数。\n\namend_last_stake_amount\n\n\n\n如有需要，使用减少的最后一笔交易金额。\n\n详见下文。默认值为 false。\n\n布尔值\n\nlast_stake_amount_min_ratio\n\n\n\n定义最后一笔交易金额的最小比例，仅在 amend_last_stake_amount 为 true 时生效。\n\n详见下文。默认值为 0.5。\n\n浮点数（比例）\n\namount_reserve_percent\n\n\n\n在最小交易金额中预留部分金额。机器人在计算最小交易金额时会预留 amount_reserve_percent + 止损值，以避免下单被拒。\n\n详见下文。默认值为 0.05（5%）。\n\n正浮点数（比例）。\n\ntimeframe\n\n\n\n使用的时间周期（如 1m、5m、15m、30m、1h ...）。通常在策略中指定。\n\n策略可覆盖。\n\n字符串\n\nfiat_display_currency\n\n\n\n用于显示利润的法币。\n\n详见下文。\n\n字符串\n\ndry_run\n\n必需\n\n定义机器人是否处于模拟（Dry Run）或实盘模式。默认值为 true。\n\n布尔值\n\ndry_run_wallet\n\n\n\n定义机器人在 Dry Run 模式下模拟钱包的起始金额。\n\n详见下文默认值为 1000。\n\n浮点数或字典\n\ncancel_open_orders_on_exit\n\n\n\n当通过 /stop RPC 命令、按下 Ctrl+C 或机器人异常退出时，取消未成交订单。设为 true 可在市场崩盘时通过 /stop 取消未成交订单，不影响已开仓位。默认值为 false。\n\n布尔值\n\nprocess_only_new_candles\n\n\n\n仅在新 K 线到来时处理指标。若为 false，每次循环都会处理指标，可能增加系统负载，但对依赖 tick 数据的策略有用。\n\n策略可覆盖。默认值为 true。\n\n布尔值\n\nminimal_roi\n\n必需\n\n设置机器人退出交易的最小收益率阈值。\n\n详见下文。\n\n策略可覆盖。\n\n字典\n\nstoploss\n\n必需\n\n机器人使用的止损值（比例）。详见\n\n止损文档。\n\n策略可覆盖。\n\n浮点数（比例）\n\ntrailing_stop\n\n\n\n启用跟踪止损（基于配置或策略文件中的 stoploss）。详见\n\n止损文档。\n\n策略可覆盖。\n\n布尔值\n\ntrailing_stop_positive\n\n\n\n达到盈利后调整止损。详见\n\n止损文档。\n\n策略可覆盖。\n\n浮点数\n\ntrailing_stop_positive_offset\n\n\n\n何时应用 trailing_stop_positive 的偏移量。百分比值，需为正数。详见\n\n止损文档。\n\n策略可覆盖。默认值为 0.0（无偏移）。\n\n浮点数\n\ntrailing_only_offset_is_reached\n\n\n\n仅在达到偏移量时应用跟踪止损。\n\n止损文档。\n\n策略可覆盖。默认值为 false。\n\n布尔值\n\nfee\n\n\n\n回测/模拟时使用的手续费。通常不需配置，freqtrade 会使用交易所默认手续费。按比例设置（如 0.001 = 0.1%）。每笔交易买卖各收一次手续费。\n\n浮点数（比例）\n\nfutures_funding_rate\n\n\n\n当无法从交易所获取历史资金费率时使用的用户自定义资金费率。不会覆盖真实历史费率。建议除非测试特定币种且了解资金费率影响，否则设为 0。\n\n详见此处默认值为 None。\n\n浮点数\n\ntrading_mode\n\n\n\n指定常规交易(regularly)、杠杆交易(leverage)或合约交易(contracts)。\n\n杠杆文档。默认值为 \"spot\"。\n\n字符串\n\nmargin_mode\n\n\n\n杠杆交易时，决定保证金是全仓还是逐仓。\n\n杠杆文档。\n\n字符串\n\nliquidation_buffer\n\n\n\n设置止损价与强平价之间的安全缓冲区比例，防止触发强平。\n\n杠杆文档。默认值为 0.05。\n\n浮点数\n\n未成交超时\n\n\n\n\n\n\n\nunfilledtimeout.entry\n\n必需\n\n机器人等待未成交买单的时间（分钟或秒），超时后取消订单。\n\n策略可覆盖。\n\n整数\n\nunfilledtimeout.exit\n\n必需\n\n机器人等待未成交卖单的时间（分钟或秒），超时后取消订单并以当前价格重新下单（只要有信号）。\n\n策略可覆盖。\n\n整数\n\nunfilledtimeout.unit\n\n\n\n未成交超时的单位。注意：若设为 “seconds”，则 “internals.process_throttle_secs” 必须小于等于超时时间。\n\n策略可覆盖。默认值为 \"minutes\"。\n\n字符串\n\nunfilledtimeout.exit_timeout_count\n\n\n\n卖单超时次数上限。达到该次数后触发紧急退出。0 表示不限制。\n\n策略可覆盖。默认值为 0。\n\n整数\n\n定价\n\n\n\n\n\n\n\nentry_pricing.price_side\n\n\n\n选择机器人获取买入价格时参考的盘口方向。\n\n详见下文。默认值为 \"same\"。\n\n字符串（ask、bid、same 或 other）\n\nentry_pricing.price_last_balance\n\n必需\n\n插值买入价格。\n\n详见下文。\n\n\n\nentry_pricing.use_order_book\n\n\n\n启用基于盘口的买入。\n\n详见下文。默认值为 true。\n\n布尔值\n\nentry_pricing.order_book_top\n\n\n\n机器人在盘口中选取第 N 个价格作为买入价。如为 2，则选取盘口中的第二个价格。\n\n详见下文。默认值为 1。\n\n正整数\n\nentry_pricing.check_depth_of_market.enabled\n\n\n\n若盘口买卖单差额达到设定值则不买入。\n\n详见下文。默认值为 false。\n\n布尔值\n\nentry_pricing.check_depth_of_market.bids_to_ask_delta\n\n\n\n盘口买卖单差额比例。小于 1 表示卖单大于买单，大于 1 表示买单大于卖单。\n\n详见下文。默认值为 0。\n\n浮点数（比例）\n\nexit_pricing.price_side\n\n\n\n选择机器人获取卖出价格时参考的盘口方向。\n\n详见下文。默认值为 \"same\"。\n\n字符串（ask、bid、same 或 other）\n\nexit_pricing.price_last_balance\n\n\n\n插值卖出价格。\n\n详见下文。\n\n\n\nexit_pricing.use_order_book\n\n\n\n启用基于盘口的卖出。\n\n详见下文。默认值为 true。\n\n布尔值\n\nexit_pricing.order_book_top\n\n\n\n机器人在盘口中选取第 N 个价格作为卖出价。如为 2，则选取盘口中的第二个价格。\n\n详见下文。默认值为 1。\n\n正整数\n\ncustom_price_max_distance_ratio\n\n\n\n配置当前价与自定义买入/卖出价的最大距离比例。默认值为 0.02（2%）。\n\n正浮点数\n\n订单/信号处理\n\n\n\n\n\n\n\nuse_exit_signal\n\n\n\n是否使用策略生成的退出信号，配合 minimal_roi。设为 false 时禁用 “exit_long” 和 “exit_short” 列。对其他退出方式（止损、ROI、回调）无影响。\n\n策略可覆盖。默认值为 true。\n\n布尔值\n\nexit_profit_only\n\n\n\n仅在达到 exit_profit_offset 后才考虑退出。\n\n策略可覆盖。默认值为 false。\n\n布尔值\n\nexit_profit_offset\n\n\n\n仅在高于该值时退出信号才生效，仅与 exit_profit_only=True 联用。\n\n策略可覆盖。默认值为 0.0。\n\n浮点数（比例）\n\nignore_roi_if_entry_signal\n\n\n\n若买入信号仍然有效，则不退出。优先于 minimal_roi 和 use_exit_signal。\n\n策略可覆盖。默认值为 false。\n\n布尔值\n\nignore_buying_expired_candle_after\n\n\n\n指定买入信号过期的秒数。\n\n整数\n\norder_types\n\n\n\n根据操作（“entry”、“exit”、“stoploss”、“emergency_exit”、“force_exit”、“force_entry”）配置订单类型。\n\n详见下文。\n\n策略可覆盖。\n\n字典\n\norder_time_in_force\n\n\n\n配置买入和卖出订单的有效期策略。\n\n详见下文。\n\n策略可覆盖。\n\n字典\n\nposition_adjustment_enable\n\n\n\n启用策略使用持仓调整（加仓/减仓）。\n\n详见此处。\n\n策略可覆盖。默认值为 false。\n\n布尔值\n\nmax_entry_position_adjustment\n\n\n\n每笔持仓最多可加仓次数，-1 表示不限制。\n\n详见此处。\n\n策略可覆盖。默认值为 -1。\n\n正整数或 -1\n\n交易所\n\n\n\n\n\n\n\nexchange.name\n\n必需\n\n交易所名称。\n\n字符串\n\nexchange.key\n\n\n\n交易所 API key，仅生产模式下必需。请妥善保管，切勿泄露。\n\n字符串\n\nexchange.secret\n\n\n\n交易所 API secret，仅生产模式下必需。请妥善保管，切勿泄露。\n\n字符串\n\nexchange.password\n\n\n\n交易所 API password，仅部分交易所和生产模式下必需。请妥善保管，切勿泄露。\n\n字符串\n\nexchange.uid\n\n\n\n交易所 API uid，仅部分交易所和生产模式下必需。请妥善保管，切勿泄露。\n\n字符串\n\nexchange.pair_whitelist\n\n\n\n机器人用于交易和回测的交易对列表。支持正则表达式（如 .*/BTC）。不适用于 VolumePairList。\n\n详见。\n\n列表\n\nexchange.pair_blacklist\n\n\n\n机器人必须避免交易和回测的交易对列表。\n\n详见。\n\n列表\n\nexchange.ccxt_config\n\n\n\n传递给 ccxt 实例（同步和异步）的额外参数。参数因交易所而异，详见 \n\nccxt 文档。请避免在此处添加密钥（请用专用字段），以免泄露到日志。\n\n字典\n\nexchange.ccxt_sync_config\n\n\n\n传递给同步 ccxt 实例的额外参数。参数因交易所而异，详见 \n\nccxt 文档。\n\n字典\n\nexchange.ccxt_async_config\n\n\n\n传递给异步 ccxt 实例的额外参数。参数因交易所而异，详见 \n\nccxt 文档。\n\n字典\n\nexchange.enable_ws\n\n\n\n启用交易所 Websocket。\n\n详见。默认值为 true。\n\n布尔值\n\nexchange.markets_refresh_interval\n\n\n\n市场信息刷新间隔（分钟）。默认值为 60 分钟。\n\n正整数\n\nexchange.skip_open_order_update\n\n\n\n启动时跳过未成交订单更新，仅在实盘下相关。默认值为 false\n\n布尔值\n\nexchange.unknown_fee_rate\n\n\n\n计算手续费时的备用值，适用于手续费为非可交易币种的交易所。此值会与\"手续费成本\"相乘。默认值为 None\n\n浮点数\n\nexchange.log_responses\n\n\n\n记录交易所响应，仅调试模式下使用，谨慎开启。默认值为 false\n\n布尔值\n\nexchange.only_from_ccxt\n\n\n\n禁止从 \n\ndata.binance.vision 下载数据。设为 false 可加快下载速度，但若该站点不可用可能出错。默认值为 false\n\n布尔值\n\nexperimental.block_bad_exchanges\n\n\n\n屏蔽已知与 freqtrade 不兼容的交易所。除非测试新交易所，否则建议保持默认。默认值为 true。\n\n布尔值\n\n插件\n\n\n\n\n\n\n\nedge.*\n\n\n\n详见 \n\nedge 配置文档。\n\n\n\npairlists\n\n\n\n定义一个或多个交易对列表。\n\n详见。默认值为 StaticPairList。\n\n字典列表\n\nTelegram\n\n\n\n\n\n\n\ntelegram.enabled\n\n\n\n启用 Telegram。\n\n布尔值\n\ntelegram.token\n\n\n\nTelegram 机器人 token，仅在 telegram.enabled 为 true 时必需。请妥善保管，切勿泄露。\n\n字符串\n\ntelegram.chat_id\n\n\n\n你的 Telegram 账号 id，仅在 telegram.enabled 为 true 时必需。请妥善保管，切勿泄露。\n\n字符串\n\ntelegram.balance_dust_level\n\n\n\n尘埃级别（以 stake 货币计），余额低于此值的币种不会在 /balance 中显示。\n\n浮点数\n\ntelegram.reload\n\n\n\n允许 Telegram 消息中显示\"重载\"按钮。默认值为 true。\n\n布尔值\n\ntelegram.notification_settings.*\n\n\n\n详细通知设置。详见 \n\ntelegram 文档。\n\n字典\n\ntelegram.allow_custom_messages\n\n\n\n允许策略通过 dataprovider.send_msg() 发送 Telegram 消息。\n\n布尔值\n\nWebhook\n\n\n\n\n\n\n\nwebhook.enabled\n\n\n\n启用 Webhook 通知。\n\n布尔值\n\nwebhook.url\n\n\n\nWebhook 地址，仅在 webhook.enabled 为 true 时必需。详见 \n\nwebhook 文档。\n\n字符串\n\nwebhook.entry\n\n\n\n买入时发送的 payload，仅在 webhook.enabled 为 true 时必需。详见 \n\nwebhook 文档。\n\n字符串\n\nwebhook.entry_cancel\n\n\n\n买单取消时发送的 payload，仅在 webhook.enabled 为 true 时必需。详见 \n\nwebhook 文档。\n\n字符串\n\nwebhook.entry_fill\n\n\n\n买单成交时发送的 payload，仅在 webhook.enabled 为 true 时必需。详见 \n\nwebhook 文档。\n\n字符串\n\nwebhook.exit\n\n\n\n卖出时发送的 payload，仅在 webhook.enabled 为 true 时必需。详见 \n\nwebhook 文档。\n\n字符串\n\nwebhook.exit_cancel\n\n\n\n卖单取消时发送的 payload，仅在 webhook.enabled 为 true 时必需。详见 \n\nwebhook 文档。\n\n字符串\n\nwebhook.exit_fill\n\n\n\n卖单成交时发送的 payload，仅在 webhook.enabled 为 true 时必需。详见 \n\nwebhook 文档。\n\n字符串\n\nwebhook.status\n\n\n\n状态调用时发送的 payload，仅在 webhook.enabled 为 true 时必需。详见 \n\nwebhook 文档。\n\n字符串\n\nwebhook.allow_custom_messages\n\n\n\n允许策略通过 dataprovider.send_msg() 发送 Webhook 消息。\n\n布尔值\n\nRest API / FreqUI / 生产者-消费者\n\n\n\n\n\n\n\napi_server.enabled\n\n\n\n启用 API Server。详见 \n\nAPI Server 文档。\n\n布尔值\n\napi_server.listen_ip_address\n\n\n\n绑定 IP 地址。详见 \n\nAPI Server 文档。\n\nIPv4\n\napi_server.listen_port\n\n\n\n绑定端口。详见 \n\nAPI Server 文档。\n\n1024-65535 之间的整数\n\napi_server.verbosity\n\n\n\n日志详细程度。info 显示所有 RPC 调用，error 仅显示错误。\n\n枚举，info 或 error。默认 info。\n\napi_server.username\n\n\n\nAPI server 用户名。详见 \n\nAPI Server 文档。请妥善保管，切勿泄露。\n\n字符串\n\napi_server.password\n\n\n\nAPI server 密码。详见 \n\nAPI Server 文档。请妥善保管，切勿泄露。\n\n字符串\n\napi_server.ws_token\n\n\n\n消息 WebSocket 的 API token。详见 \n\nAPI Server 文档。请妥善保管，切勿泄露。\n\n字符串\n\nbot_name\n\n\n\n机器人名称。通过 API 传递给客户端，可用于区分/命名机器人。默认值为 freqtrade\n\n字符串\n\nexternal_message_consumer\n\n\n\n启用\n\n生产者/消费者模式。\n\n字典\n\n其他\n\n\n\n\n\n\n\ninitial_state\n\n\n\n定义应用初始状态。设为 stopped 时，需通过 /start RPC 命令手动启动。默认值为 stopped。\n\n枚举，running、paused 或 stopped\n\nforce_entry_enable\n\n\n\n启用强制建仓的 RPC 命令。详见下文。\n\n布尔值\n\ndisable_dataframe_checks\n\n\n\n禁用对策略方法返回的 OHLCV dataframe 的正确性检查。仅在你明确知道自己在做什么时使用。\n\n策略可覆盖。默认值为 False。\n\n布尔值\n\ninternals.process_throttle_secs\n\n\n\n设置每次机器人主循环的最小持续时间（秒）。默认值为 5 秒。\n\n正整数\n\ninternals.heartbeat_interval\n\n\n\n每 N 秒打印一次心跳消息。设为 0 可禁用心跳。默认值为 60 秒。\n\n正整数或 0\n\ninternals.sd_notify\n\n\n\n启用 sd_notify 协议，向 systemd 服务管理器报告机器人状态并发送保活信号。详见 \n\n此处。\n\n布尔值\n\nstrategy\n\n必需\n\n定义要使用的策略类。建议通过 --strategy NAME 设置。\n\n类名\n\nstrategy_path\n\n\n\n添加额外的策略查找路径（必须为目录）。\n\n字符串\n\nrecursive_strategy_search\n\n\n\n设为 true 时递归搜索 user_data/strategies 子目录下的策略。\n\n布尔值\n\nuser_data_dir\n\n\n\n用户数据目录。默认值为 ./user_data/。\n\n字符串\n\ndb_url\n\n\n\n声明要使用的数据库 URL。注意：若 dry_run 为 true，默认为 sqlite:///tradesv3.dryrun.sqlite，生产模式为 sqlite:///tradesv3.sqlite。\n\n字符串，SQLAlchemy 连接字符串\n\nlogfile\n\n\n\n指定日志文件名。采用滚动策略，最多保留 10 个 1 MB 日志文件。\n\n字符串\n\nadd_config_files\n\n\n\n额外配置文件。这些文件会与当前配置文件合并。路径相对于初始文件。默认值为 []。\n\n字符串列表\n\ndataformat_ohlcv\n\n\n\n存储历史 K 线（OHLCV）数据的数据格式。默认值为 feather。\n\n字符串\n\ndataformat_trades\n\n\n\n存储历史成交数据的数据格式。默认值为 feather。\n\n字符串\n\nreduce_df_footprint\n\n\n\n将所有数值列转换为 float32/int32，以减少内存/磁盘占用（并加快回测/超参优化/FreqAI 训练推理）。\n\n布尔值。默认值：False。\n\nlog_config\n\n\n\npython logging 的日志配置字典。\n\n详见\n\n字典。默认值：FtRichHandler","type":"content","url":"/configuration#id-2","position":17},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"策略中的参数","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#parameters-in-the-strategy","position":18},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"策略中的参数","lvl3":"配置参数","lvl2":"配置机器人"},"content":"以下参数可在配置文件或策略中设置。\n\n配置文件中的值会覆盖策略中的值。\n\nminimal_roi\n\ntimeframe\n\nstoploss\n\nmax_open_trades\n\ntrailing_stop\n\ntrailing_stop_positive\n\ntrailing_stop_positive_offset\n\ntrailing_only_offset_is_reached\n\nuse_custom_stoploss\n\nprocess_only_new_candles\n\norder_types\n\norder_time_in_force\n\nunfilledtimeout\n\ndisable_dataframe_checks\n\nuse_exit_signal\n\nexit_profit_only\n\nexit_profit_offset\n\nignore_roi_if_entry_signal\n\nignore_buying_expired_candle_after\n\nposition_adjustment_enable\n\nmax_entry_position_adjustment","type":"content","url":"/configuration#parameters-in-the-strategy","position":19},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#configuring-amount-per-trade","position":20},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"content":"有多种方式配置机器人每笔交易使用的 stake 货币数量。所有方法都遵循\n\n可交易余额配置的说明。","type":"content","url":"/configuration#configuring-amount-per-trade","position":21},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"最小交易金额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#id-3","position":22},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"最小交易金额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"content":"最小交易金额取决于交易所和交易对，通常可在交易所支持页面查到。\n\n假设 XRP/USD 的最小可交易数量为 20 XRP（由交易所规定），价格为 0.6 美元，则买入该交易对的最小金额为 20 * 0.6 ~= 12。\n\n该交易所还规定所有订单必须大于 10 美元，但本例不受影响。\n\n为保证安全执行，freqtrade 不允许用 10.1 美元买入，而是确保有足够空间在交易对下方设置止损（加上 amount_reserve_percent，默认 5%）。\n\n预留 5% 后，最小交易金额约为 12.6 美元（12 * (1 + 0.05)）。若再考虑 10% 止损，则为约 14 美元（12.6 / (1 - 0.1)）。\n\n为防止止损过大导致计算值过高，计算出的最小交易金额不会超过实际限制的 1.5 倍。\n\nWarning\n\n由于交易所的限制通常较为稳定且不常更新，部分交易对可能因币价大幅上涨而显示较高的最小限额。freqtrade 会将 stake-amount 调整为该值，除非超过期望值的 30%，此时会拒绝交易。","type":"content","url":"/configuration#id-3","position":23},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"Dry-run 钱包","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#dry-run-wallet","position":24},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"Dry-run 钱包","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"content":"在 dry-run 模式下，机器人会用模拟钱包执行交易。该钱包的起始余额由 dry_run_wallet 定义（默认 1000）。\n\n对于更复杂的场景，也可以为 dry_run_wallet 分配一个字典，分别定义每种货币的起始余额。\"dry_run_wallet\": {\n    \"BTC\": 0.01,\n    \"ETH\": 2,\n    \"USDT\": 1000\n}\n\n命令行参数（--dry-run-wallet）可覆盖配置值，但仅适用于浮点数，字典需在配置文件中设置。\n\nCaution\n\n非 stake 货币的余额不会用于交易，但会在钱包余额中显示。\n\n在全仓杠杆交易所，钱包余额可用于计算可用保证金。","type":"content","url":"/configuration#dry-run-wallet","position":25},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"可交易余额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#tradable-balance","position":26},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"可交易余额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"content":"默认情况下，机器人假定\"总余额 - 1%\"可用于交易，使用\n\n动态交易金额时，会将总余额按 max_open_trades 平均分配。\n\nfreqtrade 会为手续费预留 1%，默认不会动用。\n\n可通过 tradable_balance_ratio 设置\"保留\"金额。\n\n例如，钱包有 10 ETH，tradable_balance_ratio=0.5（50%），则机器人最多用 5 ETH 交易，其余不参与。\n\nDanger\n\n运行多个机器人时不应使用此设置。请参考\n\n分配可用资金。\n\nWarning\n\ntradable_balance_ratio 作用于当前余额（可用余额 + 持仓）。\n\n假设起始余额 1000，tradable_balance_ratio=0.99 并不能保证始终有 10 单位货币可用。\n\n例如，若总余额降至 500（因亏损或提现），可用余额也可能降至 5。","type":"content","url":"/configuration#tradable-balance","position":27},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"分配可用资金","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#assign-available-capital","position":28},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"分配可用资金","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"content":"若在同一交易所账户运行多个机器人，为充分利用复利，可为每个机器人限定起始余额。\n\n可通过设置 available_capital 实现。\n\n假设账户有 10000 USDT，想运行 2 个策略，则设 available_capital=5000，每个机器人初始资金 5000 USDT。\n\n机器人会将该余额平均分配到 max_open_trades。\n\n盈利会增加该机器人的持仓，不影响其他机器人。\n\n调整 available_capital 需重载配置。减少资金时不会平仓，差额在交易结束后返还钱包。实际效果取决于调整与平仓间的价格变动。\n\n与 tradable_balance_ratio 不兼容\n\n设置此项会替换 tradable_balance_ratio 的配置。","type":"content","url":"/configuration#assign-available-capital","position":29},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"调整最后一笔交易金额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#id-4","position":30},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"调整最后一笔交易金额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"content":"假设可交易余额 1000 USDT，stake_amount=400，max_open_trades=3。\n\n机器人会开 2 单，最后一单因余额不足 400 USDT 无法开仓。\n\n可通过 amend_last_stake_amount 设为 True，使机器人自动将最后一单金额降为可用余额。\n\n如上例：\n\n交易1：400 USDT\n\n交易2：400 USDT\n\n交易3：200 USDT\n\nCaution\n\n仅在\n\n静态交易金额下生效，\n\n动态交易金额会自动平均分配余额。\n\nCaution\n\n最小最后一单金额可通过 last_stake_amount_min_ratio 配置，默认 0.5（50%），即最小为 stake_amount * 0.5，避免过小金额被交易所拒绝。","type":"content","url":"/configuration#id-4","position":31},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"静态交易金额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#static-stake-amount","position":32},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"静态交易金额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"content":"stake_amount 静态配置每笔交易的金额。\n\n最小配置值为 0.0001，但请查阅交易所最低限额。\n\n该设置与 max_open_trades 联用，最大持仓为 stake_amount * max_open_trades。\n\n如配置 max_open_trades=3、stake_amount=0.05，则最多用 (0.05 BTC x 3) = 0.15 BTC。\n\nCaution\n\n此设置遵循\n\n可交易余额配置。","type":"content","url":"/configuration#static-stake-amount","position":33},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"动态交易金额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#dynamic-stake-amount","position":34},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"动态交易金额","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"content":"也可用动态交易金额，自动将可用余额按允许交易数平均分配。\n\n配置方法：stake_amount=\"unlimited\"，建议同时设 tradable_balance_ratio=0.99（99%），以预留手续费。\n\n此时每笔交易金额为：currency_balance / (max_open_trades - current_open_trades)\n\n如需让机器人用尽所有 stake_currency（减去 tradable_balance_ratio），配置如下：\"stake_amount\" : \"unlimited\",\n\"tradable_balance_ratio\": 0.99,\n\n复利\n\n此配置可根据机器人表现动态调整持仓（亏损时减少，盈利时增加），实现复利。\n\nDry-Run 模式下\n\nDry-Run、回测或超参优化时，stake_amount : \"unlimited\", 会用 dry_run_wallet 作为初始余额模拟。请合理设置 dry_run_wallet，否则可能模拟极大或极小金额，不符合实际。","type":"content","url":"/configuration#dynamic-stake-amount","position":35},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"动态交易金额与持仓调整","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#id-5","position":36},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"动态交易金额与持仓调整","lvl4":"每笔交易的金额配置","lvl3":"配置参数","lvl2":"配置机器人"},"content":"若需在无限持仓下用持仓调整，需在策略中实现 custom_stake_amount，返回合适的金额。\n\n典型值为建议金额的 25%-50%，具体视策略和预留资金而定。\n\n如持仓调整假设可加仓 2 次，则应预留 66.6667% 作为缓冲。\n\n如假设可加仓 1 次且金额为原始的 3 倍，则 custom_stake_amount 应返回建议金额的 25%，其余 75% 预留。\n\n","type":"content","url":"/configuration#id-5","position":37},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#id-6","position":38},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"常规订单的价格可以通过参数结构 entry_pricing（用于交易入场）和 exit_pricing（用于交易出场）来控制。\n价格总是在下单前通过查询交易所行情或使用订单簿数据获取。\n\nNote\n\nFreqtrade 使用的订单簿数据是从交易所通过 ccxt 的 fetch_order_book() 函数获取的，通常是 L2 聚合订单簿的数据，而行情数据是由 ccxt 的 fetch_ticker()/fetch_tickers() 函数返回的结构。更多详情请参考 ccxt 库\n\n文档。\n\n使用市价单\n\n使用市价单时，请阅读\n\n市价单定价部分。","type":"content","url":"/configuration#id-6","position":39},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#entry-price","position":40},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"","type":"content","url":"/configuration#entry-price","position":41},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"入场价格方向","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#id-7","position":42},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"入场价格方向","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"配置设置 entry_pricing.price_side 定义了机器人在买入时查看订单簿的哪一侧。\n\n以下显示了一个订单簿：...\n103\n102\n101  # ask（卖价）\n-------------当前价差\n99   # bid（买价）\n98\n97\n...\n\n如果 entry_pricing.price_side 设置为 \"bid\"，则机器人将使用 99 作为入场价格。相应地，如果 entry_pricing.price_side 设置为 \"ask\"，则机器人将使用 101 作为入场价格。\n\n根据订单方向（做多/做空），这会导致不同的结果。因此，我们建议在此配置中使用 \"same\" 或 \"other\"。\n这将产生以下价格矩阵：\n\n方向\n\n订单\n\n设置\n\n价格\n\n是否跨越价差\n\n做多\n\n买入\n\nask\n\n101\n\n是\n\n做多\n\n买入\n\nbid\n\n99\n\n否\n\n做多\n\n买入\n\nsame\n\n99\n\n否\n\n做多\n\n买入\n\nother\n\n101\n\n是\n\n做空\n\n卖出\n\nask\n\n101\n\n否\n\n做空\n\n卖出\n\nbid\n\n99\n\n是\n\n做空\n\n卖出\n\nsame\n\n101\n\n否\n\n做空\n\n卖出\n\nother\n\n99\n\n是\n\n使用订单簿的另一侧通常可以保证订单更快成交，但机器人也可能支付比必要更多的费用。\n即使使用限价买单，也很可能适用吃单费用而不是挂单费用。\n此外，价差\"另一侧\"的价格高于订单簿中\"买价\"侧的价格，因此订单行为类似于市价单（但有一个最高价格限制）。","type":"content","url":"/configuration#id-7","position":43},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"启用订单簿的入场价格","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#entry-price-with-orderbook-enabled","position":44},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"启用订单簿的入场价格","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"当启用订单簿入场（entry_pricing.use_order_book=True）时，Freqtrade 从订单簿获取 entry_pricing.order_book_top 个条目，并使用在配置的订单簿侧（entry_pricing.price_side）上指定的条目作为入场价格。1 表示订单簿中最顶部的条目，2 将使用订单簿中的第二个条目，以此类推。","type":"content","url":"/configuration#entry-price-with-orderbook-enabled","position":45},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"未启用订单簿的入场价格","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#entry-price-without-orderbook-enabled","position":46},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"未启用订单簿的入场价格","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"以下部分使用 side 作为配置的 entry_pricing.price_side（默认为 \"same\"）。\n\n当不使用订单簿（entry_pricing.use_order_book=False）时，如果最佳 side 价格低于行情中的 last 成交价，Freqtrade 将使用行情中的最佳 side 价格。否则（当 side 价格高于 last 价格时），它将基于 entry_pricing.price_last_balance 计算 side 和 last 价格之间的比率。\n\nentry_pricing.price_last_balance 配置参数控制这一点。值为 0.0 将使用 side 价格，而 1.0 将使用 last 价格，介于两者之间的值将在卖价和最后价格之间进行插值。","type":"content","url":"/configuration#entry-price-without-orderbook-enabled","position":47},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"检查市场深度","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#check-depth-of-market","position":48},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"检查市场深度","lvl4":"入场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"当启用检查市场深度（entry_pricing.check_depth_of_market.enabled=True）时，入场信号将基于订单簿每侧的深度（所有数量的总和）进行过滤。\n\n订单簿 bid（买入）侧深度除以订单簿 ask（卖出）侧深度，然后将得到的差值与该参数的值 entry_pricing.check_depth_of_market.bids_to_ask_delta 进行比较。只有当订单簿差值大于或等于配置的差值时，才会执行入场订单。\n\nNote\n\n差值小于 1 意味着 ask（卖出）订单簿侧深度大于 bid（买入）订单簿侧的深度，而大于 1 的值意味着相反（买入侧深度高于卖出侧深度）。","type":"content","url":"/configuration#check-depth-of-market","position":49},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"出场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#exit-price-side","position":50},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"出场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"","type":"content","url":"/configuration#exit-price-side","position":51},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"出场价格方向","lvl4":"出场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#id-8","position":52},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"出场价格方向","lvl4":"出场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"配置设置 exit_pricing.price_side 定义了机器人在出场时查看价差的哪一侧。\n\n以下显示了一个订单簿：...\n103\n102\n101  # ask（卖价）\n-------------当前价差\n99   # bid（买价）\n98\n97\n...\n\n如果 exit_pricing.price_side 设置为 \"ask\"，则机器人将使用 101 作为出场价格。相应地，如果 exit_pricing.price_side 设置为 \"bid\"，则机器人将使用 99 作为出场价格。\n\n根据订单方向（做多/做空），这会导致不同的结果。因此，我们建议在此配置中使用 \"same\" 或 \"other\"。\n这将产生以下价格矩阵：\n\n方向\n\n订单\n\n设置\n\n价格\n\n是否跨越价差\n\n做多\n\n卖出\n\nask\n\n101\n\n否\n\n做多\n\n卖出\n\nbid\n\n99\n\n是\n\n做多\n\n卖出\n\nsame\n\n101\n\n否\n\n做多\n\n卖出\n\nother\n\n99\n\n是\n\n做空\n\n买入\n\nask\n\n101\n\n是\n\n做空\n\n买入\n\nbid\n\n99\n\n否\n\n做空\n\n买入\n\nsame\n\n99\n\n否\n\n做空\n\n买入\n\nother\n\n101\n\n是","type":"content","url":"/configuration#id-8","position":53},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"启用订单簿的出场价格","lvl4":"出场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#exit-price-without-orderbook-enabled","position":54},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"启用订单簿的出场价格","lvl4":"出场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"当启用订单簿出场（exit_pricing.use_order_book=True）时，Freqtrade 从订单簿获取 exit_pricing.order_book_top 个条目，并使用在配置的订单簿侧（exit_pricing.price_side）上指定的条目作为交易出场价格。\n\n1 表示订单簿中最顶部的条目，2 将使用订单簿中的第二个条目，以此类推。","type":"content","url":"/configuration#exit-price-without-orderbook-enabled","position":55},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"未启用订单簿的出场价格","lvl4":"出场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#id-9","position":56},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"未启用订单簿的出场价格","lvl4":"出场价格","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"以下部分使用 side 作为配置的 exit_pricing.price_side（默认为 \"ask\"）。\n\n当不使用订单簿（exit_pricing.use_order_book=False）时，如果最佳 side 价格高于行情中的 last 成交价，Freqtrade 将使用行情中的最佳 side 价格。否则（当 side 价格低于 last 价格时），它将基于 exit_pricing.price_last_balance 计算 side 和 last 价格之间的比率。\n\nexit_pricing.price_last_balance 配置参数控制这一点。值为 0.0 将使用 side 价格，而 1.0 将使用最后价格，介于两者之间的值将在 side 和最后价格之间进行插值。","type":"content","url":"/configuration#id-9","position":57},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"市价单定价","lvl3":"订单使用的价格","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#market-order-pricing","position":58},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"市价单定价","lvl3":"订单使用的价格","lvl2":"配置机器人"},"content":"使用市价单时，价格应配置为使用订单簿的\"正确\"一侧，以允许真实的价格检测。\n假设入场和出场都使用市价单，必须使用类似以下的配置：  \"order_types\": {\n    \"entry\": \"market\",\n    \"exit\": \"market\"\n    // ...\n  },\n  \"entry_pricing\": {\n    \"price_side\": \"other\",\n    // ...\n  },\n  \"exit_pricing\":{\n    \"price_side\": \"other\",\n    // ...\n  },\n\n显然，如果只有一方使用限价单，则可以使用不同的价格组合。","type":"content","url":"/configuration#market-order-pricing","position":59},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#id-10","position":60},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"","type":"content","url":"/configuration#id-10","position":61},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"理解 minimal_roi","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#understand-minimal-roi","position":62},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"理解 minimal_roi","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"minimal_roi 配置参数为 JSON 对象，键为分钟数，值为最小收益率（比例）。\n示例：\"minimal_roi\": {\n    \"40\": 0.0,    # 40 分钟后只要不亏损就退出\n    \"30\": 0.01,   # 30 分钟后至少盈利 1% 就退出\n    \"20\": 0.02,   # 20 分钟后至少盈利 2% 就退出\n    \"0\":  0.04    # 立即盈利 4% 就退出\n},\n\n大多数策略文件已包含最优的 minimal_roi。\n该参数可在策略或配置文件中设置，配置文件优先。\n若两者都未设置，则默认 1000%（{\"0\": 10}），即除非盈利 1000% 否则不退出。\n\n强制定时退出的特殊用法\n\nROI 设为 \"<N>\": -1 时，机器人会在 N 分钟后强制退出，无论盈亏。","type":"content","url":"/configuration#understand-minimal-roi","position":63},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"理解 force_entry_enable","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#id-force-entry-enable","position":64},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"理解 force_entry_enable","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"force_entry_enable 配置参数允许通过 Telegram 和 REST API 使用强制建仓命令（/forcelong、/forceshort）。\n出于安全考虑，默认禁用，启用时 freqtrade 会在启动时警告。\n例如，发送 /forceenter ETH/BTC，机器人会买入该交易对并持有，直到出现常规退出信号（ROI、止损、/forceexit）。\n\n部分策略下此功能风险较大，请谨慎使用。\n\n详见 \n\ntelegram 文档。","type":"content","url":"/configuration#id-force-entry-enable","position":65},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"忽略过期 K 线","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#id-k","position":66},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"忽略过期 K 线","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"使用较大周期（如 1h）且 max_open_trades 较低时，最后一根 K 线可能在交易位空出时被处理。此时买入信号可能已过最佳时机。\n\n可通过设置 ignore_buying_expired_candle_after，指定买入信号过期秒数。\n\n如策略用 1h 周期，只想在新 K 线前 5 分钟买入，可如下配置：  {\n    //...\n    \"ignore_buying_expired_candle_after\": 300,\n    // ...\n  }\n\nCaution\n\n该设置会在每根新 K 线时重置，无法防止信号在第 2、3 根 K 线继续执行。建议用\"触发\"型买入信号，仅在一根 K 线内有效。","type":"content","url":"/configuration#id-k","position":67},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"理解 order_types","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#understand-order-types","position":68},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"理解 order_types","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"order_types 配置参数将操作（entry、exit、stoploss、emergency_exit、force_exit、force_entry）映射为订单类型（market、limit 等），并配置止损是否在交易所上、止损更新间隔（秒）。\n\n可用限价单买入、限价单卖出、用市价单止损。\n也可设置止损\"在交易所\"，即买单成交后立即挂止损单。\n\n配置文件中的 order_types 会整体覆盖策略中的设置，因此需在同一处配置完整字典。\n\n若配置了该项，以下 4 个值（entry、exit、stoploss、stoploss_on_exchange）必须全部存在，否则机器人无法启动。\n\n更多关于（emergency_exit、force_exit、force_entry、stoploss_on_exchange、stoploss_on_exchange_interval、stoploss_on_exchange_limit_ratio）请见\n\n止损文档。\n\n策略示例：order_types = {\n    \"entry\": \"limit\",\n    \"exit\": \"limit\",\n    \"emergency_exit\": \"market\",\n    \"force_entry\": \"market\",\n    \"force_exit\": \"market\",\n    \"stoploss\": \"market\",\n    \"stoploss_on_exchange\": False,\n    \"stoploss_on_exchange_interval\": 60,\n    \"stoploss_on_exchange_limit_ratio\": 0.99,\n}\n\n配置文件示例：\"order_types\": {\n    \"entry\": \"limit\",\n    \"exit\": \"limit\",\n    \"emergency_exit\": \"market\",\n    \"force_entry\": \"market\",\n    \"force_exit\": \"market\",\n    \"stoploss\": \"market\",\n    \"stoploss_on_exchange\": false,\n    \"stoploss_on_exchange_interval\": 60\n}\n\n市价单支持\n\n并非所有交易所都支持市价单。\n若不支持，会提示：\"Exchange <yourexchange> does not support market orders.\"，机器人将拒绝启动。\n\n使用市价单\n\n使用市价单时请仔细阅读\n\n市价单定价章节。\n\n止损在交易所\n\norder_types.stoploss_on_exchange_interval 非必填，若不确定请勿更改。更多止损机制详见\n\n止损文档。\n\n若启用 order_types.stoploss_on_exchange，且手动取消了交易所止损单，机器人会重新挂单。\n\norder_types.stoploss_on_exchange 失败\n\n若止损在交易所挂单失败，将触发\"紧急退出\"，默认用市价单平仓。可通过 order_types 字典中的 emergency_exit 更改，但不建议。","type":"content","url":"/configuration#understand-order-types","position":69},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"理解 order_time_in_force","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#understand-order-time-in-force","position":70},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"理解 order_time_in_force","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"order_time_in_force 配置参数定义订单在交易所的执行策略。\n\n常见有：\n\nGTC（Good Till Canceled）：\n\n默认策略，订单会一直保留，直到被用户取消。可全部或部分成交，未成交部分会一直挂单。\n\nFOK（Fill Or Kill）：\n\n若订单未能立即且全部成交，则被交易所取消。\n\nIOC（Immediate Or Canceled）：\n\n与 FOK 类似，但可部分成交，未成交部分自动取消。\n\nPO（Post only）：\n\n仅作为挂单，若不能作为挂单则取消。即订单必须至少挂在盘口一段时间。\n\n请查看\n\n交易所文档了解您的交易所支持的有效时间值。","type":"content","url":"/configuration#understand-order-time-in-force","position":71},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"time_in_force 配置","lvl4":"理解 order_time_in_force","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#time-in-force","position":72},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"time_in_force 配置","lvl4":"理解 order_time_in_force","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"order_time_in_force 参数为字典，包含买入和卖出的策略。\n可在配置文件或策略中设置。\n\n配置文件中设置的值会覆盖策略中的值，遵循常规的\n\n优先级规则。\n\n可选值：GTC（默认）、FOK、IOC。\"order_time_in_force\": {\n    \"entry\": \"GTC\",\n    \"exit\": \"GTC\"\n},\n\nWarning请勿随意更改，除非你了解不同策略对交易所的影响。","type":"content","url":"/configuration#time-in-force","position":73},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"法币转换","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#id-11","position":74},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"法币转换","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"Freqtrade 使用 Coingecko API 将币值转换为法币，用于 Telegram 报告。\n法币可通过配置文件的 fiat_display_currency 设置。\n\n移除 fiat_display_currency 可跳过 coingecko 初始化，不会显示法币转换，对机器人运行无影响。","type":"content","url":"/configuration#id-11","position":75},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"法币可用值","lvl4":"法币转换","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#what-values-can-be-used-for-fiat-display-currency","position":76},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"法币可用值","lvl4":"法币转换","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"fiat_display_currency 配置参数设置 Telegram 报告中币转法币的基准货币。\n\n可用值：\"AUD\", \"BRL\", \"CAD\", \"CHF\", \"CLP\", \"CNY\", \n\"CZK\", \"DKK\", \"EUR\", \"GBP\", \"HKD\", \"HUF\", \n\"IDR\", \"ILS\", \"INR\", \"JPY\", \"KRW\", \"MXN\", \n\"MYR\", \"NOK\", \"NZD\", \"PHP\", \"PKR\", \"PLN\", \n\"RUB\", \"SEK\", \"SGD\", \"THB\", \"TRY\", \"TWD\", \n\"ZAR\", \"USD\"\n\n除法币外，还支持部分加密货币：\"BTC\", \"ETH\", \"XRP\", \"LTC\", \"BCH\", \"BNB\"","type":"content","url":"/configuration#what-values-can-be-used-for-fiat-display-currency","position":77},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"Coingecko 限流问题","lvl4":"法币转换","lvl3":"更多配置细节","lvl2":"配置机器人"},"type":"lvl5","url":"/configuration#coingecko","position":78},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl5":"Coingecko 限流问题","lvl4":"法币转换","lvl3":"更多配置细节","lvl2":"配置机器人"},"content":"部分 IP 段下，coingecko 限流严重。此时可在配置中添加 coingecko API key。{\n    \"fiat_display_currency\": \"USD\",\n    \"coingecko\": {\n        \"api_key\": \"your-api\",\n        \"is_demo\": true\n    }\n}\n\nFreqtrade 支持 Coingecko Demo 和 Pro API key。\n\nCoingecko API key 非机器人运行必需，仅用于 Telegram 报告中的币转法币，通常无需 key 也可用。","type":"content","url":"/configuration#coingecko","position":79},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"使用交易所 Websocket","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#consuming-exchange-websockets","position":80},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"使用交易所 Websocket","lvl2":"配置机器人"},"content":"Freqtrade 可通过 \n\nccxt.pro 消费交易所 websocket。\n\nFreqtrade 旨在确保数据始终可用。\n\n若 websocket 连接失败（或被禁用），机器人会回退到 REST API。\n\n如遇到疑似 websocket 问题，可通过 exchange.enable_ws 关闭（默认 true）。\"exchange\": {\n    // ...\n    \"enable_ws\": false,\n    // ...\n}\n\n如需使用代理，详见\n\n代理配置。\n\n“逐步上线”\n\n正在逐步上线，确保机器人稳定。目前仅限 ohlcv 数据流，且仅支持部分交易所，后续会持续增加。","type":"content","url":"/configuration#consuming-exchange-websockets","position":81},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"使用 Dry-run 模式","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#id-dry-run","position":82},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"使用 Dry-run 模式","lvl2":"配置机器人"},"content":"建议先用 Dry-run 模式运行机器人，观察策略表现。\n\nDry-run 模式下不会动用真实资金，仅做实时模拟。\n\n编辑 config.json 配置文件。\n\n将 dry_run 设为 true，并指定 db_url。\"dry_run\": true,\n\"db_url\": \"sqlite:///tradesv3.dryrun.sqlite\",\n\n移除交易所 API key 和 secret（可填空或假值）：\"exchange\": {\n    \"name\": \"binance\",\n    \"key\": \"key\",\n    \"secret\": \"secret\",\n    //\"password\": \"\", // 可选，并非所有交易所都需要\n    // ...\n}\n\nDry-run 模式下满意后，可切换到生产模式。\n\nCaution\n\nDry-run 模式下有模拟钱包，起始资金为 dry_run_wallet（默认 1000）。","type":"content","url":"/configuration#id-dry-run","position":83},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"Dry-run 注意事项","lvl3":"使用 Dry-run 模式","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#dry-run","position":84},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"Dry-run 注意事项","lvl3":"使用 Dry-run 模式","lvl2":"配置机器人"},"content":"API key 可选。仅执行只读操作（不会更改账户状态）。\n\n钱包（/balance）基于 dry_run_wallet 模拟。\n\n订单为模拟，不会提交到交易所。\n\n市价单按下单时盘口成交量成交，最大滑点 5%。\n\n限价单在价格达到目标时成交，或按 unfilledtimeout 超时设置取消。\n\n限价单若与市价差超 1%，会转为市价单立即成交。\n\n配合 stoploss_on_exchange 时，假定止损价成交。\n\n未成交订单（非已成交交易，后者存数据库）在机器人重启后仍保留，假定未成交。","type":"content","url":"/configuration#dry-run","position":85},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"切换到生产模式","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#id-12","position":86},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"切换到生产模式","lvl2":"配置机器人"},"content":"生产模式下，机器人会动用真实资金。请谨慎操作，错误策略可能导致全部亏损。\n\n切换到生产模式时，建议使用不同/全新数据库，避免 dry-run 交易影响真实资金和统计。","type":"content","url":"/configuration#id-12","position":87},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"配置交易所账户","lvl3":"切换到生产模式","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#id-13","position":88},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"配置交易所账户","lvl3":"切换到生产模式","lvl2":"配置机器人"},"content":"需在交易所网站创建 API Key（通常为 key 和 secret，部分还需 password），并填入配置文件或通过 freqtrade new-config 命令输入。\nAPI Key 仅在实盘（生产模式）下必需，dry-run 模式可填空。","type":"content","url":"/configuration#id-13","position":89},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"切换到生产模式","lvl3":"切换到生产模式","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#id-14","position":90},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"切换到生产模式","lvl3":"切换到生产模式","lvl2":"配置机器人"},"content":"编辑 config.json 文件。\n\n将 dry_run 设为 false，并根据需要调整数据库 URL：\"dry_run\": false,\n\n填入交易所 API key（可用假 key）：{\n    \"exchange\": {\n        \"name\": \"binance\",\n        \"key\": \"af8ddd35195e9dc500b9a6f799f6f5c93d89193b\",\n        \"secret\": \"08a9dc6db3d7b53e1acebd9275677f4b0a04f1a5\",\n        //\"password\": \"\", // 可选，并非所有交易所都需要\n        // ...\n    }\n    //...\n}\n\n请务必阅读\n\n交易所文档，了解各交易所的特殊配置。\n\n保护密钥\n\n建议用第二个配置文件存放 API key。\n\n将上述片段放入新文件（如 config-private.json），主配置文件仅存通用设置。\n\n启动时用 freqtrade trade --config user_data/config.json --config user_data/config-private.json <...> 加载密钥。\n\n切勿与他人分享私密配置文件或交易所密钥！","type":"content","url":"/configuration#id-14","position":91},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"Freqtrade 使用代理","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#using-a-proxy-with-freqtrade","position":92},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"Freqtrade 使用代理","lvl2":"配置机器人"},"content":"如需为 freqtrade 配置代理，导出 HTTP_PROXY 和 HTTPS_PROXY 环境变量：export HTTP_PROXY=\"http://addr:port\"\nexport HTTPS_PROXY=\"http://addr:port\"\nfreqtrade","type":"content","url":"/configuration#using-a-proxy-with-freqtrade","position":93},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"代理交易所请求","lvl3":"Freqtrade 使用代理","lvl2":"配置机器人"},"type":"lvl4","url":"/configuration#id-15","position":94},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl4":"代理交易所请求","lvl3":"Freqtrade 使用代理","lvl2":"配置机器人"},"content":"如需为交易所连接配置代理，需在 ccxt 配置中指定：{ \n  \"exchange\": {\n    \"ccxt_config\": {\n      \"httpsProxy\": \"http://addr:port\",\n      \"wsProxy\": \"http://addr:port\",\n    }\n  }\n}\n\n更多代理类型请查阅 \n\nccxt 代理文档。","type":"content","url":"/configuration#id-15","position":95},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"下一步","lvl2":"配置机器人"},"type":"lvl3","url":"/configuration#id-16","position":96},{"hierarchy":{"lvl1":"配置 Freqtrade","lvl3":"下一步","lvl2":"配置机器人"},"content":"现在你已配置好 config.json，下一步请\n\n启动机器人。","type":"content","url":"/configuration#id-16","position":97},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据"},"type":"lvl1","url":"/data-analysis","position":0},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据"},"content":"你可以使用 Jupyter 笔记本轻松分析回测结果和交易历史。初始化用户目录后，示例笔记本位于 user_data/notebooks/，可通过命令 freqtrade create-userdir --userdir user_data 创建。","type":"content","url":"/data-analysis","position":1},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl2":"使用 Docker 快速开始"},"type":"lvl2","url":"/data-analysis#id-docker","position":2},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl2":"使用 Docker 快速开始"},"content":"Freqtrade 提供了一个 docker-compose 文件，可以启动 jupyter lab 服务器。\n你可以通过以下命令运行该服务器：docker compose -f docker/docker-compose-jupyter.yml up\n\n这将创建一个运行 jupyter lab 的 docker 容器，可通过 https://127.0.0.1:8888/lab 访问。\n请使用启动后控制台中打印的链接进行简化登录。\n\n更多信息请参见 \n\n使用 Docker 进行数据分析 部分。","type":"content","url":"/data-analysis#id-docker","position":3},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"专业提示","lvl2":"使用 Docker 快速开始"},"type":"lvl3","url":"/data-analysis#id","position":4},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"专业提示","lvl2":"使用 Docker 快速开始"},"content":"参见 \n\njupyter.org 获取使用说明。\n\n不要忘记在 conda 或 venv 环境中启动 Jupyter notebook 服务器，或使用 \n\nnb_conda_kernels*\n\n在使用前请复制示例笔记本，这样你的更改不会在下次 freqtrade 更新时被覆盖。","type":"content","url":"/data-analysis#id","position":5},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"使用系统级 Jupyter 安装的虚拟环境","lvl2":"使用 Docker 快速开始"},"type":"lvl3","url":"/data-analysis#id-jupyter","position":6},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"使用系统级 Jupyter 安装的虚拟环境","lvl2":"使用 Docker 快速开始"},"content":"有时你可能希望使用系统范围安装的 Jupyter notebook，并使用虚拟环境中的 jupyter 内核。\n这样可以避免在系统中多次安装完整的 jupyter 套件，并便于在不同任务（freqtrade/其他分析任务）间切换。\n\n为此，首先激活你的虚拟环境并运行以下命令：# 激活虚拟环境\nsource .venv/bin/activate\n\npip install ipykernel\nipython kernel install --user --name=freqtrade\n# 重启 jupyter（lab / notebook）\n# 在 notebook 中选择内核 \"freqtrade\"\n\nNote\n\n本节仅为完整性提供，Freqtrade 团队不会为此类设置提供完整支持，并建议直接在虚拟环境中安装 Jupyter，因为这是启动 jupyter 笔记本最简单的方式。如需帮助，请参阅 \n\nProject Jupyter 的 \n\n文档 或 \n\n帮助渠道。\n\nWarning\n\n某些任务在笔记本中并不适用。例如，任何使用异步执行的内容在 Jupyter 中都可能有问题。此外，freqtrade 的主要入口是 shell cli，因此在笔记本中直接用纯 python 运行会绕过一些为辅助函数提供必要对象和参数的参数。你可能需要手动设置这些值或创建所需对象。","type":"content","url":"/data-analysis#id-jupyter","position":7},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl2":"推荐工作流"},"type":"lvl2","url":"/data-analysis#id-1","position":8},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl2":"推荐工作流"},"content":"任务\n\n工具\n\n机器人操作\n\nCLI\n\n重复性任务\n\nShell 脚本\n\n数据分析与可视化\n\nNotebook\n\n使用 CLI 进行：\n\n下载历史数据\n\n运行回测\n\n使用实时数据运行\n\n导出结果\n\n将这些操作收集到 shell 脚本中：\n\n保存带参数的复杂命令\n\n执行多步操作\n\n自动化测试策略和准备分析数据\n\n使用 notebook 进行：\n\n数据可视化\n\n数据处理和绘图以获得洞见","type":"content","url":"/data-analysis#id-1","position":9},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl2":"示例实用代码片段"},"type":"lvl2","url":"/data-analysis#id-2","position":10},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl2":"示例实用代码片段"},"content":"","type":"content","url":"/data-analysis#id-2","position":11},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"切换目录到项目根目录","lvl2":"示例实用代码片段"},"type":"lvl3","url":"/data-analysis#id-3","position":12},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"切换目录到项目根目录","lvl2":"示例实用代码片段"},"content":"Jupyter 笔记本默认在 notebook 目录下执行。以下代码片段可搜索项目根目录，使相对路径保持一致。import os\nfrom pathlib import Path\n\n# 切换目录\n# 修改此单元格以确保输出显示正确路径。\n# 所有路径均应相对于单元格输出显示的项目根目录定义\nproject_root = \"somedir/freqtrade\"\ni=0\ntry:\n    os.chdir(project_root)\n    assert Path('LICENSE').is_file()\nexcept:\n    while i<4 and (not Path('LICENSE').is_file()):\n        os.chdir(Path(Path.cwd(), '../'))\n        i+=1\n    project_root = Path.cwd()\nprint(Path.cwd())","type":"content","url":"/data-analysis#id-3","position":13},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"加载多个配置文件","lvl2":"示例实用代码片段"},"type":"lvl3","url":"/data-analysis#id-4","position":14},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"加载多个配置文件","lvl2":"示例实用代码片段"},"content":"此方法可用于检查传入多个配置文件的结果。\n这也会完整运行配置初始化，因此配置会被完全初始化，可传递给其他方法。import json\nfrom freqtrade.configuration import Configuration\n\n# 从多个文件加载配置\nconfig = Configuration.from_files([\"config1.json\", \"config2.json\"])\n\n# 显示内存中的配置\nprint(json.dumps(config['original_config'], indent=2))\n\n对于交互式环境，建议额外指定 user_data_dir 并最后传入，这样你无需在运行机器人时切换目录。\n最好避免使用相对路径，因为 notebook 的存储位置就是起始目录，除非你已切换目录。{\n    \"user_data_dir\": \"~/.freqtrade/\"\n}","type":"content","url":"/data-analysis#id-4","position":15},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"更多数据分析文档","lvl2":"示例实用代码片段"},"type":"lvl3","url":"/data-analysis#id-5","position":16},{"hierarchy":{"lvl1":"使用 Jupyter 笔记本分析机器人数据","lvl3":"更多数据分析文档","lvl2":"示例实用代码片段"},"content":"策略调试 - 也可作为 Jupyter 笔记本使用（user_data/notebooks/strategy_analysis_example.ipynb）\n\n绘图\n\n标签分析\n\n如果你有更好的数据分析方法，欢迎提交 issue 或 Pull Request 来完善本文档。","type":"content","url":"/data-analysis#id-5","position":17},{"hierarchy":{"lvl1":"数据下载"},"type":"lvl1","url":"/data-download","position":0},{"hierarchy":{"lvl1":"数据下载"},"content":"","type":"content","url":"/data-download","position":1},{"hierarchy":{"lvl1":"数据下载","lvl2":"获取回测和超参优化所需数据"},"type":"lvl2","url":"/data-download#id","position":2},{"hierarchy":{"lvl1":"数据下载","lvl2":"获取回测和超参优化所需数据"},"content":"要下载回测和超参优化所需的 K 线（OHLCV）数据，请使用 freqtrade download-data 命令。\n\n如果未指定额外参数，freqtrade 会默认下载最近 30 天的 “1m” 和 “5m” 周期数据。\n交易所和交易对将从 config.json 读取（如用 -c/--config 指定）。\n未提供配置时，--exchange 参数为必填。\n\n你可以用相对时间范围（如 --days 20）或绝对起始点（如 --timerange 20200101-）。增量下载建议用相对方式。\n\n提示：更新已有数据\n\n如果你已在数据目录有回测数据，想要补齐到今天，freqtrade 会自动计算缺失区间，仅下载缺失部分，无需指定 --days 或 --timerange。原有数据会保留，仅补全缺失部分。\n\n如果你新增了没有数据的新交易对，建议用 --new-pairs-days xx，新对会下载指定天数，旧对只补缺失部分。","type":"content","url":"/data-download#id","position":3},{"hierarchy":{"lvl1":"数据下载","lvl3":"用法","lvl2":"获取回测和超参优化所需数据"},"type":"lvl3","url":"/data-download#id-1","position":4},{"hierarchy":{"lvl1":"数据下载","lvl3":"用法","lvl2":"获取回测和超参优化所需数据"},"content":"用法: freqtrade download-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH]\n                               [-p PAIRS [PAIRS ...]] [--pairs-file FILE]\n                               [--days INT] [--new-pairs-days INT]\n                               [--include-inactive-pairs]\n                               [--timerange TIMERANGE] [--dl-trades]\n                               [--convert] [--exchange EXCHANGE]\n                               [-t TIMEFRAMES [TIMEFRAMES ...]] [--erase]\n                               [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                               [--data-format-trades {json,jsongz,feather,parquet}]\n                               [--trading-mode {spot,margin,futures}]\n                               [--prepend]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --pairs-file FILE     包含交易对列表的文件。优先于 --pairs 或配置文件中的 pairs。\n  --days INT            下载指定天数的数据。\n  --new-pairs-days INT  为新交易对下载指定天数的数据。\n                        默认：`None`。\n  --include-inactive-pairs\n                        也下载非活跃交易对的数据。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --dl-trades           下载成交单数据而不是 OHLCV 数据。\n  --convert             将下载的成交单数据转换为 OHLCV 数据。仅在与 `--dl-trades` 结合使用时适用。\n                        对于没有历史 OHLCV 的交易所（如 Kraken）会自动转换。\n                        如果未提供此参数，请使用 `trades-to-ohlcv` 命令手动转换。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        指定要下载的行情数据。空格分隔的列表。\n                        默认：`1m 5m`。\n  --erase               清除所选交易所/交易对/时间框架的所有现有数据。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --data-format-trades {json,jsongz,feather,parquet}\n                        下载的成交单数据的存储格式。（默认：`feather`）。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n  --prepend             允许数据前置。（数据追加被禁用）\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n\n下载某个计价货币下所有交易对\n\n通常你会想下载某个计价货币下的所有交易对。可用如下简写：\n\nfreqtrade download-data --exchange binance --pairs \".*/USDT\" <...>。pairs 字符串会自动扩展为交易所所有活跃对。\n\n如需下载已下架对的数据，加 --include-inactive-pairs。\n\n启动期\n\ndownload-data 与策略无关。建议一次性下载大量数据，后续逐步补充。\n\n因此，download-data 不关心策略定义的 “startup-period”。如需从特定时间点开始回测，请自行多下载一些天数（注意 startup period）。","type":"content","url":"/data-download#id-1","position":5},{"hierarchy":{"lvl1":"数据下载","lvl3":"开始下载","lvl2":"获取回测和超参优化所需数据"},"type":"lvl3","url":"/data-download#id-2","position":6},{"hierarchy":{"lvl1":"数据下载","lvl3":"开始下载","lvl2":"获取回测和超参优化所需数据"},"content":"最简单的命令（假设有 config.json）：freqtrade download-data --exchange binance\n\n这会为配置文件中定义的所有交易对下载历史K线（OHLCV）数据。\n\n也可直接指定交易对：freqtrade download-data --exchange binance --pairs ETH/USDT XRP/USDT BTC/USDT\n\n或用正则（如下载所有 USDT 对）：freqtrade download-data --exchange binance --pairs \".*/USDT\"","type":"content","url":"/data-download#id-2","position":7},{"hierarchy":{"lvl1":"数据下载","lvl3":"其他说明","lvl2":"获取回测和超参优化所需数据"},"type":"lvl3","url":"/data-download#id-3","position":8},{"hierarchy":{"lvl1":"数据下载","lvl3":"其他说明","lvl2":"获取回测和超参优化所需数据"},"content":"如需用非默认目录，添加 --datadir user_data/data/some_directory。\n\n如需更换下载数据的交易所，用 --exchange <exchange> 或指定不同配置文件。\n\n如需用其他目录下的 pairs.json，用 --pairs-file some_other_dir/pairs.json。\n\n只下载 10 天历史K线，用 --days 10（默认 30 天）。\n\n从固定起点下载历史K线，用 --timerange 20200101-，即从 2020-01-01 起下载全部数据。\n\n如已有部分数据，起点会被忽略，仅补齐缺失部分。\n\n用 --timeframes 指定下载哪些周期的K线，默认 --timeframes 1m 5m。\n\n用 -c/--config 可用配置文件中定义的交易所、周期和交易对。此时用 config 中的白名单作为下载对列表，无需 pairs.json。可与大多数其他参数组合。\n\n权限拒绝错误\n\n如果你的 user_data 目录是 docker 创建的，可能会遇到如下错误：cp: cannot create regular file 'user_data/data/binance/pairs.json': Permission denied\n\n可用如下命令修复权限：sudo chown -R $UID:$GID user_data","type":"content","url":"/data-download#id-3","position":9},{"hierarchy":{"lvl1":"数据下载","lvl3":"下载当前区间前的更多数据","lvl2":"获取回测和超参优化所需数据"},"type":"lvl3","url":"/data-download#id-4","position":10},{"hierarchy":{"lvl1":"数据下载","lvl3":"下载当前区间前的更多数据","lvl2":"获取回测和超参优化所需数据"},"content":"假设你已用 --timerange 20220101- 下载了 2022 年全部数据，现在想补充更早的数据。\n可用 --prepend 配合 --timerange（指定结束日期）实现：freqtrade download-data --exchange binance --pairs ETH/USDT XRP/USDT BTC/USDT --prepend --timerange 20210101-20220101\n\nCaution\n\n此模式下，如已有数据，freqtrade 会自动用现有数据的起点作为结束日期，忽略你指定的 end-date。","type":"content","url":"/data-download#id-4","position":11},{"hierarchy":{"lvl1":"数据下载","lvl3":"数据格式","lvl2":"获取回测和超参优化所需数据"},"type":"lvl3","url":"/data-download#id-5","position":12},{"hierarchy":{"lvl1":"数据下载","lvl3":"数据格式","lvl2":"获取回测和超参优化所需数据"},"content":"Freqtrade 目前支持以下数据格式：\n\nfeather - 基于 Apache Arrow 的数据格式\n\njson - 纯文本 json 文件\n\njsongz - gzip 压缩的 json 文件\n\nparquet - 列式存储（仅 OHLCV）\n\n默认情况下，OHLCV 和成交数据都用 feather 格式存储。\n\n可通过命令行参数 --data-format-ohlcv 和 --data-format-trades 更改。\n如需永久生效，建议在配置文件中添加：    // ...\n    \"dataformat_ohlcv\": \"feather\",\n    \"dataformat_trades\": \"feather\",\n    // ...\n\n如下载时更改了默认格式，配置文件中的 dataformat_ohlcv 和 dataformat_trades 也需同步修改。\n\nCaution\n\n可用 \n\nconvert-data 和 \n\nconvert-trade-data 命令在不同格式间转换。","type":"content","url":"/data-download#id-5","position":13},{"hierarchy":{"lvl1":"数据下载","lvl4":"数据格式对比","lvl3":"数据格式","lvl2":"获取回测和超参优化所需数据"},"type":"lvl4","url":"/data-download#id-6","position":14},{"hierarchy":{"lvl1":"数据下载","lvl4":"数据格式对比","lvl3":"数据格式","lvl2":"获取回测和超参优化所需数据"},"content":"以下对比基于如下数据，使用 linux time 命令：Found 6 pair / timeframe combinations.\n+----------+-------------+--------+---------------------+---------------------+\n|     Pair |   Timeframe |   Type |                From |                  To |\n|----------+-------------+--------+---------------------+---------------------|\n| BTC/USDT |          5m |   spot | 2017-08-17 04:00:00 | 2022-09-13 19:25:00 |\n| ETH/USDT |          1m |   spot | 2017-08-17 04:00:00 | 2022-09-13 19:26:00 |\n| BTC/USDT |          1m |   spot | 2017-08-17 04:00:00 | 2022-09-13 19:30:00 |\n| XRP/USDT |          5m |   spot | 2018-05-04 08:10:00 | 2022-09-13 19:15:00 |\n| XRP/USDT |          1m |   spot | 2018-05-04 08:11:00 | 2022-09-13 19:22:00 |\n| ETH/USDT |          5m |   spot | 2017-08-17 04:00:00 | 2022-09-13 19:20:00 |\n+----------+-------------+--------+---------------------+---------------------+\n\n用如下命令测试读取速度：time freqtrade list-data --show-timerange --data-format-ohlcv <dataformat>\n\n格式\n\n大小\n\n读取时间\n\nfeather\n\n72Mb\n\n3.5s\n\njson\n\n149Mb\n\n25.6s\n\njsongz\n\n39Mb\n\n27s\n\nparquet\n\n83Mb\n\n3.8s\n\n大小为上述 BTC/USDT 1m spot 区间。\n\n推荐用默认 feather 或 parquet 格式，兼顾性能和体积。","type":"content","url":"/data-download#id-6","position":15},{"hierarchy":{"lvl1":"数据下载","lvl3":"交易对文件","lvl2":"获取回测和超参优化所需数据"},"type":"lvl3","url":"/data-download#id-7","position":16},{"hierarchy":{"lvl1":"数据下载","lvl3":"交易对文件","lvl2":"获取回测和超参优化所需数据"},"content":"除了 config.json 的白名单，也可用 pairs.json 文件。\n如用 Binance：\n\n创建目录 user_data/data/binance，将 pairs.json 放入该目录\n\n编辑 pairs.json，写入你关注的交易对mkdir -p user_data/data/binance\ntouch user_data/data/binance/pairs.json\n\npairs.json 格式为简单 json 列表。\n可混用不同计价货币，仅用于下载。[\n    \"ETH/BTC\",\n    \"ETH/USDT\",\n    \"BTC/USDT\",\n    \"XRP/ETH\"\n]\n\nCaution\n\n仅在未加载配置文件时（自动或用 --config）才用 pairs.json。\n\n可用 --pairs-file pairs.json 强制使用，但推荐用配置文件中的白名单（exchange.pair_whitelist 或 pairs）。","type":"content","url":"/data-download#id-7","position":17},{"hierarchy":{"lvl1":"数据下载","lvl2":"子命令 convert data"},"type":"lvl2","url":"/data-download#id-convert-data","position":18},{"hierarchy":{"lvl1":"数据下载","lvl2":"子命令 convert data"},"content":"用法: freqtrade convert-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                              [-c PATH] [-d PATH] [--userdir PATH]\n                              [-p PAIRS [PAIRS ...]] --format-from\n                              {json,jsongz,feather,parquet} --format-to\n                              {json,jsongz,feather,parquet} [--erase]\n                              [--exchange EXCHANGE]\n                              [-t TIMEFRAMES [TIMEFRAMES ...]]\n                              [--trading-mode {spot,margin,futures}]\n                              [--candle-types {spot,futures,mark,index,premiumIndex,funding_rate} [{spot,futures,mark,index,premiumIndex,funding_rate} ...]]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --format-from {json,jsongz,feather,parquet}\n                        数据转换的源格式。\n  --format-to {json,jsongz,feather,parquet}\n                        数据转换的目标格式。\n  --erase               清除所选交易所/交易对/时间框架的所有现有数据。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        指定要下载的行情数据。空格分隔的列表。\n                        默认：`1m 5m`。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n  --candle-types {spot,futures,mark,index,premiumIndex,funding_rate} [{spot,futures,mark,index,premiumIndex,funding_rate} ...]\n                        选择要转换的K线类型。默认为所有可用类型。\n\nCommon arguments:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n","type":"content","url":"/data-download#id-convert-data","position":19},{"hierarchy":{"lvl1":"数据下载","lvl3":"数据格式转换示例","lvl2":"子命令 convert data"},"type":"lvl3","url":"/data-download#id-8","position":20},{"hierarchy":{"lvl1":"数据下载","lvl3":"数据格式转换示例","lvl2":"子命令 convert data"},"content":"如下命令会将 ~/.freqtrade/data/binance 下所有K线（OHLCV）数据从 json 转为 jsongz，并删除原 json 文件（--erase 参数）：freqtrade convert-data --format-from json --format-to jsongz --datadir ~/.freqtrade/data/binance -t 5m 15m --erase","type":"content","url":"/data-download#id-8","position":21},{"hierarchy":{"lvl1":"数据下载","lvl2":"子命令 convert trade data"},"type":"lvl2","url":"/data-download#id-convert-trade-data","position":22},{"hierarchy":{"lvl1":"数据下载","lvl2":"子命令 convert trade data"},"content":"用法: freqtrade convert-trade-data [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-p PAIRS [PAIRS ...]] --format-from\n                                    {json,jsongz,feather,parquet,kraken_csv}\n                                    --format-to {json,jsongz,feather,parquet}\n                                    [--erase] [--exchange EXCHANGE]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --format-from {json,jsongz,feather,parquet,kraken_csv}\n                        数据转换的源格式。\n  --format-to {json,jsongz,feather,parquet}\n                        数据转换的目标格式。\n  --erase               清除所选交易所/交易对/时间框架的所有现有数据。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/data-download#id-convert-trade-data","position":23},{"hierarchy":{"lvl1":"数据下载","lvl3":"成交数据转换示例","lvl2":"子命令 convert trade data"},"type":"lvl3","url":"/data-download#id-9","position":24},{"hierarchy":{"lvl1":"数据下载","lvl3":"成交数据转换示例","lvl2":"子命令 convert trade data"},"content":"如下命令会将 ~/.freqtrade/data/kraken 下所有成交数据从 jsongz 转为 json，并删除原 jsongz 文件（--erase 参数）：freqtrade convert-trade-data --format-from jsongz --format-to json --datadir ~/.freqtrade/data/kraken --erase","type":"content","url":"/data-download#id-9","position":25},{"hierarchy":{"lvl1":"数据下载","lvl2":"子命令 trades to ohlcv"},"type":"lvl2","url":"/data-download#id-trades-to-ohlcv","position":26},{"hierarchy":{"lvl1":"数据下载","lvl2":"子命令 trades to ohlcv"},"content":"如需用 --dl-trades（仅 kraken）下载数据，最后一步需将成交数据转为K线数据。\n本命令可让你为更多周期重复此步骤，无需重新下载。\n\n用法: freqtrade trades-to-ohlcv [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [-p PAIRS [PAIRS ...]]\n                                 [-t TIMEFRAMES [TIMEFRAMES ...]]\n                                 [--exchange EXCHANGE]\n                                 [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                 [--data-format-trades {json,jsongz,feather,parquet}]\n                                 [--trading-mode {spot,margin,futures}]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限定命令仅针对这些交易对。以空格分隔。\n  -t TIMEFRAMES [TIMEFRAMES ...], --timeframes TIMEFRAMES [TIMEFRAMES ...]\n                        指定要下载的 K 线周期。以空格分隔的列表。默认：`1m 5m`。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的 K 线（OHLCV）数据的存储格式。（默认：`feather`）。\n  --data-format-trades {json,jsongz,feather,parquet}\n                        下载的成交数据的存储格式。（默认：`feather`）。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/data-download#id-trades-to-ohlcv","position":27},{"hierarchy":{"lvl1":"数据下载","lvl3":"trade-to-ohlcv 转换示例","lvl2":"子命令 trades to ohlcv"},"type":"lvl3","url":"/data-download#trade-to-ohlcv","position":28},{"hierarchy":{"lvl1":"数据下载","lvl3":"trade-to-ohlcv 转换示例","lvl2":"子命令 trades to ohlcv"},"content":"freqtrade trades-to-ohlcv --exchange kraken -t 5m 1h 1d --pairs BTC/EUR ETH/EUR","type":"content","url":"/data-download#trade-to-ohlcv","position":29},{"hierarchy":{"lvl1":"数据下载","lvl2":"子命令 list-data"},"type":"lvl2","url":"/data-download#id-list-data","position":30},{"hierarchy":{"lvl1":"数据下载","lvl2":"子命令 list-data"},"content":"可用 list-data 子命令查看已下载数据。\n\n用法: freqtrade list-data [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                           [-c PATH] [-d PATH] [--userdir PATH]\n                           [--exchange EXCHANGE]\n                           [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                           [--data-format-trades {json,jsongz,feather,parquet}]\n                           [--trades] [-p PAIRS [PAIRS ...]]\n                           [--trading-mode {spot,margin,futures}]\n                           [--show-timerange]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --data-format-trades {json,jsongz,feather,parquet}\n                        下载的成交单数据的存储格式。（默认：`feather`）。\n  --trades              针对成交单数据而非 OHLCV 数据进行操作。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n  --show-timerange      显示可用数据的时间范围（可能需要较长时间计算）。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/data-download#id-list-data","position":31},{"hierarchy":{"lvl1":"数据下载","lvl3":"list-data 示例","lvl2":"子命令 list-data"},"type":"lvl3","url":"/data-download#list-data","position":32},{"hierarchy":{"lvl1":"数据下载","lvl3":"list-data 示例","lvl2":"子命令 list-data"},"content":"> freqtrade list-data --userdir ~/.freqtrade/user_data/\n\n              Found 33 pair / timeframe combinations.\n┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━┓\n┃          Pair ┃                                 Timeframe ┃ Type ┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━┩\n│       ADA/BTC │     5m, 15m, 30m, 1h, 2h, 4h, 6h, 12h, 1d │ spot │\n│       ADA/ETH │     5m, 15m, 30m, 1h, 2h, 4h, 6h, 12h, 1d │ spot │\n│       ETH/BTC │     5m, 15m, 30m, 1h, 2h, 4h, 6h, 12h, 1d │ spot │\n│      ETH/USDT │                  5m, 15m, 30m, 1h, 2h, 4h │ spot │\n└───────────────┴───────────────────────────────────────────┴──────┘\n\n\n显示所有成交数据及时间区间：> freqtrade list-data --show --trades\n                     Found trades data for 1 pair.                     \n┏━━━━━━━━━┳━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓\n┃    Pair ┃ Type ┃                From ┃                  To ┃ Trades ┃\n┡━━━━━━━━━╇━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩\n│ XRP/ETH │ spot │ 2019-10-11 00:00:11 │ 2019-10-13 11:19:28 │  12477 │\n└─────────┴──────┴─────────────────────┴─────────────────────┴────────┘\n","type":"content","url":"/data-download#list-data","position":33},{"hierarchy":{"lvl1":"数据下载","lvl2":"成交（tick）数据"},"type":"lvl2","url":"/data-download#id-tick","position":34},{"hierarchy":{"lvl1":"数据下载","lvl2":"成交（tick）数据"},"content":"默认情况下，download-data 子命令下载 K 线（OHLCV）数据。大多数交易所也支持通过 API 下载历史成交数据。\n如需多个周期，成交数据只需下载一次，后续可本地重采样。\n\n因数据量大，默认用 feather 格式存储，文件名为 <pair>-trades.feather（如 ETH_BTC-trades.feather）。支持增量模式，如每周用 --days 8 下载一次即可。\n\n如需此模式，只需加 --dl-trades。此时会切换为下载成交数据。\n如加 --convert，则会自动重采样并覆盖已有 OHLCV 数据。\n\n请勿随意使用\n\n除非你用 kraken，否则不建议用此方式（kraken 不提供历史 OHLCV 数据）。\n其他交易所直接下载 OHLCV 更快。\n\nkraken 用户\n\nkraken 用户请先阅读\n\n此处。\n\n示例：freqtrade download-data --exchange kraken --pairs XRP/EUR ETH/EUR --days 20 --dl-trades\n\nCaution\n\n虽然此方法用异步调用，但因需依次请求，速度较慢。","type":"content","url":"/data-download#id-tick","position":35},{"hierarchy":{"lvl1":"数据下载","lvl2":"下一步"},"type":"lvl2","url":"/data-download#id-10","position":36},{"hierarchy":{"lvl1":"数据下载","lvl2":"下一步"},"content":"恭喜，你已下载好数据，可以\n\n开始回测你的策略了。","type":"content","url":"/data-download#id-10","position":37},{"hierarchy":{"lvl1":"已弃用功能"},"type":"lvl1","url":"/deprecated","position":0},{"hierarchy":{"lvl1":"已弃用功能"},"content":"本页描述了被开发团队声明为\"已弃用（DEPRECATED）\"且不再受支持的命令行参数、配置参数和机器人功能。请避免在你的配置中使用这些内容。","type":"content","url":"/deprecated","position":1},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"已移除的功能"},"type":"lvl2","url":"/deprecated#id","position":2},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"已移除的功能"},"content":"","type":"content","url":"/deprecated#id","position":3},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"--refresh-pairs-cached 命令行选项","lvl2":"已移除的功能"},"type":"lvl3","url":"/deprecated#id-refresh-pairs-cached","position":4},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"--refresh-pairs-cached 命令行选项","lvl2":"已移除的功能"},"content":"--refresh-pairs-cached 在回测、超参数优化和 edge 分析中用于刷新回测用的 K 线数据。由于该选项容易引起混淆，并且会拖慢回测速度（且并非回测本身的一部分），因此被单独拆分为 freqtrade 子命令 freqtrade download-data。\n\n该命令行选项于 2019.7-dev（develop 分支）弃用，并在 2019.9 移除。","type":"content","url":"/deprecated#id-refresh-pairs-cached","position":5},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"--dynamic-whitelist 命令行选项","lvl2":"已移除的功能"},"type":"lvl3","url":"/deprecated#id-dynamic-whitelist","position":6},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"--dynamic-whitelist 命令行选项","lvl2":"已移除的功能"},"content":"该命令行选项于 2018 年弃用，并在 freqtrade 2019.6-dev（develop 分支）和 2019.7 中移除。请参考 \n\n交易对列表。","type":"content","url":"/deprecated#id-dynamic-whitelist","position":7},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"--live 命令行选项","lvl2":"已移除的功能"},"type":"lvl3","url":"/deprecated#id-live","position":8},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"--live 命令行选项","lvl2":"已移除的功能"},"content":"--live 在回测中用于下载最新的 tick 数据进行回测。仅会下载最近 500 根 K 线，因此无法获得高质量的回测数据。已于 2019-7-dev（develop 分支）和 freqtrade 2019.8 中移除。","type":"content","url":"/deprecated#id-live","position":9},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"ticker_interval（现为 timeframe）","lvl2":"已移除的功能"},"type":"lvl3","url":"/deprecated#ticker-interval-timeframe","position":10},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"ticker_interval（现为 timeframe）","lvl2":"已移除的功能"},"content":"ticker_interval 术语自 2020.6 起弃用，推荐使用 timeframe，兼容性代码已于 2022.3 移除。","type":"content","url":"/deprecated#ticker-interval-timeframe","position":11},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"支持顺序运行多个 pairlist","lvl2":"已移除的功能"},"type":"lvl3","url":"/deprecated#id-pairlist","position":12},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"支持顺序运行多个 pairlist","lvl2":"已移除的功能"},"content":"原配置中的 \"pairlist\" 部分已被移除，现用 \"pairlists\"（列表）替代，可顺序指定多个 pairlist。\n\n旧的 \"pairlist\" 配置参数自 2019.11 弃用，并于 2020.4 移除。","type":"content","url":"/deprecated#id-pairlist","position":13},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"volume-pairlist 中 bidVolume 和 askVolume 的弃用","lvl2":"已移除的功能"},"type":"lvl3","url":"/deprecated#volume-pairlist-bidvolume-askvolume","position":14},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"volume-pairlist 中 bidVolume 和 askVolume 的弃用","lvl2":"已移除的功能"},"content":"由于只有 quoteVolume 可用于不同资产间的比较，其他选项（bidVolume, askVolume）自 2020.4 弃用，并于 2020.9 移除。","type":"content","url":"/deprecated#volume-pairlist-bidvolume-askvolume","position":15},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"使用 order book 步进设置卖出价格","lvl2":"已移除的功能"},"type":"lvl3","url":"/deprecated#id-order-book","position":16},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"使用 order book 步进设置卖出价格","lvl2":"已移除的功能"},"content":"使用 order_book_min 和 order_book_max 可步进 orderbook 并尝试寻找下一个 ROI 槽位，从而提前挂单卖出。但这会增加风险且无实际收益，为了可维护性已于 2021.7 移除。","type":"content","url":"/deprecated#id-order-book","position":17},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"旧版 Hyperopt 模式","lvl2":"已移除的功能"},"type":"lvl3","url":"/deprecated#id-hyperopt","position":18},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"旧版 Hyperopt 模式","lvl2":"已移除的功能"},"content":"使用独立 hyperopt 文件的方式自 2021.4 弃用，并于 2021.9 移除。请切换到新的\n\n参数化策略以获得新版 hyperopt 接口的优势。","type":"content","url":"/deprecated#id-hyperopt","position":19},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"V2 与 V3 策略变更"},"type":"lvl2","url":"/deprecated#v2-v3","position":20},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"V2 与 V3 策略变更"},"content":"2022.4 引入了逐仓合约/做空交易，这需要配置、策略接口等做出重大调整。\n\n我们已尽力保持对现有策略的兼容性，因此如果你只想继续在现货市场使用 freqtrade，无需做任何更改。未来我们可能会移除当前接口的支持，届时会提前公告并提供过渡期。\n\n请参考 \n\n策略迁移 指南，将你的策略迁移到新格式以使用新功能。","type":"content","url":"/deprecated#v2-v3","position":21},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"webhooks - 2022.4 相关变更","lvl2":"V2 与 V3 策略变更"},"type":"lvl3","url":"/deprecated#webhooks-2022-4","position":22},{"hierarchy":{"lvl1":"已弃用功能","lvl3":"webhooks - 2022.4 相关变更","lvl2":"V2 与 V3 策略变更"},"content":"","type":"content","url":"/deprecated#webhooks-2022-4","position":23},{"hierarchy":{"lvl1":"已弃用功能","lvl4":"buy_tag 重命名为 enter_tag","lvl3":"webhooks - 2022.4 相关变更","lvl2":"V2 与 V3 策略变更"},"type":"lvl4","url":"/deprecated#buy-tag-enter-tag","position":24},{"hierarchy":{"lvl1":"已弃用功能","lvl4":"buy_tag 重命名为 enter_tag","lvl3":"webhooks - 2022.4 相关变更","lvl2":"V2 与 V3 策略变更"},"content":"这只影响你的策略和可能的 webhook。我们会保留 1-2 个版本的兼容层（即 buy_tag 和 enter_tag 都可用），但 webhook 的相关支持随后会移除。","type":"content","url":"/deprecated#buy-tag-enter-tag","position":25},{"hierarchy":{"lvl1":"已弃用功能","lvl4":"命名变更","lvl3":"webhooks - 2022.4 相关变更","lvl2":"V2 与 V3 策略变更"},"type":"lvl4","url":"/deprecated#id-1","position":26},{"hierarchy":{"lvl1":"已弃用功能","lvl4":"命名变更","lvl3":"webhooks - 2022.4 相关变更","lvl2":"V2 与 V3 策略变更"},"content":"Webhook 术语由 “sell” 改为 “exit”，“buy” 改为 “entry”，并移除了 “webhook” 前缀。\n\nwebhookbuy, webhookentry -> entry\n\nwebhookbuyfill, webhookentryfill -> entry_fill\n\nwebhookbuycancel, webhookentrycancel -> entry_cancel\n\nwebhooksell, webhookexit -> exit\n\nwebhooksellfill, webhookexitfill -> exit_fill\n\nwebhooksellcancel, webhookexitcancel -> exit_cancel","type":"content","url":"/deprecated#id-1","position":27},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"移除 populate_any_indicators"},"type":"lvl2","url":"/deprecated#id-populate-any-indicators","position":28},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"移除 populate_any_indicators"},"content":"2023.3 版本移除了 populate_any_indicators，推荐使用特征工程和目标的分离方法。详情请阅读 \n\n迁移文档。","type":"content","url":"/deprecated#id-populate-any-indicators","position":29},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"移除配置中的 protections"},"type":"lvl2","url":"/deprecated#id-protections","position":30},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"移除配置中的 protections"},"content":"通过配置项 \"protections\": [], 设置保护措施的方式已于 2024.10 移除，相关弃用警告已持续三年。","type":"content","url":"/deprecated#id-protections","position":31},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"hdf5 数据存储"},"type":"lvl2","url":"/deprecated#hdf5","position":32},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"hdf5 数据存储"},"content":"hdf5 作为数据存储格式已于 2024.12 弃用，并在 2025.1 移除。建议切换到 feather 数据格式。\n\n请在升级前使用 \n\nconvert-data 子命令 将现有数据转换为受支持的格式。","type":"content","url":"/deprecated#hdf5","position":33},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"通过配置文件配置高级日志"},"type":"lvl2","url":"/deprecated#id-2","position":34},{"hierarchy":{"lvl1":"已弃用功能","lvl2":"通过配置文件配置高级日志"},"content":"通过 --logfile systemd 和 --logfile journald 分别配置 syslog 和 journald 的方式已于 2025.3 弃用。\n请改用基于配置文件的\n\n日志设置。","type":"content","url":"/deprecated#id-2","position":35},{"hierarchy":{"lvl1":"开发者指南"},"type":"lvl1","url":"/developer","position":0},{"hierarchy":{"lvl1":"开发者指南"},"content":"","type":"content","url":"/developer","position":1},{"hierarchy":{"lvl1":"开发者指南","lvl2":"开发帮助"},"type":"lvl2","url":"/developer#id","position":2},{"hierarchy":{"lvl1":"开发者指南","lvl2":"开发帮助"},"content":"本页面面向 Freqtrade 的开发者、想要为 Freqtrade 代码库或文档做出贡献的人，或者想要了解他们正在运行的应用程序源代码的人。\n\n我们欢迎所有贡献、错误报告、错误修复、文档改进、增强和想法。我们在 \n\nGitHub 上\n\n跟踪问题，并且在 \n\ndiscord 上有一个开发频道，你可以在那里提问。","type":"content","url":"/developer#id","position":3},{"hierarchy":{"lvl1":"开发者指南","lvl3":"文档","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-1","position":4},{"hierarchy":{"lvl1":"开发者指南","lvl3":"文档","lvl2":"开发帮助"},"content":"文档可在 \n\nhttps://​freqtrade​.io 获取，每个新功能 PR 都需要提供文档。\n\n文档的特殊字段（如注释框等）可以在\n\n这里找到。\n\n要在本地测试文档，请使用以下命令。pip install -r docs/requirements-docs.txt\nmkdocs serve\n\n这将启动一个本地服务器（通常在端口 8000 上），这样你就可以查看是否一切看起来都符合你的预期。","type":"content","url":"/developer#id-1","position":5},{"hierarchy":{"lvl1":"开发者指南","lvl3":"开发者设置","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-2","position":6},{"hierarchy":{"lvl1":"开发者指南","lvl3":"开发者设置","lvl2":"开发帮助"},"content":"要配置开发环境，你可以使用提供的 \n\nDevContainer，或者使用 setup.sh 脚本并在询问\"Do you want to install dependencies for dev [y/N]? “时回答\"y”。\n或者（例如，如果你的系统不受 \n\nsetup.sh 脚本支持），按照手动安装过程并运行 pip3 install -r requirements-dev.txt - 然后运行 pip3 install -e .[all]。\n\n这将安装开发所需的所有工具，包括 pytest、ruff、mypy 和 coveralls。\n\n然后通过运行 pre-commit install 安装 git hook 脚本，这样你的更改将在提交前在本地进行验证。\n这已经避免了很多等待 CI 的时间，因为一些基本的格式检查是在你的机器上本地完成的。\n\n在打开拉取请求之前，请熟悉我们的\n\n贡献指南。","type":"content","url":"/developer#id-2","position":7},{"hierarchy":{"lvl1":"开发者指南","lvl4":"Devcontainer 设置","lvl3":"开发者设置","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#devcontainer","position":8},{"hierarchy":{"lvl1":"开发者指南","lvl4":"Devcontainer 设置","lvl3":"开发者设置","lvl2":"开发帮助"},"content":"最快和最简单的方法是使用带有 Remote container 扩展的 \n\nVSCode。\n这使开发者能够启动机器人，而不需要在本地机器上安装任何 freqtrade 特定的依赖项。","type":"content","url":"/developer#devcontainer","position":9},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Devcontainer 依赖项","lvl4":"Devcontainer 设置","lvl3":"开发者设置","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#devcontainer-1","position":10},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Devcontainer 依赖项","lvl4":"Devcontainer 设置","lvl3":"开发者设置","lvl2":"开发帮助"},"content":"VSCode\n\ndocker\n\nRemote container 扩展文档\n\n有关 \n\nRemote container 扩展 的更多信息，最好查阅文档。","type":"content","url":"/developer#devcontainer-1","position":11},{"hierarchy":{"lvl1":"开发者指南","lvl4":"测试","lvl3":"开发者设置","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-3","position":12},{"hierarchy":{"lvl1":"开发者指南","lvl4":"测试","lvl3":"开发者设置","lvl2":"开发帮助"},"content":"新代码应该由基本的单元测试覆盖。根据功能的复杂性，审查者可能会要求更深入的单元测试。\n如有必要，Freqtrade 团队可以协助并提供编写良好测试的指导（但请不要期望有人为你编写测试）。","type":"content","url":"/developer#id-3","position":13},{"hierarchy":{"lvl1":"开发者指南","lvl5":"如何运行测试","lvl4":"测试","lvl3":"开发者设置","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#id-4","position":14},{"hierarchy":{"lvl1":"开发者指南","lvl5":"如何运行测试","lvl4":"测试","lvl3":"开发者设置","lvl2":"开发帮助"},"content":"在根文件夹中使用 pytest 运行所有可用的测试用例，并确认你的本地环境设置正确\n\n功能分支\n\n测试应该在 develop 和 stable 分支上通过。其他分支可能是正在进行的工作，测试可能尚未工作。","type":"content","url":"/developer#id-4","position":15},{"hierarchy":{"lvl1":"开发者指南","lvl5":"在测试中检查日志内容","lvl4":"测试","lvl3":"开发者设置","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#id-5","position":16},{"hierarchy":{"lvl1":"开发者指南","lvl5":"在测试中检查日志内容","lvl4":"测试","lvl3":"开发者设置","lvl2":"开发帮助"},"content":"Freqtrade 使用 2 种主要方法来检查测试中的日志内容，log_has() 和 log_has_re()（用于使用正则表达式检查，在动态日志消息的情况下）。\n这些可以从 conftest.py 导入，并可以在任何测试模块中使用。\n\n示例检查如下：from tests.conftest import log_has, log_has_re\n\ndef test_method_to_test(caplog):\n    method_to_test()\n\n    assert log_has(\"This event happened\", caplog)\n    # 检查带有尾随数字的正则表达式 ...\n    assert log_has_re(r\"This dynamic event happened and produced \\d+\", caplog)\n","type":"content","url":"/developer#id-5","position":17},{"hierarchy":{"lvl1":"开发者指南","lvl4":"调试配置","lvl3":"开发者设置","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-6","position":18},{"hierarchy":{"lvl1":"开发者指南","lvl4":"调试配置","lvl3":"开发者设置","lvl2":"开发帮助"},"content":"要调试 freqtrade，我们推荐使用 VSCode（带有 Python 扩展）和以下启动配置（位于 .vscode/launch.json）。\n细节显然会因设置而异 - 但这应该可以帮助你开始。{\n    \"name\": \"freqtrade trade\",\n    \"type\": \"debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"freqtrade\",\n    \"console\": \"integratedTerminal\",\n    \"args\": [\n        \"trade\",\n        // 可选：\n        // \"--userdir\", \"user_data\",\n        \"--strategy\", \n        \"MyAwesomeStrategy\",\n    ]\n},\n\n命令行参数可以在 \"args\" 数组中添加。\n此方法也可用于调试策略，通过在策略中设置断点。\n\nPycharm 也可以使用类似的设置 - 使用 freqtrade 作为模块名称，并将命令行参数设置为\"parameters\"。\n\n正确使用虚拟环境\n\n使用虚拟环境时（你应该这样做），确保你的编辑器使用正确的虚拟环境，以避免问题或\"未知导入\"错误。","type":"content","url":"/developer#id-6","position":19},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Vscode","lvl4":"调试配置","lvl3":"开发者设置","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#vscode","position":20},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Vscode","lvl4":"调试配置","lvl3":"开发者设置","lvl2":"开发帮助"},"content":"你可以使用命令\"Python: Select Interpreter\"在 VSCode 中选择正确的环境 - 这将显示扩展检测到的环境。\n如果你的环境未被检测到，你也可以手动选择路径。","type":"content","url":"/developer#vscode","position":21},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Pycharm","lvl4":"调试配置","lvl3":"开发者设置","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#pycharm","position":22},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Pycharm","lvl4":"调试配置","lvl3":"开发者设置","lvl2":"开发帮助"},"content":"在 pycharm 中，你可以在\"Run/Debug Configurations\"窗口中选择适当的环境。\n\n\n启动目录\n\n这假设你已经检出仓库，并且编辑器在仓库根级别启动（所以 pyproject.toml 在你的仓库的顶层）。","type":"content","url":"/developer#pycharm","position":23},{"hierarchy":{"lvl1":"开发者指南","lvl3":"错误处理","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-7","position":24},{"hierarchy":{"lvl1":"开发者指南","lvl3":"错误处理","lvl2":"开发帮助"},"content":"Freqtrade 异常都继承自 FreqtradeException。\n但是，这个通用错误类不应该直接使用。相反，存在多个专门的子异常。\n\n以下是异常继承层次结构的概述：+ FreqtradeException\n|\n+---+ OperationalException\n|   |\n|   +---+ ConfigurationError\n|\n+---+ DependencyException\n|   |\n|   +---+ PricingError\n|   |\n|   +---+ ExchangeError\n|       |\n|       +---+ TemporaryError\n|       |\n|       +---+ DDosProtection\n|       |\n|       +---+ InvalidOrderException\n|           |\n|           +---+ RetryableOrderError\n|           |\n|           +---+ InsufficientFundsError\n|\n+---+ StrategyError","type":"content","url":"/developer#id-7","position":25},{"hierarchy":{"lvl1":"开发者指南","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-8","position":26},{"hierarchy":{"lvl1":"开发者指南","lvl3":"插件","lvl2":"开发帮助"},"content":"","type":"content","url":"/developer#id-8","position":27},{"hierarchy":{"lvl1":"开发者指南","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-9","position":28},{"hierarchy":{"lvl1":"开发者指南","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"content":"你有一个想要尝试的新交易对选择算法的好主意？太好了。\n希望你也想将其贡献回上游。\n\n无论你的动机是什么 - 这应该能让你开始开发一个新的交易对列表处理器。\n\n首先，查看 \n\nVolumePairList 处理器，最好复制这个文件并命名为你的新交易对列表处理器。\n\n这是一个简单的处理器，但它可以作为开始开发的好例子。\n\n接下来，修改处理器的类名（最好与模块文件名保持一致）。\n\n基类提供了交易所实例（self._exchange）、交易对列表管理器（self._pairlistmanager），以及主配置（self._config）、交易对列表专用配置（self._pairlistconfig）和交易对列表中的绝对位置。        self._exchange = exchange\n        self._pairlistmanager = pairlistmanager\n        self._config = config\n        self._pairlistconfig = pairlistconfig\n        self._pairlist_pos = pairlist_pos\n\nTip\n\n别忘了在 constants.py 中的 AVAILABLE_PAIRLISTS 变量下注册你的交易对列表 - 否则它将不可选择。\n\n现在，让我们逐步了解需要操作的方法：","type":"content","url":"/developer#id-9","position":29},{"hierarchy":{"lvl1":"开发者指南","lvl5":"交易对列表配置","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#id-10","position":30},{"hierarchy":{"lvl1":"开发者指南","lvl5":"交易对列表配置","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"content":"交易对列表处理器链的配置在机器人配置文件的 \"pairlists\" 元素中完成，这是链中每个交易对列表处理器的配置参数数组。\n\n按照惯例，\"number_assets\" 用于指定要在交易对列表中保留的最大交易对数量。请遵循这一点以确保一致的用户体验。\n\n可以根据需要配置其他参数。例如，VolumePairList 使用 \"sort_key\" 来指定排序值 - 但请随意指定你的优秀算法成功和动态所需的任何内容。","type":"content","url":"/developer#id-10","position":31},{"hierarchy":{"lvl1":"开发者指南","lvl5":"short_desc","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#short-desc","position":32},{"hierarchy":{"lvl1":"开发者指南","lvl5":"short_desc","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"content":"返回用于 Telegram 消息的描述。\n\n这应该包含交易对列表处理器的名称，以及包含资产数量的简短描述。请遵循格式 \"PairlistName - top/bottom X pairs\"。","type":"content","url":"/developer#short-desc","position":33},{"hierarchy":{"lvl1":"开发者指南","lvl5":"gen_pairlist","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#gen-pairlist","position":34},{"hierarchy":{"lvl1":"开发者指南","lvl5":"gen_pairlist","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"content":"如果交易对列表处理器可以用作链中的主导交易对列表处理器，定义初始交易对列表，然后由链中的所有交易对列表处理器处理，则覆盖此方法。例如 StaticPairList 和 VolumePairList。\n\n这在机器人的每次迭代中调用（仅当交易对列表处理器位于第一个位置时）- 所以考虑为计算/网络密集型计算实现缓存。\n\n它必须返回结果交易对列表（然后可以传递给交易对列表处理器链）。\n\n验证是可选的，父类提供了 verify_blacklist(pairlist) 和 _whitelist_for_active_markets(pairlist) 来进行默认过滤。如果你将结果限制为特定数量的交易对，请使用此功能 - 这样最终结果不会比预期的短。","type":"content","url":"/developer#gen-pairlist","position":35},{"hierarchy":{"lvl1":"开发者指南","lvl5":"filter_pairlist","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#filter-pairlist","position":36},{"hierarchy":{"lvl1":"开发者指南","lvl5":"filter_pairlist","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"content":"此方法由交易对列表管理器为链中的每个交易对列表处理器调用。\n\n这在机器人的每次迭代中调用 - 所以考虑为计算/网络密集型计算实现缓存。\n\n它接收一个交易对列表（可以是之前交易对列表的结果）以及 tickers，这是 get_tickers() 的预获取版本。\n\n基类中的默认实现只是为交易对列表中的每个交易对调用 _validate_pair() 方法，但你可以覆盖它。所以你应该在交易对列表处理器中实现 _validate_pair() 或覆盖 filter_pairlist() 来做其他事情。\n\n如果被覆盖，它必须返回结果交易对列表（然后可以传递给链中的下一个交易对列表处理器）。\n\n验证是可选的，父类提供了 verify_blacklist(pairlist) 和 _whitelist_for_active_markets(pairlist) 来进行默认过滤。如果你将结果限制为特定数量的交易对，请使用此功能 - 这样最终结果不会比预期的短。\n\n在 VolumePairList 中，这实现了不同的排序方法，进行早期验证，因此只返回预期数量的交易对。","type":"content","url":"/developer#filter-pairlist","position":37},{"hierarchy":{"lvl1":"开发者指南","lvl6":"示例","lvl5":"filter_pairlist","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl6","url":"/developer#id-11","position":38},{"hierarchy":{"lvl1":"开发者指南","lvl6":"示例","lvl5":"filter_pairlist","lvl4":"交易对列表","lvl3":"插件","lvl2":"开发帮助"},"content":"    def filter_pairlist(self, pairlist: list[str], tickers: dict) -> List[str]:\n        # 生成动态白名单\n        pairs = self._calculate_pairlist(pairlist, tickers)\n        return pairs","type":"content","url":"/developer#id-11","position":39},{"hierarchy":{"lvl1":"开发者指南","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-12","position":40},{"hierarchy":{"lvl1":"开发者指南","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"content":"最好阅读\n\n保护文档以了解保护。\n本指南面向想要开发新保护的开发者。\n\n任何保护都不应该直接使用 datetime，而是使用提供的 date_now 变量进行日期计算。这保留了回测保护的能力。\n\n编写新的保护\n\n最好复制一个现有的保护作为好例子。","type":"content","url":"/developer#id-12","position":41},{"hierarchy":{"lvl1":"开发者指南","lvl5":"实现新的保护","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#id-13","position":42},{"hierarchy":{"lvl1":"开发者指南","lvl5":"实现新的保护","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"content":"所有保护实现都必须以 IProtection 作为父类。\n因此，它们必须实现以下方法：\n\nshort_desc()\n\nglobal_stop()\n\nstop_per_pair()。\n\nglobal_stop() 和 stop_per_pair() 必须返回一个 ProtectionReturn 对象，它包含：\n\nlock pair - 布尔值\n\nlock until - datetime - 交易对应该被锁定到什么时候（将向上取整到下一个新蜡烛）\n\nreason - 字符串，用于日志记录和数据库存储\n\nlock_side - long、short 或 ‘*’。\n\nuntil 部分应该使用提供的 calculate_lock_end() 方法计算。\n\n所有保护都应该使用 \"stop_duration\" / \"stop_duration_candles\" 来定义交易对（或所有交易对）应该被锁定多长时间。\n这个内容作为 self._stop_duration 提供给每个保护。\n\n如果你的保护需要回溯期，请使用 \"lookback_period\" / \"lockback_period_candles\" 以保持所有保护一致。","type":"content","url":"/developer#id-13","position":43},{"hierarchy":{"lvl1":"开发者指南","lvl5":"全局与本地停止","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#id-14","position":44},{"hierarchy":{"lvl1":"开发者指南","lvl5":"全局与本地停止","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"content":"保护可以有 2 种不同的方式来暂时停止交易：\n\n每个交易对（本地）\n\n所有交易对（全局）","type":"content","url":"/developer#id-14","position":45},{"hierarchy":{"lvl1":"开发者指南","lvl6":"保护 - 每个交易对","lvl5":"全局与本地停止","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl6","url":"/developer#id-15","position":46},{"hierarchy":{"lvl1":"开发者指南","lvl6":"保护 - 每个交易对","lvl5":"全局与本地停止","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"content":"实现每个交易对方法的保护必须设置 has_local_stop=True。\n每当交易关闭（出场订单完成）时，都会调用 stop_per_pair() 方法。","type":"content","url":"/developer#id-15","position":47},{"hierarchy":{"lvl1":"开发者指南","lvl6":"保护 - 全局保护","lvl5":"全局与本地停止","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl6","url":"/developer#id-16","position":48},{"hierarchy":{"lvl1":"开发者指南","lvl6":"保护 - 全局保护","lvl5":"全局与本地停止","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"content":"这些保护应该对所有交易对进行评估，因此也会锁定所有交易对的交易（称为全局交易对锁定）。\n全局保护必须设置 has_global_stop=True 才能被评估为全局停止。\n每当交易关闭（出场订单完成）时，都会调用 global_stop() 方法。","type":"content","url":"/developer#id-16","position":49},{"hierarchy":{"lvl1":"开发者指南","lvl6":"保护 - 计算锁定结束时间","lvl5":"全局与本地停止","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"type":"lvl6","url":"/developer#id-17","position":50},{"hierarchy":{"lvl1":"开发者指南","lvl6":"保护 - 计算锁定结束时间","lvl5":"全局与本地停止","lvl4":"保护","lvl3":"插件","lvl2":"开发帮助"},"content":"保护应该根据它考虑的最后一个交易计算锁定结束时间。\n这避免了在回溯期长于实际锁定期时重新锁定。\n\nIProtection 父类在 calculate_lock_end() 中为此提供了一个辅助方法。","type":"content","url":"/developer#id-17","position":51},{"hierarchy":{"lvl1":"开发者指南","lvl3":"实现新的交易所（进行中）","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-18","position":52},{"hierarchy":{"lvl1":"开发者指南","lvl3":"实现新的交易所（进行中）","lvl2":"开发帮助"},"content":"Note\n\n本节正在进行中，不是关于如何使用 Freqtrade 测试新交易所的完整指南。\n\nNote\n\n在运行以下任何测试之前，请确保使用最新版本的 CCXT。\n\n你可以通过在激活的虚拟环境中运行 pip install -U ccxt 来获取最新版本的 ccxt。\n\n这些测试不支持原生 docker，但是可用的 dev-container 将支持所有必需的操作和最终必要的更改。\n\n大多数 CCXT 支持的交易所应该可以直接工作。\n\n要快速测试交易所的公共端点，将你的交易所配置添加到 tests/exchange_online/conftest.py 并使用 pytest --longrun tests/exchange_online/test_ccxt_compat.py 运行这些测试。\n成功完成这些测试是一个良好的基础点（实际上这是一个要求），但这些并不能保证交易所功能正确，因为这只测试公共端点，而不是私有端点（如生成订单或类似操作）。\n\n还要尝试使用 freqtrade download-data 下载扩展时间范围（几个月）的数据，并验证数据是否正确下载（没有漏洞，实际下载了指定的时间范围）。\n\n这些是将交易所列为支持或社区测试（在主页上列出）的先决条件。\n以下是\"额外\"内容，这将使交易所更好（功能完整）- 但对于这两个类别中的任何一个都不是绝对必要的。\n\n要完成的额外测试/步骤：\n\n验证 fetch_ohlcv() 提供的数据 - 并最终为此交易所调整 ohlcv_candle_limit\n\n检查 L2 订单簿限制范围（API 文档）- 并根据需要设置\n\n检查余额是否正确显示（*）\n\n创建市价单（*）\n\n创建限价单（*）\n\n取消订单（*）\n\n完成交易（入场 + 出场）（*）\n\n比较交易所和机器人之间的结果计算\n\n确保正确应用费用（根据交易所检查数据库）\n\n（*）需要 API 密钥和交易所余额。","type":"content","url":"/developer#id-18","position":53},{"hierarchy":{"lvl1":"开发者指南","lvl4":"交易所止损","lvl3":"实现新的交易所（进行中）","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-19","position":54},{"hierarchy":{"lvl1":"开发者指南","lvl4":"交易所止损","lvl3":"实现新的交易所（进行中）","lvl2":"开发帮助"},"content":"检查新交易所是否通过其 API 支持交易所止损订单。\n\n由于 CCXT 尚未为交易所止损提供统一，我们需要自己实现交易所特定的参数。最好查看 binance.py 作为此实现的示例。你需要深入研究交易所 API 的文档，了解如何做到这一点。\n\nCCXT Issues 也可能提供很大帮助，因为其他人可能已经为他们的项目实现了类似的东西。","type":"content","url":"/developer#id-19","position":55},{"hierarchy":{"lvl1":"开发者指南","lvl4":"不完整的蜡烛","lvl3":"实现新的交易所（进行中）","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-20","position":56},{"hierarchy":{"lvl1":"开发者指南","lvl4":"不完整的蜡烛","lvl3":"实现新的交易所（进行中）","lvl2":"开发帮助"},"content":"在获取蜡烛（OHLCV）数据时，我们可能会得到不完整的蜡烛（取决于交易所）。\n为了演示这一点，我们将使用日线蜡烛（\"1d\"）来保持简单。\n我们查询 api（ct.fetch_ohlcv()）获取时间框架，并查看最后一个条目的日期。如果这个条目发生变化或显示\"不完整\"蜡烛的日期，那么我们应该删除它，因为有不完整的蜡烛是有问题的，因为指标假设只传递完整的蜡烛给它们，并且会生成大量错误的买入信号。因此，默认情况下，我们假设最后一个蜡烛不完整并将其删除。\n\n要检查新交易所的行为，你可以使用以下代码片段：import ccxt\nfrom datetime import datetime, timezone\nfrom freqtrade.data.converter import ohlcv_to_dataframe\nct = ccxt.binance()  # 使用你正在测试的交易所\ntimeframe = \"1d\"\npair = \"BTC/USDT\"  # 确保使用在该交易所存在的交易对！\nraw = ct.fetch_ohlcv(pair, timeframe=timeframe)\n\n# 转换为数据框\ndf1 = ohlcv_to_dataframe(raw, timeframe, pair=pair, drop_incomplete=False)\n\nprint(df1.tail(1))\nprint(datetime.now(timezone.utc))                         date      open      high       low     close  volume  \n499 2019-06-08 00:00:00+00:00  0.000007  0.000007  0.000007  0.000007   26264344.0  \n2019-06-09 12:30:27.873327\n\n输出将显示交易所的最后一个条目以及当前 UTC 日期。\n如果日期显示同一天，那么最后一个蜡烛可以被认为是不完整的，应该被删除（保持交易所类中的 \"ohlcv_partial_candle\" 设置不变 / True）。否则，将 \"ohlcv_partial_candle\" 设置为 False 以不删除蜡烛（如上例所示）。\n另一种方法是连续多次运行此命令，观察成交量是否变化（而日期保持不变）。","type":"content","url":"/developer#id-20","position":57},{"hierarchy":{"lvl1":"开发者指南","lvl4":"更新币安缓存的杠杆层级","lvl3":"实现新的交易所（进行中）","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-21","position":58},{"hierarchy":{"lvl1":"开发者指南","lvl4":"更新币安缓存的杠杆层级","lvl3":"实现新的交易所（进行中）","lvl2":"开发帮助"},"content":"更新杠杆层级应该定期进行 - 并且需要一个启用了期货的认证账户。import ccxt\nimport json\nfrom pathlib import Path\n\nexchange = ccxt.binance({\n    'apiKey': '<apikey>',\n    'secret': '<secret>',\n    'options': {'defaultType': 'swap'}\n    })\n_ = exchange.load_markets()\n\nlev_tiers = exchange.fetch_leverage_tiers()\n\n# 假设这是在仓库的根目录运行。\nfile = Path('freqtrade/exchange/binance_leverage_tiers.json')\njson.dump(dict(sorted(lev_tiers.items())), file.open('w'), indent=2)\n\n\n然后应该将此文件贡献给上游，这样其他人也可以从中受益。","type":"content","url":"/developer#id-21","position":59},{"hierarchy":{"lvl1":"开发者指南","lvl3":"更新示例笔记本","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-22","position":60},{"hierarchy":{"lvl1":"开发者指南","lvl3":"更新示例笔记本","lvl2":"开发帮助"},"content":"为了保持 jupyter 笔记本与文档一致，在更新示例笔记本后应该运行以下命令。jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace freqtrade/templates/strategy_analysis_example.ipynb\njupyter nbconvert --ClearOutputPreprocessor.enabled=True --to markdown freqtrade/templates/strategy_analysis_example.ipynb --stdout > docs/strategy_analysis_example.md","type":"content","url":"/developer#id-22","position":61},{"hierarchy":{"lvl1":"开发者指南","lvl3":"回测文档结果","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-23","position":62},{"hierarchy":{"lvl1":"开发者指南","lvl3":"回测文档结果","lvl2":"开发帮助"},"content":"要生成回测输出，请使用以下命令：# 假设为此输出创建专用的用户目录\nfreqtrade create-userdir --userdir user_data_bttest/\n# 设置 can_short = True\nsed -i \"s/can_short: bool = False/can_short: bool = True/\" user_data_bttest/strategies/sample_strategy.py\n\nfreqtrade download-data --timerange 20250625-20250801 --config tests/testdata/config.tests.usdt.json --userdir user_data_bttest/ -t 5m\n\nfreqtrade backtesting --config tests/testdata/config.tests.usdt.json -s SampleStrategy --userdir user_data_bttest/ --cache none --timerange 20250701-20250801","type":"content","url":"/developer#id-23","position":63},{"hierarchy":{"lvl1":"开发者指南","lvl3":"持续集成","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-24","position":64},{"hierarchy":{"lvl1":"开发者指南","lvl3":"持续集成","lvl2":"开发帮助"},"content":"本文档记录了一些为 CI 流水线做出的决定。\n\nCI 在所有操作系统变体上运行，Linux（ubuntu）、macOS 和 Windows。\n\nDocker 镜像为 stable 和 develop 分支构建，并作为多架构构建构建，通过同一标签支持多个平台。\n\n包含绘图依赖项的 Docker 镜像也可用，作为 stable_plot 和 develop_plot。\n\nDocker 镜像包含一个文件 /freqtrade/freqtrade_commit，其中包含此镜像所基于的提交。\n\n完整的 docker 镜像重建每周通过计划运行一次。\n\n部署在 ubuntu 上运行。\n\n所有测试必须通过才能将 PR 合并到 stable 或 develop。","type":"content","url":"/developer#id-24","position":65},{"hierarchy":{"lvl1":"开发者指南","lvl3":"创建发布","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-25","position":66},{"hierarchy":{"lvl1":"开发者指南","lvl3":"创建发布","lvl2":"开发帮助"},"content":"本文档的这一部分面向维护者，并展示了如何创建发布。","type":"content","url":"/developer#id-25","position":67},{"hierarchy":{"lvl1":"开发者指南","lvl4":"创建发布分支","lvl3":"创建发布","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-26","position":68},{"hierarchy":{"lvl1":"开发者指南","lvl4":"创建发布分支","lvl3":"创建发布","lvl2":"开发帮助"},"content":"Note\n\n确保 stable 分支是最新的！\n\n首先，选择一个大约一周前的提交（以不包括最新添加到发布中的内容）。# 创建新分支\ngit checkout -b new_release <commitid>\n\n确定在此提交和当前状态之间是否进行了关键的错误修复，并最终选择这些修复。\n\n将发布分支（stable）合并到此分支。\n\n编辑 freqtrade/__init__.py 并添加与当前日期匹配的版本（例如 2019.7 表示 2019 年 7 月）。次要版本可以是 2019.7.1，如果我们需要在该月进行第二次发布。版本号必须遵循 PEP0440 允许的版本，以避免推送到 pypi 时失败。\n\n提交这部分。\n\n将该分支推送到远程，并创建一个针对stable 分支的 PR。\n\n将 develop 版本更新为下一个版本，遵循模式 2019.8-dev。","type":"content","url":"/developer#id-26","position":69},{"hierarchy":{"lvl1":"开发者指南","lvl4":"从 git 提交创建更新日志","lvl3":"创建发布","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-git","position":70},{"hierarchy":{"lvl1":"开发者指南","lvl4":"从 git 提交创建更新日志","lvl3":"创建发布","lvl2":"开发帮助"},"content":"# 需要在合并/拉取该分支之前完成。\ngit log --oneline --no-decorate --no-merges stable..new_release\n\n为了保持发布日志简短，最好将完整的 git 更新日志包装在一个可折叠的详细信息部分中。<details>\n<summary>展开完整更新日志</summary>\n\n... 完整的 git 更新日志\n\n</details>","type":"content","url":"/developer#id-git","position":71},{"hierarchy":{"lvl1":"开发者指南","lvl4":"FreqUI 发布","lvl3":"创建发布","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#frequi","position":72},{"hierarchy":{"lvl1":"开发者指南","lvl4":"FreqUI 发布","lvl3":"创建发布","lvl2":"开发帮助"},"content":"如果 FreqUI 已大幅更新，确保在合并发布分支之前创建发布。\n确保在合并发布之前，发布上的 freqUI CI 已完成并通过。","type":"content","url":"/developer#frequi","position":73},{"hierarchy":{"lvl1":"开发者指南","lvl4":"创建 github 发布/标签","lvl3":"创建发布","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#id-github","position":74},{"hierarchy":{"lvl1":"开发者指南","lvl4":"创建 github 发布/标签","lvl3":"创建发布","lvl2":"开发帮助"},"content":"一旦针对 stable 的 PR 被合并（最好在合并后立即）：\n\n在 Github UI 中使用\"起草新发布\"按钮（发布子部分）。\n\n使用指定的版本号作为标签。\n\n使用\"stable\"作为参考（这一步在合并上述 PR 之后）。\n\n使用上述更新日志作为发布评论（作为代码块）。\n\n使用以下代码片段作为新发布\n\n发布模板\n\n","type":"content","url":"/developer#id-github","position":75},{"hierarchy":{"lvl1":"开发者指南","lvl3":"Highlighted changes","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#highlighted-changes","position":76},{"hierarchy":{"lvl1":"开发者指南","lvl3":"Highlighted changes","lvl2":"开发帮助"},"content":"...","type":"content","url":"/developer#highlighted-changes","position":77},{"hierarchy":{"lvl1":"开发者指南","lvl4":"How to update","lvl3":"Highlighted changes","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#how-to-update","position":78},{"hierarchy":{"lvl1":"开发者指南","lvl4":"How to update","lvl3":"Highlighted changes","lvl2":"开发帮助"},"content":"As always, you can update your bot using one of the following commands:","type":"content","url":"/developer#how-to-update","position":79},{"hierarchy":{"lvl1":"开发者指南","lvl5":"docker-compose","lvl4":"How to update","lvl3":"Highlighted changes","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#docker-compose","position":80},{"hierarchy":{"lvl1":"开发者指南","lvl5":"docker-compose","lvl4":"How to update","lvl3":"Highlighted changes","lvl2":"开发帮助"},"content":"docker-compose pull\ndocker-compose up -d","type":"content","url":"/developer#docker-compose","position":81},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Installation via setup script","lvl4":"How to update","lvl3":"Highlighted changes","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#installation-via-setup-script","position":82},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Installation via setup script","lvl4":"How to update","lvl3":"Highlighted changes","lvl2":"开发帮助"},"content":"# Deactivate venv and run \n./setup.sh --update","type":"content","url":"/developer#installation-via-setup-script","position":83},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Plain native installation","lvl4":"How to update","lvl3":"Highlighted changes","lvl2":"开发帮助"},"type":"lvl5","url":"/developer#plain-native-installation","position":84},{"hierarchy":{"lvl1":"开发者指南","lvl5":"Plain native installation","lvl4":"How to update","lvl3":"Highlighted changes","lvl2":"开发帮助"},"content":"git pull\npip install -U -r requirements.txt\n\nExpand full changelog<Paste your changelog here>","type":"content","url":"/developer#plain-native-installation","position":85},{"hierarchy":{"lvl1":"开发者指南","lvl3":"发布","lvl2":"开发帮助"},"type":"lvl3","url":"/developer#id-27","position":86},{"hierarchy":{"lvl1":"开发者指南","lvl3":"发布","lvl2":"开发帮助"},"content":"","type":"content","url":"/developer#id-27","position":87},{"hierarchy":{"lvl1":"开发者指南","lvl4":"pypi","lvl3":"发布","lvl2":"开发帮助"},"type":"lvl4","url":"/developer#pypi","position":88},{"hierarchy":{"lvl1":"开发者指南","lvl4":"pypi","lvl3":"发布","lvl2":"开发帮助"},"content":"手动发布\n\n此过程作为 Github Actions 的一部分自动化。\n不应该需要手动 pypi 推送。\n\n手动发布\n\n要手动创建 pypi 发布，请运行以下命令：\n\n额外要求：wheel、twine（用于上传）、具有适当权限的 pypi 账户。pip install -U build\npython -m build --sdist --wheel\n\n# 对于 pypi 测试（检查安装的某些更改是否有效）\ntwine upload --repository-url https://test.pypi.org/legacy/ dist/*\n\n# 对于生产：\ntwine upload dist/*\n\n请不要将非发布版本推送到生产/真实的 pypi 实例。","type":"content","url":"/developer#pypi","position":89},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade"},"type":"lvl1","url":"/docker-quickstart","position":0},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade"},"content":"本页介绍如何使用 Docker 运行机器人。它并非开箱即用，你仍需阅读文档并了解如何正确配置。","type":"content","url":"/docker-quickstart","position":1},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"安装 Docker"},"type":"lvl2","url":"/docker-quickstart#id-docker","position":2},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"安装 Docker"},"content":"首先为你的平台下载安装 Docker / Docker Desktop：\n\nMac\n\nWindows\n\nLinux\n\nDocker compose 安装\n\nFreqtrade 文档假定你使用 Docker Desktop（或 docker compose 插件）。\n\n虽然独立安装的 docker-compose 依然可用，但你需要将所有 docker compose 命令改为 docker-compose（如 docker compose up -d 改为 docker-compose up -d）。\n\nWindows 上的 Docker\n\n如果你刚在 Windows 系统上安装了 Docker，请务必重启系统，否则可能会遇到与 Docker 容器网络连接相关的莫名问题。\n\n要检查 Docker 和 Docker Compose 是否已正确安装，可以根据不同操作系统执行相应命令。以下是各主流操作系统（Linux、macOS、Windows）中的方法：","type":"content","url":"/docker-quickstart#id-docker","position":3},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"✅ 通用命令（适用于所有系统）"},"type":"lvl2","url":"/docker-quickstart#id","position":4},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"✅ 通用命令（适用于所有系统）"},"content":"# 检查 Docker 是否已安装及其版本\ndocker --version\n\n# 检查 Docker 是否正在运行\ndocker info\n\n# 检查 Docker Compose 是否已安装及其版本（新版本使用 docker compose 而不是 docker-compose）\ndocker compose version   # 推荐（适用于 Docker 20.10+）\n# 或旧版（如果你安装的是旧版 Compose）\ndocker-compose version\n\n","type":"content","url":"/docker-quickstart#id","position":5},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"🐧 Linux"},"type":"lvl2","url":"/docker-quickstart#id-linux","position":6},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"🐧 Linux"},"content":"检查 Docker 安装状态which docker\nsystemctl status docker  # 检查是否运行中（Ubuntu/CentOS）\n\n检查当前用户是否有权限运行 Dockerdocker run hello-world\n\n若出现 permission denied，可尝试加入 docker 用户组：sudo usermod -aG docker $USER\nnewgrp docker  # 立即生效，或重启\n\n检查 Docker Compose 安装路径which docker-compose\n\n","type":"content","url":"/docker-quickstart#id-linux","position":7},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"🍎 macOS"},"type":"lvl2","url":"/docker-quickstart#id-macos","position":8},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"🍎 macOS"},"content":"确认 Docker Desktop 是否安装\n\n可在 Launchpad 找到 Docker.app，确认是否运行。\n\n在菜单栏右上角看到 Docker 图标表示运行中。\n\n使用命令确认版本docker version\ndocker compose version\n\n","type":"content","url":"/docker-quickstart#id-macos","position":9},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"🪟 Windows"},"type":"lvl2","url":"/docker-quickstart#id-windows","position":10},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"🪟 Windows"},"content":"确认 Docker Desktop 是否已安装并运行\n\n可在任务栏右下角看到 Docker 图标。\n\n在 PowerShell 或 CMD 执行：docker version\ndocker compose version\n\nWSL2 模式\n\nWindows 上建议启用 WSL2 支持，可通过如下命令确认：wsl -l -v","type":"content","url":"/docker-quickstart#id-windows","position":11},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"🚨 如果未安装或失败怎么办？"},"type":"lvl2","url":"/docker-quickstart#id-1","position":12},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"🚨 如果未安装或失败怎么办？"},"content":"Docker 官方安装指南：\n\nhttps://​docs​.docker​.com​/get​-docker/\n\nCompose 安装：\n\nhttps://​docs​.docker​.com​/compose​/install/","type":"content","url":"/docker-quickstart#id-1","position":13},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl2","url":"/docker-quickstart#id-docker-freqtrade","position":14},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"使用 docker 运行 Freqtrade"},"content":"Freqtrade 在 \n\nDockerhub 上提供了官方 Docker 镜像，并有一份\n\ndocker compose 文件可直接使用。\n\n运行提示\n\n以下内容假设 docker 已安装并可被当前用户使用。\n\n所有命令均使用相对路径，需在包含 docker-compose.yml 文件的目录下执行。","type":"content","url":"/docker-quickstart#id-docker-freqtrade","position":15},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl3","url":"/docker-quickstart#docker-quick-start","position":16},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"content":"新建一个目录，并将 \n\ndocker-compose 文件下载到该目录。mkdir ft_userdata\ncd ft_userdata/\n\n# 从仓库下载 docker-compose 文件\ncurl https://raw.githubusercontent.com/freqtrade/freqtrade/stable/docker-compose.yml -o docker-compose.yml\n\n# 拉取 freqtrade 镜像\ndocker compose pull\n\n# 创建用户目录结构\ndocker compose run --rm freqtrade create-userdir --userdir user_data\n\n# 创建配置文件 - 需要交互式回答问题\ndocker compose run --rm freqtrade new-config --config user_data/config.json\n\n上述命令片段会创建一个名为 ft_userdata 的新目录，下载最新的 compose 文件并拉取 freqtrade 镜像。\n最后两步会创建带有 user_data 的目录，并根据你的选择（交互式）生成默认配置。\n\n如何编辑机器人配置？\n\n你可以随时编辑配置文件，配置文件位于 ft_userdata 目录下的 user_data/config.json。\n\n你也可以通过编辑 docker-compose.yml 文件中的 command 部分来更改策略和命令。","type":"content","url":"/docker-quickstart#docker-quick-start","position":17},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"添加自定义策略","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl4","url":"/docker-quickstart#id-2","position":18},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"添加自定义策略","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"content":"现在配置文件已生成在 user_data/config.json\n\n将自定义策略复制到 user_data/strategies/ 目录下\n\n在 docker-compose.yml 文件中添加策略类名\n\n默认会运行 SampleStrategy。\n\nSampleStrategy 只是演示用！\n\nSampleStrategy 仅供参考，帮助你构思自己的策略。\n\n请务必先回测你的策略，并用 dry-run 模式运行一段时间后再投入真实资金！\n\n有关策略开发的更多信息请参见\n\n策略文档。\n\n完成上述步骤后，你就可以启动机器人进入交易模式（Dry-run 或实盘，取决于你之前的选择）。docker compose up -d\n\n默认配置\n\n虽然生成的配置大多可用，但你仍需确认所有选项（如定价、交易对列表等）是否符合你的需求后再启动机器人。","type":"content","url":"/docker-quickstart#id-2","position":19},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"访问 UI","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl4","url":"/docker-quickstart#accessing-the-ui","position":20},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"访问 UI","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"content":"如果你在 new-config 步骤中选择启用了 FreqUI，则可通过 localhost:8080 端口访问 FreqUI。\n\n你可以在浏览器中输入 http://​localhost:8080 访问 UI。\n\n远程服务器上的 UI 访问\n\n如果你在 VPS 上运行，建议使用 ssh 隧道或设置 VPN（openVPN、wireguard）连接到你的机器人。\n\n这样可以确保 freqUI 不直接暴露在互联网，出于安全考虑（freqUI 默认不支持 https），不推荐直接暴露。\n\n这些工具的设置不在本教程范围内，网上有很多相关教程可供参考。\n\n另请阅读 \n\nAPI 配置与 docker 章节了解更多相关配置。","type":"content","url":"/docker-quickstart#accessing-the-ui","position":21},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"监控机器人","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl4","url":"/docker-quickstart#id-3","position":22},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"监控机器人","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"content":"你可以用 docker compose ps 查看正在运行的实例。\n\n这会显示 freqtrade 服务为 running。如果不是，建议查看日志（见下文）。","type":"content","url":"/docker-quickstart#id-3","position":23},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"Docker compose 日志","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl4","url":"/docker-quickstart#docker-compose","position":24},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"Docker compose 日志","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"content":"日志会写入：user_data/logs/freqtrade.log。\n\n你也可以用 docker compose logs -f 查看最新日志。","type":"content","url":"/docker-quickstart#docker-compose","position":25},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"数据库","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl4","url":"/docker-quickstart#id-4","position":26},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"数据库","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"content":"数据库位于：user_data/tradesv3.sqlite","type":"content","url":"/docker-quickstart#id-4","position":27},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"使用 docker 更新 freqtrade","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl4","url":"/docker-quickstart#id-docker-freqtrade-1","position":28},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"使用 docker 更新 freqtrade","lvl3":"Docker 快速入门","lvl2":"使用 docker 运行 Freqtrade"},"content":"使用 docker 更新 freqtrade 只需运行以下两条命令：# 下载最新镜像\ndocker compose pull\n# 重启镜像\ndocker compose up -d\n\n这会先拉取最新镜像，然后用新镜像重启容器。\n\n请检查更新日志\n\n每次更新前请务必查看更新日志，关注破坏性变更/需手动干预的内容，并确保机器人在更新后能正常启动。","type":"content","url":"/docker-quickstart#id-docker-freqtrade-1","position":29},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"编辑 docker-compose 文件","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl3","url":"/docker-quickstart#id-docker-compose","position":30},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"编辑 docker-compose 文件","lvl2":"使用 docker 运行 Freqtrade"},"content":"高级用户可以进一步编辑 docker-compose 文件，包含所有可用选项或参数。\n\n所有 freqtrade 参数都可通过 docker compose run --rm freqtrade <命令> <可选参数> 运行。\n\ndocker compose 用于交易命令\n\n交易命令（freqtrade trade <...>）不应通过 docker compose run 运行，而应使用 docker compose up -d。\n\n这样可确保容器正确启动（包括端口转发），并在系统重启后自动重启。\n\n如果你打算使用 freqUI，请确保\n\n相应配置已调整，否则 UI 将无法访问。\n\ndocker compose run --rm\n\n加上 --rm 会在命令完成后删除容器，强烈推荐除交易模式（freqtrade trade 命令）外的所有模式都加上。\n\n不使用 docker compose 的 docker 用法\n\ndocker compose run --rm 需要提供 compose 文件。\n\n某些不需要认证的 freqtrade 命令（如 list-pairs）可直接用 “docker run --rm” 运行。\n\n例如：docker run --rm freqtradeorg/freqtrade:stable list-pairs --exchange binance --quote BTC --print-json。\n\n这对于获取交易所信息并添加到 config.json 而不影响正在运行的容器很有用。","type":"content","url":"/docker-quickstart#id-docker-compose","position":31},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"示例：用 docker 下载数据","lvl3":"编辑 docker-compose 文件","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl4","url":"/docker-quickstart#id-docker-1","position":32},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"示例：用 docker 下载数据","lvl3":"编辑 docker-compose 文件","lvl2":"使用 docker 运行 Freqtrade"},"content":"从 Binance 下载 ETH/BTC 交易对 1 小时线的 5 天回测数据，数据将存储在主机的 user_data/data/ 目录下。docker compose run --rm freqtrade download-data \\\n    --pairs ETH/BTC \\\n    --exchange binance \\\n    --days 5 \\\n    -t 1h\n\n更多数据下载细节请参见\n\n数据下载文档。","type":"content","url":"/docker-quickstart#id-docker-1","position":33},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"示例：用 docker 回测","lvl3":"编辑 docker-compose 文件","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl4","url":"/docker-quickstart#id-docker-2","position":34},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl4":"示例：用 docker 回测","lvl3":"编辑 docker-compose 文件","lvl2":"使用 docker 运行 Freqtrade"},"content":"在 docker 容器中用 SampleStrategy 和指定历史数据区间(20190801-20191001)、做 5 分钟线的回测：docker compose run --rm freqtrade backtesting \\\n    --config user_data/config.json \\\n    --strategy SampleStrategy \\\n    --timerange 20190801-20191001 \\\n    -i 5m\n\n更多内容请参见\n\n回测文档。","type":"content","url":"/docker-quickstart#id-docker-2","position":35},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"在 docker 中增加的额外依赖(加入自己的 Python 依赖库)","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl3","url":"/docker-quickstart#id-docker-python","position":36},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"在 docker 中增加的额外依赖(加入自己的 Python 依赖库)","lvl2":"使用 docker 运行 Freqtrade"},"content":"如果你的策略依赖默认镜像未包含的依赖，则需在本地构建镜像。\n\n为此，请创建一个包含额外依赖安装步骤的 Dockerfile（可参考 \n\ndocker​/Dockerfile​.custom）。\n\n你还需修改 docker-compose.yml 文件，取消 build 步骤的注释，并重命名镜像以避免命名冲突。    image: freqtrade_custom\n    build:\n      context: .\n      dockerfile: \"./Dockerfile.<你自定义的扩展名>\"\n\n然后运行 docker compose build --pull 构建镜像，并用上述命令运行。","type":"content","url":"/docker-quickstart#id-docker-python","position":37},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"docker 下绘图","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl3","url":"/docker-quickstart#docker","position":38},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"docker 下绘图","lvl2":"使用 docker 运行 Freqtrade"},"content":"将 freqtrade plot-profit 和 freqtrade plot-dataframe（\n\n文档）命令的镜像在 docker-compose.yml 文件中改为 *_plot，即可使用这些命令：docker compose run --rm freqtrade plot-dataframe \\\n    --strategy AwesomeStrategy \\\n    -p BTC/ETH \\\n    --timerange=20180801-20180805\n\n输出会保存在 user_data/plot 目录下，可用任意现代浏览器打开。","type":"content","url":"/docker-quickstart#docker","position":39},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"用 docker compose 进行数据分析","lvl2":"使用 docker 运行 Freqtrade"},"type":"lvl3","url":"/docker-quickstart#id-docker-compose-1","position":40},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"用 docker compose 进行数据分析","lvl2":"使用 docker 运行 Freqtrade"},"content":"Freqtrade 提供了一个 docker-compose 文件，可启动 jupyter lab 服务器。\n你可以用以下命令启动该服务器：docker compose -f docker/docker-compose-jupyter.yml up\n\n这会创建一个运行 jupyter lab 的 docker 容器，可通过 https://127.0.0.1:8888/lab 访问。\n\n请使用启动后控制台打印的链接简化登录。\n\n由于该镜像部分在本地构建，建议不时重建镜像以保持 freqtrade（及依赖）为最新。docker compose -f docker/docker-compose-jupyter.yml build --no-cache","type":"content","url":"/docker-quickstart#id-docker-compose-1","position":41},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"故障排查"},"type":"lvl2","url":"/docker-quickstart#id-5","position":42},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl2":"故障排查"},"content":"","type":"content","url":"/docker-quickstart#id-5","position":43},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"Windows 下的 Docker","lvl2":"故障排查"},"type":"lvl3","url":"/docker-quickstart#windows-docker","position":44},{"hierarchy":{"lvl1":"使用 Docker 运行 Freqtrade","lvl3":"Windows 下的 Docker","lvl2":"故障排查"},"content":"错误：\"Timestamp for this request is outside of the recvWindow.\"\n\n市场 API 请求需要同步时钟，但 docker 容器内的时间会逐渐偏移。\n\n临时解决方法是运行 wsl --shutdown 并重启 docker（Windows 10 会弹窗提示）。\n\n永久解决方案是将容器部署在 Linux 主机，或定期用计划任务重启 wsl。taskkill /IM \"Docker Desktop.exe\" /F\nwsl --shutdown\nstart \"\" \"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\"\n\n无法连接 API（Windows）\n\n如果你在 Windows 上刚安装 Docker（Desktop），请务必重启系统。否则 Docker 可能会有网络连接问题。\n\n当然也要确保你的\n\n设置正确。\n\nWarning\n\n基于上述原因，我们不推荐在生产环境下在 Windows 上使用 docker，仅建议用于实验、数据下载和回测。\n\n可靠运行 freqtrade 最好使用 Linux VPS。","type":"content","url":"/docker-quickstart#windows-docker","position":45},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位"},"type":"lvl1","url":"/edge","position":0},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位"},"content":"","type":"content","url":"/edge","position":1},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl2":"边缘定位"},"type":"lvl2","url":"/edge#id","position":2},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl2":"边缘定位"},"content":"Edge Positioning 模块使用概率来计算您的胜率和风险回报比。它将使用这些统计数据来控制您的策略交易入场点、头寸大小和止损。\n\n已弃用的功能\n\nEdge positioning（简称 Edge）目前仅处于维护模式（我们保持现有功能活跃），应被视为已弃用。\n\n目前，除非有人站出来接管该模块的所有权，否则它将不会获得新功能，或者我们将决定从 freqtrade 中移除 Edge。\n\n警告\n\n当使用 Edge positioning 与动态白名单（VolumePairList）时，请确保也使用 AgeFilter 并将其设置为至少 calculate_since_number_of_days，以避免数据缺失的问题。\n\n注意\n\nEdge Positioning 仅考虑自己的买入/卖出/止损信号。它忽略策略配置文件中的止损、追踪止损和 ROI 设置。\n\nEdge Positioning 提高了某些交易策略的性能，并降低了其他策略的性能。","type":"content","url":"/edge#id","position":3},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"简介","lvl2":"边缘定位"},"type":"lvl3","url":"/edge#id-1","position":4},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"简介","lvl2":"边缘定位"},"content":"交易策略并不完美。它们是容易受到市场及其指标影响的框架。由于市场完全不可预测，有时策略会赢，有时同一策略会输。\n\n为了在市场上获得优势，策略必须赚取比损失更多的钱。在交易中赚钱不仅仅是关于策略多久赚钱或亏钱。\n\n重要的是赚多少，而不是多久！\n\n一个糟糕的策略可能在十次交易中赚取 1 分钱，但在一次交易中损失 1 美元。如果只检查获胜交易的次数，会误导认为策略实际上在盈利。\n\nEdge Positioning 模块旨在提高策略的获胜概率和策略在长期内赚取的钱。\n\n我们提出以下问题：\n\n哪个交易是更好的选择？\n\na) 一个交易有 80% 的机会损失 100$，20% 的机会赢得 200$\nb) 一个交易有 100% 的机会损失 30$\n\n答案\n\na) 的期望值小于 b) 的期望值。\n因此，b) 在长期内代表较小的损失。\n然而，答案是：取决于情况\n\n另一种看待它的方式是提出类似的问题：\n\n哪个交易是更好的选择？\n\na) 一个交易有 80% 的机会赢得 100$，20% 的机会损失 200$\nb) 一个交易有 100% 的机会赢得 30$\n\nEdge positioning 试图自动回答关于风险/回报和头寸大小的难题，以最小化给定策略的损失机会。","type":"content","url":"/edge#id-1","position":5},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"交易、获胜和失败","lvl3":"简介","lvl2":"边缘定位"},"type":"lvl4","url":"/edge#id-2","position":6},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"交易、获胜和失败","lvl3":"简介","lvl2":"边缘定位"},"content":"让我们将 o 称为单个交易 o 的回报，其中 o \\in \\mathbb{R}。\n\n集合 O = \\{o_1, o_2, ..., o_N\\} 是交易会话中所有交易回报的集合。我们说 N 是 O 的基数，或者通俗地说，它是交易会话中进行的交易数量。\n\n三次交易的会话\n\n在一个策略进行了三次交易的会话中，我们可以说 O = \\{3.5, -1, 15\\}。这意味着 N = 3，o_1 = 3.5，o_2 = -1，o_3 = 15。\n\n获胜交易是策略赚取钱的交易。\n\n赚钱意味着策略在扣除所有费用后，以盈利的方式平仓。形式上，获胜交易的回报 o_i > 0。同样，失败交易的回报 o_j \\leq 0。因此，我们可以发现所有获胜交易的集合 T_{win}，如下所示：T_{win} = \\{ o \\in O | o > 0 \\}\n\n同样，我们可以发现所有失败交易的集合 T_{lose}，如下所示：T_{lose} = \\{o \\in O | o \\leq 0\\}\n\n四次交易的会话\n\n在一个策略进行了四次交易的会话中 O = \\{3.5, -1, 15, 0\\}：\nT_{win} = \\{3.5, 15\\}\nT_{lose} = \\{-1, 0\\}","type":"content","url":"/edge#id-2","position":7},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"胜率和失败率","lvl3":"简介","lvl2":"边缘定位"},"type":"lvl4","url":"/edge#id-3","position":8},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"胜率和失败率","lvl3":"简介","lvl2":"边缘定位"},"content":"胜率 W 是策略获胜交易与所有交易的比例。我们使用以下函数计算胜率：W = \\frac{|T_{win}|}{N}\n\n其中 W 是胜率，N 是交易数量，T_{win} 是策略赚钱的所有交易的集合。\n\n同样，我们可以计算失败交易的比率：L = \\frac{|T_{lose}|}{N}\n\n其中 L 是失败率，N 是进行的交易数量，T_{lose} 是策略亏钱的所有交易的集合。注意，上述公式与计算 L = 1 - W 或 W = 1 - L 相同。","type":"content","url":"/edge#id-3","position":9},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"风险回报比","lvl3":"简介","lvl2":"边缘定位"},"type":"lvl4","url":"/edge#id-4","position":10},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"风险回报比","lvl3":"简介","lvl2":"边缘定位"},"content":"风险回报比（R）是用于衡量给定投资的预期收益与损失风险的公式。\n\n它基本上是您可能赢得的除以您可能损失的。形式上：R = \\frac{\\text{potential profit}}{\\text{potential loss}}\n\nR 计算的示例\n\n假设您认为 stonecoin 今天的价格是 10.0$。\n\n您相信，由于他们将开始挖掘 stonecoin，明天它将上涨到 15.0$。存在风险，即石头太硬，GPU 无法挖掘，因此价格可能会在明天降至 0$。您计划投资 100$，这将给您 10 股（100 / 10）。\n\n您的潜在利润计算如下：\\begin{aligned}\n    \\text{potential profit} &= (\\text{potential price} - \\text{entry price}) * \\frac{\\text{investment}}{\\text{entry price}} \\\\\n                            &= (15 - 10) * (100 / 10) \\\\\n                            &= 50\n\\end{aligned}\n\n由于价格可能会降至 0$，投资的 100$ 可能会变成 0。\n\n然而，我们使用 15% 的止损 - 因此，在最坏的情况下，我们将在入场价格以下 15%（或 8.5$）卖出。\\begin{aligned}\n    \\text{potential loss} &= (\\text{entry price} - \\text{stoploss}) * \\frac{\\text{investment}}{\\text{entry price}} \\\\\n                            &= (10 - 8.5) * (100 / 10)\\\\\n                            &= 15\n\\end{aligned}\n\n我们可以计算风险回报比如下：\\begin{aligned}\n    R   &= \\frac{\\text{potential profit}}{\\text{potential loss}}\\\\\n        &= \\frac{50}{15}\\\\\n        &= 3.33\n\\end{aligned}\n\n这意味着策略有潜力为每 1$ 投资赚取 3.33$。\n\n在长期内，即在许多交易中，我们可以通过将策略在获胜交易上的平均利润除以策略在失败交易上的平均损失来计算风险回报。我们可以计算平均利润，\\mu_{win}，如下所示：\\text{average profit} = \\mu_{win} = \\frac{\\text{sum of profits}}{\\text{count winning trades}} = \\frac{\\sum^{o \\in T_{win}} o}{|T_{win}|}\n\n同样，我们可以计算平均损失，\\mu_{lose}，如下所示：\\text{average loss} = \\mu_{lose} = \\frac{\\text{sum of losses}}{\\text{count losing trades}} = \\frac{\\sum^{o \\in T_{lose}} o}{|T_{lose}|}\n\n最后，我们可以计算风险回报比，R，如下所示：R = \\frac{\\text{average profit}}{\\text{average loss}} = \\frac{\\mu_{win}}{\\mu_{lose}}\\\\\n\n使用平均利润/损失计算 R 的示例\n\n假设我们使用的策略平均获胜 \\mu_{win} = 2.06，平均损失 \\mu_{loss} = 4.11。\n\n我们计算风险回报比如下：\n\nR = \\frac{\\mu_{win}}{\\mu_{loss}} = \\frac{2.06}{4.11} = 0.5012...","type":"content","url":"/edge#id-4","position":11},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"期望值","lvl3":"简介","lvl2":"边缘定位"},"type":"lvl4","url":"/edge#expect","position":12},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"期望值","lvl3":"简介","lvl2":"边缘定位"},"content":"通过结合胜率 W 和风险回报比 R 来创建期望比率 E。\n\n期望比率是交易中投资的预期回报。我们可以计算 E 的值如下：E = R * W - L\n\n计算 E\n\n假设一个策略的胜率 W = 0.28，风险回报比 R = 5。这意味着该策略预计在 28% 的交易中赚取 5 倍的投资。计算示例：\n\nE = R * W - L = 5 * 0.28 - 0.72 = 0.68\n\n上面示例中计算的期望值意味着，平均而言，该策略的交易将返回其损失的 1.68 倍。换句话说，该策略平均每损失 1$，赚取 1.68$。\n\n这很重要，原因有两个：首先，这似乎很明显，但您立即知道您有正回报。其次，您现在有一个数字可以与候选系统进行比较，以决定使用哪些系统。\n\n重要的是要记住，任何期望值大于 0 的系统在使用过去数据时都是盈利的。关键是找到一个在未来会盈利的系统。\n\n您还可以使用此值来评估对此系统的修改的有效性。\n\n重要\n\n重要的是要记住，Edge 正在使用历史数据测试您的期望值，不能保证您在未来会有类似的优势。\n\n进行此测试仍然至关重要，以建立对您方法的信心，但要警惕\"曲线拟合\"您的方法到历史数据，因为未来的交易不太可能以完全相同的方式进行。","type":"content","url":"/edge#expect","position":13},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"它是如何工作的？","lvl2":"边缘定位"},"type":"lvl3","url":"/edge#id-5","position":14},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"它是如何工作的？","lvl2":"边缘定位"},"content":"Edge 将动态止损、动态头寸和白名单生成结合到一个隔离模块中，然后应用于交易策略。如果在配置中启用，Edge 将通过一系列止损的历史数据，以找到买入和卖出/止损信号。然后，它计算每个止损的胜率和期望值。以下是一个示例：\n\n交易对\n\n止损\n\n胜率\n\n风险回报比\n\n期望值\n\nXZC/ETH\n\n-0.01\n\n0.50\n\n1.176384\n\n0.088\n\nXZC/ETH\n\n-0.02\n\n0.51\n\n1.115941\n\n0.079\n\nXZC/ETH\n\n-0.03\n\n0.52\n\n1.359670\n\n0.228\n\nXZC/ETH\n\n-0.04\n\n0.51\n\n1.234539\n\n0.117\n\n这里的目标是为策略找到最佳止损，以最大化期望值。在上面的示例中，根据历史数据，止损为 3\\% 导致最大期望值。\n\nEdge 模块然后动态地将评估的止损值强制到您的策略中。","type":"content","url":"/edge#id-5","position":15},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"头寸大小","lvl3":"它是如何工作的？","lvl2":"边缘定位"},"type":"lvl4","url":"/edge#id-6","position":16},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"头寸大小","lvl3":"它是如何工作的？","lvl2":"边缘定位"},"content":"Edge 根据以下因素指示机器人每个交易的风险金额：\n\n允许的风险资本\n\n止损\n\n允许的风险资本计算如下：允许的风险资本 = (可用资本百分比) X (每笔交易允许的风险)\n\n止损是根据历史数据计算的，如上所述。\n\n头寸大小计算如下：头寸大小 = (允许的风险资本) / 止损\n\n示例：\n\n假设质押货币是 ETH，钱包中有 10 ETH。可用资本百分比为 50\\%，每笔交易允许的风险为 1\\%。因此，用于交易的可用资本为 10 * 0.5 = 5 ETH，允许的风险资本为 5 * 0.01 = 0.05 ETH。\n\n交易 1： 策略在 XLM/ETH 市场检测到新的买入信号。Edge Positioning 计算止损为 2\\%，头寸为 0.05 / 0.02 = 2.5 ETH。机器人在 XLM/ETH 市场持有 2.5 ETH 的头寸。\n\n交易 2： 策略在 BTC/ETH 市场检测到买入信号，而 交易 1 仍然开放。Edge Positioning 计算该市场的止损为 4\\%。因此，交易 2 的头寸大小为 0.05 / 0.04 = 1.25 ETH。\n\n可用资本 \\neq 钱包中的可用金额\n\n即使 交易 1 仍然开放，交易 2 的可用资本也没有变化。可用资本不是钱包中的可用金额。\n\n交易 3： 策略在 ADA/ETH 市场检测到买入信号。Edge Positioning 计算止损为 1\\%，头寸为 0.05 / 0.01 = 5 ETH。由于 交易 1 有 2.5 ETH 被锁定，交易 2 有 1.25 ETH 被锁定，因此只有 5 - 1.25 - 2.5 = 1.25 ETH 可用。因此，交易 3 的头寸大小为 1.25 ETH。\n\n可用资本更新\n\n可用资本在头寸卖出之前不会变化。交易关闭后，如果交易盈利，可用资本会增加；如果交易亏损，可用资本会减少。\n\n策略在 XLM/ETH 市场检测到卖出信号。机器人退出 交易 1，盈利 1 ETH。钱包中的总资本变为 11 ETH，用于交易的可用资本变为 5.5 ETH。\n\n交易 4 策略在 XLM/ETH 市场检测到新的买入信号。Edge Positioning 计算止损为 2\\%，头寸大小为 0.055 / 0.02 = 2.75 ETH。","type":"content","url":"/edge#id-6","position":17},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"Edge 命令参考","lvl2":"边缘定位"},"type":"lvl3","url":"/edge#edge","position":18},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"Edge 命令参考","lvl2":"边缘定位"},"content":"用法: freqtrade edge [-h] [-v] [--no-color] [--logfile FILE] [-V] [-c PATH]\n                      [-d PATH] [--userdir PATH] [-s NAME]\n                      [--strategy-path PATH] [--recursive-strategy-search]\n                      [--freqaimodel NAME] [--freqaimodel-path PATH]\n                      [-i TIMEFRAME] [--timerange TIMERANGE]\n                      [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                      [--max-open-trades INT] [--stake-amount STAKE_AMOUNT]\n                      [--fee FLOAT] [-p PAIRS [PAIRS ...]]\n                      [--stoplosses STOPLOSS_RANGE]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --max-open-trades INT\n                        覆盖配置设置中的 `max_open_trades` 值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖配置设置中的 `stake_amount` 值。\n  --fee FLOAT           指定手续费比率。将应用两次（在交易进入和退出时）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --stoplosses STOPLOSS_RANGE\n                        定义一组止损值，edge 将针对这些值评估策略。格式为 \"min,max,step\"（不带空格）。\n                        例如：`--stoplosses=-0.01,-0.1,-0.001`\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人要使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        为 freqaimodels 指定额外的查找路径。\n","type":"content","url":"/edge#edge","position":19},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"配置","lvl2":"边缘定位"},"type":"lvl3","url":"/edge#id-7","position":20},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"配置","lvl2":"边缘定位"},"content":"Edge 模块具有以下配置选项：\n\n参数\n\n描述\n\nenabled\n\n如果为 true，则 Edge 将定期运行。默认为 false。  数据类型： 布尔值\n\nprocess_throttle_secs\n\nEdge 运行的频率（秒）。默认为 3600（每小时一次）。  数据类型： 整数\n\ncalculate_since_number_of_days\n\nEdge 计算胜率、风险回报和期望值的数据天数。 注意，它会下载历史数据，因此增加此数字会导致机器人变慢。默认为 7。  数据类型： 整数\n\nallowed_risk\n\n每笔交易允许的风险比率。默认为 0.01（1%））。  数据类型： 浮点数\n\nstoploss_range_min\n\n最小止损。默认为 -0.01。  数据类型： 浮点数\n\nstoploss_range_max\n\n最大止损。默认为 -0.10。  数据类型： 浮点数\n\nstoploss_range_step\n\n例如，如果设置为 -0.01，则 Edge 将测试策略的 [-0.01, -0,02, -0,03 ..., -0.09, -0.10] 范围。 注意，较小的步长意味着更大的范围，这可能导致计算变慢。 如果您将此参数设置为 -0.001，您将使 Edge 计算变慢 10 倍。默认为 -0.001。  数据类型： 浮点数\n\nminimum_winrate\n\n它过滤掉没有至少 minimum_winrate 的对。如果您想保守并且不想为了风险回报比而牺牲胜率，这很有用。默认为 0.60。  数据类型： 浮点数\n\nminimum_expectancy\n\n它过滤掉期望值低于此数字的对。期望值为 0.20 意味着如果您在交易中投入 10$，您期望获得 12$ 的回报。默认为 0.20。  数据类型： 浮点数\n\nmin_trade_number\n\n在计算历史数据的 W、R 和 E（期望值）时，您总是希望有最少的交易数量。这个数字越大，Edge 越可靠。在单笔交易中胜率为 100% 并不意味着什么。但在过去的 100 笔交易中胜率为 70% 显然意味着什么。默认为 10（强烈建议不要减少此数字）。  数据类型： 整数\n\nmax_trade_duration_minute\n\nEdge 将过滤掉持续时间较长的交易。如果交易在一个月后盈利，很难基于此评估策略。但如果大多数交易都是盈利的，并且它们的最大持续时间为 30 分钟，那么这显然是一个好迹象。注意： 在配置此值时，您应该考虑您的时间框架。例如，对于具有 4 小时间隔的策略，过滤掉持续时间少于一天的交易没有意义。默认值假设您的时间框架相对较小（1m 或 5m 等）。默认为 1440（一天）。  数据类型： 整数\n\nremove_pumps\n\nEdge 将在处理历史数据时移除给定市场中的突然上涨。然而，由于加密货币市场中经常发生上涨，我们建议您保持此选项关闭。默认为 false。  数据类型： 布尔值","type":"content","url":"/edge#id-7","position":21},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"独立运行 Edge","lvl2":"边缘定位"},"type":"lvl3","url":"/edge#id-edge","position":22},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl3":"独立运行 Edge","lvl2":"边缘定位"},"content":"您可以独立运行 Edge 以查看详细结果。以下是一个示例：freqtrade edge\n\n其输出的示例：\n\n对\n\n止损\n\n胜率\n\n风险回报比\n\n所需风险回报\n\n期望值\n\n总交易数\n\n平均持续时间（分钟）\n\nAGI/BTC\n\n-0.02\n\n0.64\n\n5.86\n\n0.56\n\n3.41\n\n14\n\n54\n\nNXS/BTC\n\n-0.03\n\n0.64\n\n2.99\n\n0.57\n\n1.54\n\n11\n\n26\n\nLEND/BTC\n\n-0.02\n\n0.82\n\n2.05\n\n0.22\n\n1.50\n\n11\n\n36\n\nVIA/BTC\n\n-0.01\n\n0.55\n\n3.01\n\n0.83\n\n1.19\n\n11\n\n48\n\nMTH/BTC\n\n-0.09\n\n0.56\n\n2.82\n\n0.80\n\n1.12\n\n18\n\n52\n\nARDR/BTC\n\n-0.04\n\n0.42\n\n3.14\n\n1.40\n\n0.73\n\n12\n\n42\n\nBCPT/BTC\n\n-0.01\n\n0.71\n\n1.34\n\n0.40\n\n0.67\n\n14\n\n30\n\nWINGS/BTC\n\n-0.02\n\n0.56\n\n1.97\n\n0.80\n\n0.65\n\n27\n\n42\n\nVIBE/BTC\n\n-0.02\n\n0.83\n\n0.91\n\n0.20\n\n0.59\n\n12\n\n35\n\nMCO/BTC\n\n-0.02\n\n0.79\n\n0.97\n\n0.27\n\n0.55\n\n14\n\n31\n\nGNT/BTC\n\n-0.02\n\n0.50\n\n2.06\n\n1.00\n\n0.53\n\n18\n\n24\n\nHOT/BTC\n\n-0.01\n\n0.17\n\n7.72\n\n4.81\n\n0.50\n\n209\n\n7\n\nSNM/BTC\n\n-0.03\n\n0.71\n\n1.06\n\n0.42\n\n0.45\n\n17\n\n38\n\nAPPC/BTC\n\n-0.02\n\n0.44\n\n2.28\n\n1.27\n\n0.44\n\n25\n\n43\n\nNEBL/BTC\n\n-0.03\n\n0.63\n\n1.29\n\n0.58\n\n0.44\n\n19\n\n59\n\nEdge 通过比较 calculate_since_number_of_days 和 minimum_expectancy 来生成上表，以找到基于配置文件的 min_trade_number 历史信息。Edge 用于比较的时间范围可以通过使用 --timerange 开关进一步限制。\n\n在实时和模拟模式下，在 process_throttle_secs 过去后，Edge 将再次处理 calculate_since_number_of_days 和 minimum_expectancy 以找到 min_trade_number。如果未找到 min_trade_number，机器人将返回\"白名单为空\"。根据部署的交易策略，\"白名单为空\"可能会经常返回 - 或者总是返回。使用 Edge 也可能导致交易以突发方式进行，尽管这种情况很少见。\n\n如果您经常遇到\"白名单为空\"，请考虑调整 calculate_since_number_of_days、minimum_expectancy 和 min_trade_number 以与您的策略的交易频率保持一致。","type":"content","url":"/edge#id-edge","position":23},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"使用最新数据更新缓存的对","lvl3":"独立运行 Edge","lvl2":"边缘定位"},"type":"lvl4","url":"/edge#id-8","position":24},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"使用最新数据更新缓存的对","lvl3":"独立运行 Edge","lvl2":"边缘定位"},"content":"Edge 需要历史数据，就像回测一样。\n请参阅文档的 \n\n数据下载 部分以获取详细信息。","type":"content","url":"/edge#id-8","position":25},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"精确止损范围","lvl3":"独立运行 Edge","lvl2":"边缘定位"},"type":"lvl4","url":"/edge#id-9","position":26},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"精确止损范围","lvl3":"独立运行 Edge","lvl2":"边缘定位"},"content":"freqtrade edge --stoplosses=-0.01,-0.1,-0.001 #min,max,step","type":"content","url":"/edge#id-9","position":27},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"高级使用时间范围","lvl3":"独立运行 Edge","lvl2":"边缘定位"},"type":"lvl4","url":"/edge#id-10","position":28},{"hierarchy":{"lvl1":"Edge Positioning - 边缘定位","lvl4":"高级使用时间范围","lvl3":"独立运行 Edge","lvl2":"边缘定位"},"content":"freqtrade edge --timerange=20181110-20181113\n\n执行 --timerange=-20190901 将获取所有可用数据，直到 9 月 1 日（不包括 2019 年 9 月 1 日）。\n\n完整的时间范围规范：\n\n使用 2018/01/31 之前的 tickframes：--timerange=-20180131\n\n使用 2018/01/31 之后的 tickframes：--timerange=20180131-\n\n使用 2018/01/31 到 2018/03/01 的 tickframes：--timerange=20180131-20180301\n\n使用 POSIX 时间戳 1527595200 到 1527618600 之间的 tickframes：--timerange=1527595200-1527618600","type":"content","url":"/edge#id-10","position":29},{"hierarchy":{"lvl1":"交易所特定说明"},"type":"lvl1","url":"/exchanges","position":0},{"hierarchy":{"lvl1":"交易所特定说明"},"content":"本页结合了交易所特定的常见问题和信息，这些信息很可能不适用于其他交易所。","type":"content","url":"/exchanges","position":1},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"交易所配置"},"type":"lvl2","url":"/exchanges#id","position":2},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"交易所配置"},"content":"Freqtrade 基于 \n\nCCXT 库，支持超过 100 个加密货币交易所市场和交易 API。完整的最新列表可以在 \n\nCCXT 仓库主页 找到。然而，该机器人仅由开发团队在少数几个交易所上进行了测试。当前列表可以在本文档的\"首页\"部分找到。\n\n欢迎测试其他交易所并提交您的反馈或 PR 以改进机器人或确认交易所是否完美运行。\n\n一些交易所需要特殊配置，可以在下面找到。","type":"content","url":"/exchanges#id","position":3},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"示例交易所配置","lvl2":"交易所配置"},"type":"lvl3","url":"/exchanges#id-1","position":4},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"示例交易所配置","lvl2":"交易所配置"},"content":"“binance” 的交易所配置如下所示：\"exchange\": {\n    \"name\": \"binance\",\n    \"key\": \"your_exchange_key\",\n    \"secret\": \"your_exchange_secret\",\n    \"ccxt_config\": {},\n    \"ccxt_async_config\": {},\n    // ...","type":"content","url":"/exchanges#id-1","position":5},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"设置速率限制","lvl2":"交易所配置"},"type":"lvl3","url":"/exchanges#id-2","position":6},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"设置速率限制","lvl2":"交易所配置"},"content":"通常，CCXT 设置的速率限制是可靠的并且运行良好。如果遇到与速率限制相关的问题（通常在日志中出现 DDOS 异常），可以轻松更改 rateLimit 设置。\"exchange\": {\n    \"name\": \"kraken\",\n    \"key\": \"your_exchange_key\",\n    \"secret\": \"your_exchange_secret\",\n    \"ccxt_config\": {\"enableRateLimit\": true},\n    \"ccxt_async_config\": {\n        \"enableRateLimit\": true,\n        \"rateLimit\": 3100\n    },\n\n此配置启用了 kraken，并启用了速率限制以避免被交易所封禁。\"rateLimit\": 3100 定义了每次调用之间的等待时间为 3.1 秒。也可以通过将 \"enableRateLimit\" 设置为 false 来完全禁用。\n\nCaution\n\n速率限制的最佳设置取决于交易所和白名单的大小，因此理想参数会因许多其他设置而异。我们尽可能为每个交易所提供合理的默认值，如果您遇到封禁，请确保 \"enableRateLimit\" 已启用，并逐步增加 \"rateLimit\" 参数。","type":"content","url":"/exchanges#id-2","position":7},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Binance"},"type":"lvl2","url":"/exchanges#binance","position":8},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Binance"},"content":"服务器位置和地理 IP 限制\n\n请注意，Binance 根据服务器国家限制 API 访问。当前和非详尽的被封锁国家包括加拿大、马来西亚、荷兰和美国。请访问 \n\nbinance 条款 > b. 资格 以获取最新列表。\n\nBinance 支持 \n\ntime_in_force。\n\n交易所止损\n\nBinance 支持 stoploss_on_exchange 并使用 stop-loss-limit 订单。它提供了很大的优势，因此我们建议通过启用交易所止损来受益。\n\n在期货上，Binance 支持 stop-limit 和 stop-market 订单。您可以在 order_types.stoploss 配置设置中使用 \"limit\" 或 \"market\" 来决定使用哪种类型。","type":"content","url":"/exchanges#binance","position":9},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Binance 黑名单建议","lvl2":"Binance"},"type":"lvl3","url":"/exchanges#binance-1","position":10},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Binance 黑名单建议","lvl2":"Binance"},"content":"对于 Binance，建议将 \"BNB/<STAKE>\" 添加到您的黑名单中以避免问题，除非您愿意在账户中保持足够的额外 BNB，或者除非您愿意禁用使用 BNB 支付费用。\nBinance 账户可以使用 BNB 支付费用，如果交易恰好是 BNB，进一步的交易可能会消耗这个头寸，并使初始 BNB 交易无法出售，因为预期金额不再存在。\n\n如果没有足够的 BNB 来支付交易费用，则费用将不会由 BNB 支付，也不会发生费用减免。Freqtrade 永远不会购买 BNB 来支付费用。BNB 需要手动购买和监控。","type":"content","url":"/exchanges#binance-1","position":11},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Binance 站点","lvl2":"Binance"},"type":"lvl3","url":"/exchanges#binance-2","position":12},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Binance 站点","lvl2":"Binance"},"content":"Binance 已分为两个，用户必须使用正确的 ccxt 交易所 ID，否则 API 密钥将不被识别。\n\nbinance.com - 国际用户。使用交易所 ID：binance。\n\nbinance.us - 美国用户。使用交易所 ID：binanceus。","type":"content","url":"/exchanges#binance-2","position":13},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Binance RSA 密钥","lvl2":"Binance"},"type":"lvl3","url":"/exchanges#binance-rsa","position":14},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Binance RSA 密钥","lvl2":"Binance"},"content":"Freqtrade 支持 binance RSA API 密钥。\n\n我们建议将其作为环境变量使用。export FREQTRADE__EXCHANGE__SECRET=\"$(cat ./rsa_binance.private)\"\n\n它们也可以通过配置文件进行配置。由于 json 不支持多行字符串，您必须将所有换行符替换为 \\n 以生成有效的 json 文件。// ...\n \"key\": \"<someapikey>\",\n \"secret\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBABACAFQA<...>s8KX8=\\n-----END PRIVATE KEY-----\"\n// ...","type":"content","url":"/exchanges#binance-rsa","position":15},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Binance 期货","lvl2":"Binance"},"type":"lvl3","url":"/exchanges#binance-3","position":16},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Binance 期货","lvl2":"Binance"},"content":"Binance 有特定的（不幸的是复杂的）\n\n期货交易量化规则，需要遵循，并且禁止过低的交易金额（以及其他）。违反这些规则将导致交易限制。\n\n在 Binance 期货市场上交易时，必须使用订单簿，因为没有期货的价格行情数据。  \"entry_pricing\": {\n      \"use_order_book\": true,\n      \"order_book_top\": 1,\n      \"check_depth_of_market\": {\n          \"enabled\": false,\n          \"bids_to_ask_delta\": 1\n      }\n  },\n  \"exit_pricing\": {\n      \"use_order_book\": true,\n      \"order_book_top\": 1\n  },","type":"content","url":"/exchanges#binance-3","position":17},{"hierarchy":{"lvl1":"交易所特定说明","lvl4":"Binance 隔离期货设置","lvl3":"Binance 期货","lvl2":"Binance"},"type":"lvl4","url":"/exchanges#binance-4","position":18},{"hierarchy":{"lvl1":"交易所特定说明","lvl4":"Binance 隔离期货设置","lvl3":"Binance 期货","lvl2":"Binance"},"content":"用户还必须将期货设置\"持仓模式\"设置为\"单向模式\"，并将\"资产模式\"设置为\"单一资产模式\"。\n这些设置将在启动时进行检查，如果设置错误，freqtrade 将显示错误。\n\nFreqtrade 不会尝试更改这些设置。","type":"content","url":"/exchanges#binance-4","position":19},{"hierarchy":{"lvl1":"交易所特定说明","lvl4":"Binance BNFCR 期货","lvl3":"Binance 期货","lvl2":"Binance"},"type":"lvl4","url":"/exchanges#binance-bnfcr","position":20},{"hierarchy":{"lvl1":"交易所特定说明","lvl4":"Binance BNFCR 期货","lvl3":"Binance 期货","lvl2":"Binance"},"content":"BNFCR 模式是 Binance 上的一种特殊期货模式，用于解决欧洲的监管问题。要使用 BNFCR 期货，您必须具有以下设置组合：{\n    // ...\n    \"trading_mode\": \"futures\",\n    \"margin_mode\": \"cross\",\n    \"proxy_coin\": \"BNFCR\",\n    \"stake_currency\": \"USDT\" // 或 \"USDC\"\n    // ...\n}\n\nstake_currency 设置定义了机器人将操作的市场。这个选择是任意的。\n\n在交易所上，您必须使用\"多资产模式\" - 和\"持仓模式\"设置为\"单向模式\"。Freqtrade 将在启动时检查这些设置，但不会尝试更改它们。","type":"content","url":"/exchanges#binance-bnfcr","position":21},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bingx"},"type":"lvl2","url":"/exchanges#bingx","position":22},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bingx"},"content":"BingX 支持 \n\ntime_in_force，设置包括\"GTC\"（直到取消）、“IOC”（立即或取消）和\"PO\"（仅限挂单）。\n\n交易所止损\n\nBingx 支持 stoploss_on_exchange 并可以使用 stop-limit 和 stop-market 订单。它提供了很大的优势，因此我们建议通过启用交易所止损来受益。","type":"content","url":"/exchanges#bingx","position":23},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Kraken"},"type":"lvl2","url":"/exchanges#kraken","position":24},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Kraken"},"content":"Kraken 支持 \n\ntime_in_force，设置包括\"GTC\"（直到取消）、“IOC”（立即或取消）和\"PO\"（仅限挂单）。\n\n交易所止损\n\nKraken 支持 stoploss_on_exchange 并可以使用 stop-loss-market 和 stop-loss-limit 订单。它提供了很大的优势，因此我们建议通过启用交易所止损来受益。\n\n您可以在 order_types.stoploss 配置设置中使用 \"limit\" 或 \"market\" 来决定使用哪种类型。","type":"content","url":"/exchanges#kraken","position":25},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"历史 Kraken 数据","lvl2":"Kraken"},"type":"lvl3","url":"/exchanges#id-kraken","position":26},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"历史 Kraken 数据","lvl2":"Kraken"},"content":"Kraken API 仅提供 720 个历史蜡烛，这对于 Freqtrade 的模拟运行和实时交易模式足够，但对于回测来说是个问题。\n要下载 Kraken 交易所的数据，使用 --dl-trades 是强制性的，否则机器人将一遍又一遍地下载相同的 720 个蜡烛，您将没有足够的回测数据。\n\n为了加快下载速度，您可以下载 Kraken 提供的 \n\n交易 zip 文件。这些文件通常每季度更新一次。Freqtrade 期望这些文件放在 user_data/data/kraken/trades_csv 中。\n\n如果使用增量文件，以下结构可能是有意义的，其中\"完整\"历史在一个目录中，增量文件在不同的目录中。\n此模式的假设是数据已下载并解压缩，保持文件名不变。\n重复内容将被忽略（基于时间戳）- 尽管假设数据中没有间隙。\n\n这意味着，如果您的\"完整\"历史在 2022 年第四季度结束 - 那么增量更新 Q1 2023 和 Q2 2023 都可用。\n没有这些将导致数据不完整，因此在使用数据时会导致无效结果。└── trades_csv\n    ├── Kraken_full_history\n    │   ├── BCHEUR.csv\n    │   └── XBTEUR.csv\n    ├── Kraken_Trading_History_Q1_2023\n    │   ├── BCHEUR.csv\n    │   └── XBTEUR.csv\n    └── Kraken_Trading_History_Q2_2023\n        ├── BCHEUR.csv\n        └── XBTEUR.csv\n\n您可以将这些文件转换为 freqtrade 文件：freqtrade convert-trade-data --exchange kraken --format-from kraken_csv --format-to feather\n# 将交易数据转换为不同的 ohlcv 时间周期\nfreqtrade trades-to-ohlcv -p BTC/EUR BCH/EUR --exchange kraken -t 1m 5m 15m 1h\n\n转换后的数据也使下载数据成为可能，并将在最新加载的交易之后开始下载。freqtrade download-data --exchange kraken --dl-trades -p BTC/EUR BCH/EUR \n\n从 kraken 下载数据\n\n下载 kraken 数据将需要比任何其他交易所更多的内存（RAM），因为交易数据需要在您的机器上转换为蜡烛。\n\n这也将花费很长时间，因为 freqtrade 需要下载交易所上发生的每一笔交易，因此请耐心等待。\n\nrateLimit 调整\n\n请注意，rateLimit 配置条目表示请求之间的延迟（以毫秒为单位），而不是请求/秒的速率。\n\n因此，为了缓解 Kraken API\"超出速率限制\"异常，应增加此配置，而不是减少。","type":"content","url":"/exchanges#id-kraken","position":27},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Kucoin"},"type":"lvl2","url":"/exchanges#kucoin","position":28},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Kucoin"},"content":"Kucoin 要求每个 API 密钥都有一个密码，因此您需要将此密钥添加到配置中，以便您的交易所部分如下所示：\"exchange\": {\n    \"name\": \"kucoin\",\n    \"key\": \"your_exchange_key\",\n    \"secret\": \"your_exchange_secret\",\n    \"password\": \"your_exchange_api_key_password\",\n    // ...\n}\n\nKucoin 支持 \n\ntime_in_force。\n\n交易所止损\n\nKucoin 支持 stoploss_on_exchange 并可以使用 stop-loss-market 和 stop-loss-limit 订单。它提供了很大的优势，因此我们建议通过启用交易所止损来受益。\n\n您可以在 order_types.stoploss 配置设置中使用 \"limit\" 或 \"market\" 来决定使用哪种类型的止损。","type":"content","url":"/exchanges#kucoin","position":29},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Kucoin 黑名单","lvl2":"Kucoin"},"type":"lvl3","url":"/exchanges#kucoin-1","position":30},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Kucoin 黑名单","lvl2":"Kucoin"},"content":"对于 Kucoin，建议将 \"KCS/<STAKE>\" 添加到您的黑名单中以避免问题，除非您愿意在账户中保持足够的额外 KCS，或者除非您愿意禁用使用 KCS 支付费用。\nKucoin 账户可以使用 KCS 支付费用，如果交易恰好是 KCS，进一步的交易可能会消耗这个头寸，并使初始 KCS 交易无法出售，因为预期金额不再存在。","type":"content","url":"/exchanges#kucoin-1","position":31},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"HTX"},"type":"lvl2","url":"/exchanges#htx","position":32},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"HTX"},"content":"交易所止损\n\nHTX 支持 stoploss_on_exchange 并使用 stop-limit 订单。它提供了很大的优势，因此我们建议通过启用交易所止损来受益。","type":"content","url":"/exchanges#htx","position":33},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"OKX"},"type":"lvl2","url":"/exchanges#okx","position":34},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"OKX"},"content":"OKX 要求每个 API 密钥都有一个密码，因此您需要将此密钥添加到配置中，以便您的交易所部分如下所示：\"exchange\": {\n    \"name\": \"okx\",\n    \"key\": \"your_exchange_key\",\n    \"secret\": \"your_exchange_secret\",\n    \"password\": \"your_exchange_api_key_password\",\n    // ...\n}\n\n如果您在 \n\nmy.okx.com（OKX EAA）上注册，您将需要使用 \"myokx\" 作为交易所名称。\n使用错误的交易所将导致错误\"OKX Error 50119: API key doesn’t exist\" - 因为这两个是独立的实体。\n\nWarning\n\nOKX 每个 API 调用仅提供 100 个蜡烛。因此，策略在回测模式下可用的数据量相当低。\n\n期货\n\nOKX 期货有\"持仓模式\"的概念 - 可以是\"买入/卖出\"或长/短（对冲模式）。\n\nFreqtrade 支持两种模式（我们建议使用买入/卖出模式）- 但在交易过程中更改模式不受支持，将导致异常和无法下单。\n\nOKX 还仅提供过去约 3 个月的 MARK 蜡烛。因此，在该日期之前回测期货将导致轻微偏差，因为如果没有这些数据，资金费用无法正确计算。","type":"content","url":"/exchanges#okx","position":35},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Gate.io"},"type":"lvl2","url":"/exchanges#gate-io","position":36},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Gate.io"},"content":"交易所止损\n\nGate.io 支持 stoploss_on_exchange 并使用 stop-loss-limit 订单。它提供了很大的优势，因此我们建议通过启用交易所止损来受益。\n\nGate.io 支持 \n\ntime_in_force，设置包括 “GTC”（有效直至取消）和 “IOC”（立即成交或取消）。\n\nGate.io 允许使用 POINT 支付费用。由于这不是可交易的货币（没有常规市场可用），自动费用计算将失败（并默认为 0 费用）。\n配置参数 exchange.unknown_fee_rate 可用于指定 Point 与质押货币之间的汇率。显然，更改质押货币也需要更改此值。\n\nGate API 密钥需要在您想要交易的市场类型之上具有以下权限：\n\n“现货交易” 或 “永续期货”（读写）（选择两者之一，或与您想要交易的市场匹配的一个）\n\n“钱包”（只读）\n\n“账户”（只读）\n\n没有这些权限，机器人将无法正确启动并显示\"权限缺失\"等错误。\n\n以下是翻译后的中文内容，保持了Markdown格式：","type":"content","url":"/exchanges#gate-io","position":37},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bybit"},"type":"lvl2","url":"/exchanges#bybit","position":38},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bybit"},"content":"交易所止损Bybit（仅期货）支持 `stoploss_on_exchange` 并使用 `stop-loss-limit` 订单。它提供了很大的优势，因此我们建议通过启用交易所止损来受益。\n在期货交易中，Bybit 同时支持 `stop-limit` 和 `stop-market` 订单。您可以在 `order_types.stoploss` 配置设置中使用 `\"limit\"` 或 `\"market\"` 来决定使用哪种类型。\n\nBybit 支持 \n\ntime_in_force，设置包括 “GTC”（有效直至取消）、“FOK”（全部成交或取消）、“IOC”（立即成交或取消）和 “PO”（仅挂单）。\n\nBybit 上的期货交易目前支持逐仓期货模式。\n\n在启动时，freqtrade 将为整个（子）账户设置持仓模式为\"单向模式\"。这避免了反复调用（减慢机器人操作），但意味着手动更改此设置可能导致异常和错误。\n\n由于 bybit 不提供资金费率历史记录，实盘交易也使用模拟运行计算。\n\n实盘期货交易的 API 密钥必须具有以下权限：\n\n读写\n\n合约 - 订单\n\n合约 - 持仓\n\n我们强烈建议将所有 API 密钥限制到您将使用的 IP 地址。\n\n统一账户Freqtrade 假设账户专用于机器人。\n因此，我们建议每个机器人使用一个子账户。在使用统一账户时这一点尤其重要。\n不支持其他配置（一个账户上的多个机器人、机器人账户上的手动非机器人交易），可能导致意外行为。\n\n以下是翻译后的中文内容，保持了Markdown格式：","type":"content","url":"/exchanges#bybit","position":39},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bitmart"},"type":"lvl2","url":"/exchanges#bitmart","position":40},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bitmart"},"content":"Bitmart 要求 API 密钥备忘录（您给 API 密钥起的名字）与交易所密钥和秘钥一起使用。\n因此需要同时传递 UID。\"exchange\": {\n    \"name\": \"bitmart\",\n    \"uid\": \"your_bitmart_api_key_memo\",\n    \"secret\": \"your_exchange_secret\",\n    \"password\": \"your_exchange_api_key_password\",\n    // ...\n}\n\n!!! Warning “必要的验证”\nBitmart 需要二级验证才能通过 API 在现货市场成功交易 - 尽管通过 UI 交易仅需一级验证就能正常工作。","type":"content","url":"/exchanges#bitmart","position":41},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bitget"},"type":"lvl2","url":"/exchanges#bitget","position":42},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bitget"},"content":"Bitget 每个 API 密钥都需要一个密码短语，因此您需要将此密钥添加到配置中，使您的交易所部分如下所示：\"exchange\": {\n    \"name\": \"bitget\",\n    \"key\": \"your_exchange_key\",\n    \"secret\": \"your_exchange_secret\",\n    \"password\": \"your_exchange_api_key_password\",\n    // ...\n}\n\nBitget 支持 \n\ntime_in_force，设置包括 “GTC”（有效直至取消）、“FOK”（全部成交或取消）、“IOC”（立即成交或取消）和 “PO”（仅挂单）。\n\n交易所止损Bitget 支持 `stoploss_on_exchange` 并且可以使用止损市价单和止损限价单。它提供了很大的优势，因此我们建议利用它。\n您可以在 `order_types.stoploss` 配置设置中使用 `\"limit\"` 或 `\"market\"` 来决定使用哪种类型的止损。","type":"content","url":"/exchanges#bitget","position":43},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Hyperliquid"},"type":"lvl2","url":"/exchanges#hyperliquid","position":44},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Hyperliquid"},"content":"交易所止损Hyperliquid 支持 `stoploss_on_exchange` 并使用 `stop-loss-limit` 订单。它提供了很大的优势，因此我们建议利用它。\n\nNote\n\nHyperliquid 是一个去中心化交易所（DEX）。去中心化交易所与普通交易所的工作方式略有不同。私有 API 调用不是使用 API 密钥进行身份验证，而是需要使用您钱包的私钥进行签名（我们建议为此使用 API 钱包，可在 Hyperliquid 或您选择的钱包中生成）。\n需要这样配置：\"exchange\": {\n    \"name\": \"hyperliquid\",\n    \"walletAddress\": \"your_eth_wallet_address\",  // 这不应该是您的 API 钱包地址！\n    \"privateKey\": \"your_api_private_key\",\n    // ...\n}\n\nwalletAddress 为十六进制格式：0x<40个十六进制字符> - 可以从您的钱包中轻松复制 - 应该是您的主钱包地址，而不是您的 API 钱包地址。\n\nprivateKey 为十六进制格式：0x<64个十六进制字符> - 使用 API 钱包在创建时显示的密钥。\n\nHyperliquid 在 Arbitrum One 链上处理存取款，这是一个建立在以太坊之上的第二层扩展解决方案。Hyperliquid 使用 USDC 作为报价货币/抵押品。在 Hyperliquid 上存入 USDC 的过程需要几个步骤，请参阅\n\n如何开始交易了解所需步骤的详细信息。\n\nHyperliquid 一般使用注意事项Hyperliquid 不支持市价单，但是 ccxt 会通过下达最大滑点为 5% 的限价单来模拟市价单。\n不幸的是，hyperliquid 只提供 5000 根历史 K 线，因此回测要么需要历史性地构建 K 线（通过等待并随时间增量下载数据） - 要么限制在最后 5000 根 K 线。\n\n一些一般最佳实践（非详尽）* 谨防供应链攻击，如 pip 包中毒等。无论何时使用您的私钥，请确保您的环境是安全的。\n* 不要将您的实际钱包私钥用于交易。使用 Hyperliquid [API 生成器](https://app.hyperliquid.xyz/API)创建单独的 API 钱包。\n* 不要在用于 freqtrade 的服务器上存储您的实际钱包私钥。改用 API 钱包私钥。此密钥不允许提取，仅允许交易。\n* 始终保持您的助记词和私钥私密。\n* 不要使用与初始化硬件钱包时必须备份的相同助记词，使用相同的助记词基本上会删除硬件钱包的安全性。\n* 创建一个不同的软件钱包，只将您想要交易的资金转移到该钱包，并使用该钱包在 Hyperliquid 上交易。\n* 如果您有不想用于交易的资金（例如获利后），请将它们转回您的硬件钱包。","type":"content","url":"/exchanges#hyperliquid","position":45},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Hyperliquid 保险库/子账户","lvl2":"Hyperliquid"},"type":"lvl3","url":"/exchanges#hyperliquid-1","position":46},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Hyperliquid 保险库/子账户","lvl2":"Hyperliquid"},"content":"Hyperliquid 允许您创建保险库或子账户。\n要在 Freqtrade 中使用这些，您需要使用以下配置模式：\"exchange\": {\n    \"name\": \"hyperliquid\",\n    \"walletAddress\": \"your_vault_address\",  // 保险库或子账户地址\n    \"privateKey\": \"your_api_private_key\",\n    \"ccxt_config\": {\n        \"options\": {\n            \"vaultAddress\": \"your_vault_address\" // 可选，仅当您想使用保险库或子账户时\n        }\n    },\n    // ...\n}\n\n您的余额和交易现在将从您的保险库/子账户中使用 - 不再从您的主账户。","type":"content","url":"/exchanges#hyperliquid-1","position":47},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Hyperliquid 历史数据","lvl2":"Hyperliquid"},"type":"lvl3","url":"/exchanges#hyperliquid-2","position":48},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"Hyperliquid 历史数据","lvl2":"Hyperliquid"},"content":"Hyperliquid API 不提供超出单次调用以获取当前数据的历史数据，因此无法下载数据，因为下载的数据不会构成适当的历史数据。","type":"content","url":"/exchanges#hyperliquid-2","position":49},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bitvavo"},"type":"lvl2","url":"/exchanges#bitvavo","position":50},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"Bitvavo"},"content":"如果您的账户需要使用 operatorId，您可以在配置文件中如下设置：\"exchange\": {\n        \"name\": \"bitvavo\",\n        \"key\": \"\",\n        \"secret\": \"\",\n        \"ccxt_config\": {\n            \"options\": {\n                \"operatorId\": \"123567\"\n            }\n        },\n   }\n\nBitvavo 期望 operatorId 是整数。","type":"content","url":"/exchanges#bitvavo","position":51},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"所有交易所"},"type":"lvl2","url":"/exchanges#id-3","position":52},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"所有交易所"},"content":"如果您经常遇到 Nonce 错误（如 InvalidNonce），最好重新生成 API 密钥。重置 Nonce 很困难，通常重新生成 API 密钥更容易。","type":"content","url":"/exchanges#id-3","position":53},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"其他交易所的随机注释"},"type":"lvl2","url":"/exchanges#id-4","position":54},{"hierarchy":{"lvl1":"交易所特定说明","lvl2":"其他交易所的随机注释"},"content":"The Ocean（交易所 ID：theocean）交易所使用 Web3 功能，需要安装 web3 Python 包：pip3 install web3","type":"content","url":"/exchanges#id-4","position":55},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"获取最新价格/不完整的 K 线","lvl2":"其他交易所的随机注释"},"type":"lvl3","url":"/exchanges#id-k","position":56},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"获取最新价格/不完整的 K 线","lvl2":"其他交易所的随机注释"},"content":"大多数交易所通过其 OHLCV/klines API 接口返回当前不完整的 K 线。\n默认情况下，Freqtrade 假设从交易所获取的是不完整 K 线，并移除最后一根 K 线，假设它是不完整的 K 线。\n\n您的交易所是否返回不完整 K 线可以使用贡献者文档中的\n\n辅助脚本进行检查。\n\n由于重绘的危险，Freqtrade 不允许您使用这个不完整的 K 线。\n\n但是，如果这是基于您的策略需要最新价格 - 那么这个需求可以在策略内使用\n\n数据提供器获得。","type":"content","url":"/exchanges#id-k","position":57},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"高级 Freqtrade 交易所配置","lvl2":"其他交易所的随机注释"},"type":"lvl3","url":"/exchanges#id-freqtrade","position":58},{"hierarchy":{"lvl1":"交易所特定说明","lvl3":"高级 Freqtrade 交易所配置","lvl2":"其他交易所的随机注释"},"content":"可以使用 _ft_has_params 设置配置高级选项，这将覆盖默认值和特定于交易所的行为。\n\n可用选项在交易所类中列为 _ft_has_default。\n\n例如，要使用 Kraken 测试订单类型 FOK，并将 K 线限制修改为 200（因此每次 API 调用只获得 200 根 K 线）：\"exchange\": {\n    \"name\": \"kraken\",\n    \"_ft_has_params\": {\n        \"order_time_in_force\": [\"GTC\", \"FOK\"],\n        \"ohlcv_candle_limit\": 200\n        }\n    //...\n}\n\nNote请确保在修改这些设置之前完全理解其影响。","type":"content","url":"/exchanges#id-freqtrade","position":59},{"hierarchy":{"lvl1":"Freqtrade 常见问题"},"type":"lvl1","url":"/faq","position":0},{"hierarchy":{"lvl1":"Freqtrade 常见问题"},"content":"","type":"content","url":"/faq","position":1},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"支持的市场"},"type":"lvl2","url":"/faq#id","position":2},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"支持的市场"},"content":"Freqtrade 支持现货交易，以及一些选定交易所的（隔离）期货交易。请参阅\n\n文档起始页获取支持交易所的最新列表。","type":"content","url":"/faq#id","position":3},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我的机器人可以开空仓吗？","lvl2":"支持的市场"},"type":"lvl3","url":"/faq#id-1","position":4},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我的机器人可以开空仓吗？","lvl2":"支持的市场"},"content":"Freqtrade 可以在期货市场开空仓。\n这需要为此制定策略 - 并在配置中设置 \"trading_mode\": \"futures\"。\n请确保先阅读\n\n相关文档页面。\n\n在现货市场，在某些情况下，你可以使用杠杆现货代币，它们反映了反向交易对（例如 BTCUP/USD、BTCDOWN/USD、ETHBULL/USD、ETHBEAR/USD 等），可以用 Freqtrade 进行交易。","type":"content","url":"/faq#id-1","position":5},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我的机器人可以交易期权或期货吗？","lvl2":"支持的市场"},"type":"lvl3","url":"/faq#id-2","position":6},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我的机器人可以交易期权或期货吗？","lvl2":"支持的市场"},"content":"期货交易在选定的交易所受支持。请参阅\n\n文档起始页获取支持交易所的最新列表。","type":"content","url":"/faq#id-2","position":7},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"初学者技巧和窍门"},"type":"lvl2","url":"/faq#id-3","position":8},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"初学者技巧和窍门"},"content":"当你使用策略和超优化文件时，你应该使用适当的代码编辑器，如 VSCode 或 PyCharm。一个好的代码编辑器将提供语法高亮以及行号，使查找语法错误变得容易（很可能由 Freqtrade 在启动时指出）。","type":"content","url":"/faq#id-3","position":9},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"Freqtrade 常见问题"},"type":"lvl2","url":"/faq#freqtrade","position":10},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"Freqtrade 常见问题"},"content":"","type":"content","url":"/faq#freqtrade","position":11},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"Freqtrade 可以在同一交易对上同时开多个仓位吗？","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#freqtrade-1","position":12},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"Freqtrade 可以在同一交易对上同时开多个仓位吗？","lvl2":"Freqtrade 常见问题"},"content":"不能。Freqtrade 一次只能为每个交易对开一个仓位。\n但是，你可以使用 \n\nadjust_trade_position() 回调来调整开放仓位。\n\n回测在 --eps 中提供了此选项 - 但这只是为了突出显示\"隐藏\"信号，在实盘中不起作用。","type":"content","url":"/faq#freqtrade-1","position":13},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"机器人无法启动","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-4","position":14},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"机器人无法启动","lvl2":"Freqtrade 常见问题"},"content":"使用 freqtrade trade --config config.json 运行机器人时显示输出 freqtrade: command not found。\n\n这可能是由以下原因造成的：\n\n虚拟环境未激活。\n\n运行 source .venv/bin/activate 来激活虚拟环境。\n\n安装未成功完成。\n\n请查看\n\n安装文档。","type":"content","url":"/faq#id-4","position":15},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"机器人启动了，但处于 STOPPED 模式","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-stopped","position":16},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"机器人启动了，但处于 STOPPED 模式","lvl2":"Freqtrade 常见问题"},"content":"确保你在 config.json 中将 initial_state 配置选项设置为 \"running\"","type":"content","url":"/faq#id-stopped","position":17},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我已经等了 5 分钟，为什么机器人还没有进行任何交易？","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-5","position":18},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我已经等了 5 分钟，为什么机器人还没有进行任何交易？","lvl2":"Freqtrade 常见问题"},"content":"根据入场策略、白名单中的币种数量、市场情况等，可能需要数小时或数天才能找到好的交易入场位置。请耐心等待！\n\n回测会告诉你大致预期有多少交易 - 但这并不能保证它们会均匀分布在时间上 - 所以你可能会在一天内有 20 笔交易，而一周内其余时间都是 0。\n\n可能是由于配置错误。最好检查日志，它们通常会告诉你机器人是否只是没有获得买入信号（只有心跳消息），或者是否有问题（日志中的错误/异常）。","type":"content","url":"/faq#id-5","position":19},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我已经做了 12 笔交易，为什么我的总利润是负的？","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-12","position":20},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我已经做了 12 笔交易，为什么我的总利润是负的？","lvl2":"Freqtrade 常见问题"},"content":"我理解你的失望，但不幸的是，12 笔交易还不足以说明任何问题。如果你运行回测，你可以看到当前算法确实让你处于盈利状态，但那是在数千笔交易之后，即使在那里，你也会在特定币种上留下亏损，这些币种你已经交易了数十次甚至数百次。我们当然不断努力改进机器人，但它将_始终_是一场赌博，应该让你在每月基础上获得适度的收益，但从几笔交易中你不能说太多。","type":"content","url":"/faq#id-12","position":21},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我想更改配置。我可以在不杀死机器人的情况下这样做吗？","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-6","position":22},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我想更改配置。我可以在不杀死机器人的情况下这样做吗？","lvl2":"Freqtrade 常见问题"},"content":"是的。你可以编辑你的配置并使用 /reload_config 命令重新加载配置。机器人将停止，重新加载配置和策略，并使用新的配置和策略重新启动。","type":"content","url":"/faq#id-6","position":23},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"为什么我的机器人不卖出它买的所有东西？","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-7","position":24},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"为什么我的机器人不卖出它买的所有东西？","lvl2":"Freqtrade 常见问题"},"content":"这被称为\"币尘\"，可能发生在所有交易所。\n发生这种情况是因为许多交易所从\"接收货币\"中扣除费用 - 所以你买入 100 COIN - 但你只得到 99.9 COIN。\n由于 COIN 以完整手数交易（1COIN 步长），你不能卖出 0.9 COIN（或 99.9 COIN）- 但你需要向下取整到 99 COIN。\n\n这不是机器人问题，在手动交易时也会发生。\n\n虽然 freqtrade 可以处理这个问题（它会卖出 99 COIN），但费用通常低于最小可交易手数（你只能交易完整的 COIN，而不是 0.9 COIN）。\n将币尘（0.9 COIN）留在交易所通常是有意义的，因为下次 freqtrade 买入 COIN 时，它会消耗剩余的小额余额，这次卖出它买的所有东西，因此慢慢减少币尘余额（虽然它很可能永远不会达到正好 0）。\n\n在可能的情况下（例如在币安），使用交易所的专用费用货币将解决这个问题。\n在币安，只需在你的账户中有 BNB，并在你的个人资料中启用\"使用 BNB 支付费用\"。你的 BNB 余额将慢慢减少（因为它用于支付费用）- 但你将不再遇到币尘（Freqtrade 将在利润计算中包括费用）。\n其他交易所不提供这种可能性，在这种情况下，你只能接受或转移到不同的交易所。","type":"content","url":"/faq#id-7","position":25},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我向交易所存入了更多资金，但我的机器人没有识别到","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-8","position":26},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我向交易所存入了更多资金，但我的机器人没有识别到","lvl2":"Freqtrade 常见问题"},"content":"Freqtrade 会在必要时更新交易所余额（在下单之前）。\nRPC 调用（Telegram 的 /balance，API 调用到 /balance）最多可以每小时触发一次更新。\n\n如果启用了 adjust_trade_position（并且机器人有符合条件的开放交易可以调整仓位）- 那么钱包将每小时刷新一次。\n要强制立即更新，你可以使用 /reload_config - 这将重启机器人。","type":"content","url":"/faq#id-8","position":27},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我想使用不完整的蜡烛图","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-9","position":28},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我想使用不完整的蜡烛图","lvl2":"Freqtrade 常见问题"},"content":"Freqtrade 不会向策略提供不完整的蜡烛图。使用不完整的蜡烛图会导致重绘，从而导致策略出现\"幽灵\"买入，这在回测和事后验证都是不可能的。\n\n你可以通过使用\n\n数据提供者的订单簿或行情方法来使用\"当前\"市场数据 - 但这不能在回测期间使用。","type":"content","url":"/faq#id-9","position":29},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"有没有设置可以只出场持有的交易而不进行任何新的入场？","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-10","position":30},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"有没有设置可以只出场持有的交易而不进行任何新的入场？","lvl2":"Freqtrade 常见问题"},"content":"你可以使用 Telegram 中的 /stopentry 命令来防止未来的交易入场，然后使用 /forceexit all（卖出所有开放交易）。","type":"content","url":"/faq#id-10","position":31},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我想在同一台机器上运行多个机器人","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-11","position":32},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我想在同一台机器上运行多个机器人","lvl2":"Freqtrade 常见问题"},"content":"请查看\n\n高级设置文档页面。","type":"content","url":"/faq#id-11","position":33},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"启动机器人时出现\"Impossible to load Strategy\"错误","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-impossible-to-load-strategy","position":34},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"启动机器人时出现\"Impossible to load Strategy\"错误","lvl2":"Freqtrade 常见问题"},"content":"当机器人无法加载策略时，会显示此错误消息。\n通常，你可以使用 freqtrade list-strategies 来列出所有可用的策略。\n此命令的输出还将包括一个状态列，显示是否可以加载策略。\n\n请检查以下内容：\n\n你使用的是正确的策略名称吗？策略名称区分大小写，必须与策略类名对应（不是文件名！）。\n\n策略是否在 user_data/strategies 目录中，并且文件扩展名为 .py？\n\n机器人是否在此错误之前显示其他警告？也许你缺少策略的一些依赖项 - 这将在日志中突出显示。\n\n如果是 docker - 策略目录是否正确挂载（检查 docker-compose 文件的 volumes 部分）？","type":"content","url":"/faq#id-impossible-to-load-strategy","position":35},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我在日志中看到\"Missing data fillup\"消息","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-missing-data-fillup","position":36},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我在日志中看到\"Missing data fillup\"消息","lvl2":"Freqtrade 常见问题"},"content":"此消息只是一个警告，表示最新的蜡烛图中有缺失的蜡烛图。\n根据交易所的不同，这可能表明交易对在你使用的时间框架内没有交易 - 而交易所只返回有成交量的蜡烛图。\n在低成交量交易对上，这是一个相当常见的情况。\n\n如果这对白名单中的所有交易对都发生，这可能表明交易所最近停机。请查看你的交易所的公共渠道了解详情。\n\n无论原因如何，Freqtrade 都会用\"空\"蜡烛图填充这些蜡烛图，其中开盘价、最高价、最低价和收盘价都设置为前一个蜡烛图的收盘价 - 成交量为空。在图表中，这将看起来像一个 _ - 并与交易所通常表示 0 成交量蜡烛图的方式一致。","type":"content","url":"/faq#id-missing-data-fillup","position":37},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我看到\"Price jump between 2 candles detected\"消息","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-price-jump-between-2-candles-detected","position":38},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我看到\"Price jump between 2 candles detected\"消息","lvl2":"Freqtrade 常见问题"},"content":"此消息是一个警告，表示蜡烛图之间的价格跳跃超过 30%。\n这可能表明交易对停止交易，并且发生了一些代币交换（例如 2021 年的 COCOS - 价格从 0.0000154 跳到 0.01621）。\n此消息通常伴随着\n\n\"Missing data fillup\" - 因为此类交易对的交易通常会停止一段时间。","type":"content","url":"/faq#id-price-jump-between-2-candles-detected","position":39},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我想重置机器人的数据库","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-13","position":40},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我想重置机器人的数据库","lvl2":"Freqtrade 常见问题"},"content":"要重置机器人的数据库，你可以删除数据库（默认为 tradesv3.sqlite 或 tradesv3.dryrun.sqlite），或通过 --db-url 使用不同的数据库 URL（例如 sqlite:///mynewdatabase.sqlite）。","type":"content","url":"/faq#id-13","position":41},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我在日志中看到\"Outdated history for pair xxx\"","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-outdated-history-for-pair-xxx","position":42},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我在日志中看到\"Outdated history for pair xxx\"","lvl2":"Freqtrade 常见问题"},"content":"机器人试图告诉你它收到了一个过时的最后一个蜡烛图（不是最后一个完整的蜡烛图）。\n因此，Freqtrade 不会为此交易对入场 - 因为在旧信息上交易通常不是我们想要的。\n\n此警告可能指向以下问题之一：\n\n交易所停机 -> 查看你的交易所状态页面/博客/推特动态了解详情。\n\n系统时间错误 -> 确保你的系统时间正确。\n\n几乎没有交易的交易对 -> 在交易所网页上查看交易对，查看你的策略使用的时间框架。如果交易对在某些蜡烛图中没有任何成交量（通常用\"成交量 0\"柱和\"_\"作为蜡烛图表示），这个交易对在这个时间框架内没有任何交易。理想情况下应该避免这些交易对，因为它们可能导致订单填充问题。\n\nAPI 问题 -> API 返回错误数据（这里只是为了完整性，不应该发生在支持的交易所上）。","type":"content","url":"/faq#id-outdated-history-for-pair-xxx","position":43},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我在日志中看到消息\"Couldn’t reuse watch for xxx\"","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-couldnt-reuse-watch-for-xxx","position":44},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我在日志中看到消息\"Couldn’t reuse watch for xxx\"","lvl2":"Freqtrade 常见问题"},"content":"这是一个信息性消息，表示机器人试图使用来自 websocket 的 K 线数据，但交易所没有提供正确的信息。\n如果 websocket 连接中断 - 或者如果交易对在您使用的时间框架内没有发生任何交易，就可能发生这种情况。\n\nFreqtrade 将通过回退到 REST API 来优雅地处理这种情况。\n虽然这会使迭代稍微变慢（由于 REST API 调用） - 但不会对机器人的运行造成任何问题。","type":"content","url":"/faq#id-couldnt-reuse-watch-for-xxx","position":45},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我看到\"Exchange XXX does not support market orders.\"消息，无法运行我的策略","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-exchange-xxx-does-not-support-market-orders","position":46},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我看到\"Exchange XXX does not support market orders.\"消息，无法运行我的策略","lvl2":"Freqtrade 常见问题"},"content":"正如消息所说，你的交易所不支持市价单，并且你将\n\n订单类型之一设置为\"market\"。你的策略可能是为其他交易所编写的，并为\"stoploss\"订单设置了\"market\"订单，这对于大多数支持市价单的交易所来说是正确的（但对于 \n\nGate.io 不是）。\n\n要修复此问题，在策略中重新定义订单类型，使用\"limit\"而不是\"market\"：    order_types = {\n        ...\n        \"stoploss\": \"limit\",\n        ...\n    }\n\n如果订单类型是在你的自定义配置中定义的，而不是在策略中，则应该在配置文件中应用相同的修复。","type":"content","url":"/faq#id-exchange-xxx-does-not-support-market-orders","position":47},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我尝试启动机器人实盘，但收到 API 权限错误","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-api","position":48},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我尝试启动机器人实盘，但收到 API 权限错误","lvl2":"Freqtrade 常见问题"},"content":"像 Invalid API-key, IP, or permissions for action 这样的错误实际上就是它们所说的意思。\n你的 API 密钥要么无效（复制/粘贴错误？检查配置中是否有前导/尾随空格），已过期，或者你运行机器人的 IP 未在交易所的 API 控制台中启用。\n通常，需要\"现货交易\"权限（或你使用的交易所中的等效权限）。\n期货通常需要特别启用。","type":"content","url":"/faq#id-api","position":49},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"如何搜索机器人日志中的内容？","lvl2":"Freqtrade 常见问题"},"type":"lvl3","url":"/faq#id-14","position":50},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"如何搜索机器人日志中的内容？","lvl2":"Freqtrade 常见问题"},"content":"默认情况下，机器人将其日志写入 stderr 流。这样实现是为了让你可以轻松地将机器人的诊断消息与回测、Edge 和 Hyperopt 结果、其他各种 Freqtrade 实用子命令的输出，以及你可能插入到策略中的自定义 print() 的输出分开。因此，如果你需要使用 grep 实用程序搜索日志消息，你需要将 stderr 重定向到 stdout 并忽略 stdout。\n\n在 unix shell 中，这通常可以简单地完成：> freqtrade --some-options 2>&1 >/dev/null | grep 'something'\n\n（注意，2>&1 和 >/dev/null 应该按此顺序写入）\n\nBash 解释器还支持所谓的进程替换语法，你可以用它来 grep 日志中的字符串：> freqtrade --some-options 2> >(grep 'something') >/dev/null\n\n或> freqtrade --some-options 2> >(grep -v 'something' 1>&2)\n\n你也可以使用 --logfile 选项将 Freqtrade 日志消息的副本写入文件：> freqtrade --logfile /path/to/mylogfile.log --some-options\n\n然后像这样 grep：> cat /path/to/mylogfile.log | grep 'something'\n\n或者甚至在机器人工作时实时查看，随着日志文件的增长：> tail -f /path/to/mylogfile.log | grep 'something'\n\n从单独的终端窗口。\n\n在 Windows 上，Freqtrade 也支持 --logfile 选项，你可以使用 findstr 命令在日志中搜索感兴趣的字符串：> type \\path\\to\\mylogfile.log | findstr \"something\"","type":"content","url":"/faq#id-14","position":51},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"Hyperopt 模块"},"type":"lvl2","url":"/faq#hyperopt","position":52},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"Hyperopt 模块"},"content":"","type":"content","url":"/faq#hyperopt","position":53},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"为什么 freqtrade 没有 GPU 支持？","lvl2":"Hyperopt 模块"},"type":"lvl3","url":"/faq#id-freqtrade-gpu","position":54},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"为什么 freqtrade 没有 GPU 支持？","lvl2":"Hyperopt 模块"},"content":"首先，大多数指标库都没有 GPU 支持 - 因此，指标计算的收益很小。\nGPU 改进只适用于 pandas 原生计算 - 或你自己编写的计算。\n\nGPU 只擅长处理数字（浮点运算）。\n对于 hyperopt，我们需要数字处理（找到下一个参数）和运行 python 代码（运行回测）。\n因此，GPU 不太适合 hyperopt 的大部分部分。\n\n使用 GPU 的好处因此相当小 - 并且不会证明尝试添加 GPU 支持所带来的复杂性是合理的。\n\n但是，如果你认为必须这样做，没有什么可以阻止你在策略中使用支持 GPU 的指标 - 但是你可能会对这将给你带来的微小收益感到失望（与复杂性相比）。","type":"content","url":"/faq#id-freqtrade-gpu","position":55},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我需要多少个 epoch 才能获得好的 Hyperopt 结果？","lvl2":"Hyperopt 模块"},"type":"lvl3","url":"/faq#id-epoch-hyperopt","position":56},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"我需要多少个 epoch 才能获得好的 Hyperopt 结果？","lvl2":"Hyperopt 模块"},"content":"默认情况下，不带 -e/--epochs 命令行选项调用的 Hyperopt 只会运行 100 个 epoch，意味着对你的触发器、守卫等进行 100 次评估。太少而无法找到很好的结果（除非你非常幸运），所以你可能需要运行 10000 或更多。但这将需要很长时间来计算。\n\n由于 hyperopt 使用贝叶斯搜索，运行太多 epoch 可能不会产生更好的结果。\n\n因此，建议反复运行 500-1000 个 epoch，直到你总共达到至少 10000 个 epoch（或对结果满意）。你可以通过查看结果来判断 - 如果机器人不断发现更好的策略，最好继续运行。freqtrade hyperopt --hyperopt-loss SharpeHyperOptLossDaily --strategy SampleStrategy -e 1000","type":"content","url":"/faq#id-epoch-hyperopt","position":57},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"为什么运行 hyperopt 需要很长时间？","lvl2":"Hyperopt 模块"},"type":"lvl3","url":"/faq#id-hyperopt","position":58},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"为什么运行 hyperopt 需要很长时间？","lvl2":"Hyperopt 模块"},"content":"使用 Hyperopt 发现一个伟大的策略需要时间。研究 \n\nwww.freqtrade.io，Freqtrade 文档页面，加入 Freqtrade \n\ndiscord 社区。当你耐心等待世界上最先进的免费加密货币机器人，为你特别设计一个可能的黄金策略时。\n\n如果你想知道为什么做 1000 个 epoch 可能需要从 20 分钟到几天，这里有一些答案：\n\n这个答案是在 0.15.1 版本发布期间写的，当时我们有：\n\n8 个触发器\n\n9 个守卫：假设我们每个评估 10 个值\n\n1 个止损计算：假设我们也想评估 10 个值\n\n以下计算仍然非常粗略且不太精确，但它会给出一个概念。仅这些触发器和守卫就有 8*10^9*10 次评估。大约总共 800 亿次评估。\n你运行了 100000 次评估？恭喜，你已经完成了搜索空间的大约 1/100000，假设机器人从未多次测试相同的参数。\n\n运行 1000 个 hyperopt epoch 所需的时间取决于以下因素：可用的 cpu、硬盘、内存、时间框架、时间范围、指标设置、指标数量、hyperopt 测试策略的币种数量以及由此产生的交易数量 - 这可能是一年 650 笔交易或 100000 笔交易，取决于策略是旨在通过很少交易获得大利润，还是通过许多低利润交易。\n\n示例：一年中 650 次 4% 利润 vs 10000 次 0.3% 利润。假设你将 --timerange 设置为 365 天。\n\n示例：\nfreqtrade --config config.json --strategy SampleStrategy --hyperopt SampleHyperopt -e 1000 --timerange 20190601-20200601","type":"content","url":"/faq#id-hyperopt","position":59},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"Edge 模块"},"type":"lvl2","url":"/faq#edge","position":60},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"Edge 模块"},"content":"","type":"content","url":"/faq#edge","position":61},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"Edge 实现了一个有趣的方法来控制仓位大小，这背后有什么理论吗？","lvl2":"Edge 模块"},"type":"lvl3","url":"/faq#edge-1","position":62},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl3":"Edge 实现了一个有趣的方法来控制仓位大小，这背后有什么理论吗？","lvl2":"Edge 模块"},"content":"Edge 模块主要是 freqtrade 团队成员 \n\n 和 \n\n 头脑风暴的结果。\n\n你可以在以下来源中找到关于期望值、胜率、风险管理和仓位大小的更多信息：\n\nhttps://​www​.tradeciety​.com​/ultimate​-math​-guide​-for​-traders/\n\nhttps://​samuraitradingacademy​.com​/trading​-expectancy/\n\nhttps://​www​.learningmarkets​.com​/determining​-expectancy​-in​-your​-trading/\n\nhttps://​www​.lonestocktrader​.com​/make​-money​-trading​-positive​-expectancy/\n\nhttps://​www​.babypips​.com​/trading​/trade​-expectancy​-matter","type":"content","url":"/faq#edge-1","position":63},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"官方渠道"},"type":"lvl2","url":"/faq#id-15","position":64},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"官方渠道"},"content":"Freqtrade 仅使用以下官方渠道：\n\nFreqtrade discord 服务器\n\nFreqtrade 文档 (https://freqtrade.io)\n\nFreqtrade github 组织\n\n与 freqtrade 项目相关的任何人都不会询问你的交易所密钥或任何其他可能暴露你的资金被利用的信息。\n如果有人要求你暴露交易所密钥或将资金发送到某个随机钱包，请不要遵循这些指示。\n\n不遵循这些准则将不是 freqtrade 的责任。","type":"content","url":"/faq#id-15","position":65},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"“Freqtrade 代币”"},"type":"lvl2","url":"/faq#freqtrade-2","position":66},{"hierarchy":{"lvl1":"Freqtrade 常见问题","lvl2":"“Freqtrade 代币”"},"content":"Freqtrade 没有加密货币代币发行。\n\n你在互联网上找到的提及 Freqtrade、FreqAI 或 freqUI 的代币发行必须被视为骗局，试图利用 freqtrade 的受欢迎程度来获取他们自己的不正当利益。","type":"content","url":"/faq#freqtrade-2","position":67},{"hierarchy":{"lvl1":"FreqUI 用户界面"},"type":"lvl1","url":"/freq-ui","position":0},{"hierarchy":{"lvl1":"FreqUI 用户界面"},"content":"","type":"content","url":"/freq-ui","position":1},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl2":"FreqUI"},"type":"lvl2","url":"/freq-ui#frequi","position":2},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl2":"FreqUI"},"content":"Freqtrade 提供了一个内置的 Web 服务器，可以运行 \n\nFreqUI，即 freqtrade 的前端界面。\n\n默认情况下，UI 会作为安装过程的一部分自动安装（脚本、docker）。\nfreqUI 也可以通过使用 freqtrade install-ui 命令手动安装。\n这个命令也可以用来将 freqUI 更新到新版本。\n\n一旦机器人在交易/模拟模式下启动（使用 freqtrade trade）- UI 将在配置的 API 端口下可用（默认为 http://127.0.0.1:8080）。\n\n想要为 freqUI 做贡献？\n\n开发者不应该使用这种方法，而是应该克隆相应的仓库并使用 \n\nfreqUI 仓库 中描述的方法来获取 freqUI 的源代码。构建前端需要安装可用的 node。\n\n运行 freqtrade 不需要 freqUI\n\nfreqUI 是 freqtrade 的可选组件，运行机器人不需要它。\n它是一个可以用来监控机器人并与之交互的前端界面 - 但 freqtrade 本身在没有它的情况下也能完美运行。","type":"content","url":"/freq-ui#frequi","position":3},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl3":"配置","lvl2":"FreqUI"},"type":"lvl3","url":"/freq-ui#id","position":4},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl3":"配置","lvl2":"FreqUI"},"content":"FreqUI 没有自己的配置文件 - 但假设 \n\nrest-api 有可用的工作设置。\n请参考相应的文档页面来设置 freqUI","type":"content","url":"/freq-ui#id","position":5},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl3":"界面","lvl2":"FreqUI"},"type":"lvl3","url":"/freq-ui#id-1","position":6},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl3":"界面","lvl2":"FreqUI"},"content":"FreqUI 是一个现代化的响应式 Web 应用程序，可用于监控和与您的机器人交互。\n\nFreqUI 提供了浅色和深色主题。\n可以通过页面顶部的突出按钮轻松切换主题。\n本页面上截图的主题将适应所选文档主题，因此要查看深色（或浅色）版本，请切换文档的主题。","type":"content","url":"/freq-ui#id-1","position":7},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl4":"登录","lvl3":"界面","lvl2":"FreqUI"},"type":"lvl4","url":"/freq-ui#id-2","position":8},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl4":"登录","lvl3":"界面","lvl2":"FreqUI"},"content":"下面的截图显示了 freqUI 的登录界面。\n\nCORS\n\n此截图中显示的 Cors 错误是因为 UI 运行在与 API 不同的端口上，并且 \n\nCORS 尚未正确设置。","type":"content","url":"/freq-ui#id-2","position":9},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl4":"交易视图","lvl3":"界面","lvl2":"FreqUI"},"type":"lvl4","url":"/freq-ui#id-3","position":10},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl4":"交易视图","lvl3":"界面","lvl2":"FreqUI"},"content":"交易视图允许您可视化机器人正在进行的交易并与机器人交互。\n\n在此页面上，您还可以通过启动和停止机器人来与之交互，如果配置了的话，还可以强制交易入场和出场。","type":"content","url":"/freq-ui#id-3","position":11},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl4":"图表配置器","lvl3":"界面","lvl2":"FreqUI"},"type":"lvl4","url":"/freq-ui#id-4","position":12},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl4":"图表配置器","lvl3":"界面","lvl2":"FreqUI"},"content":"FreqUI 图表可以通过策略中的 plot_config 配置对象（可以通过\"从策略加载\"按钮加载）或通过 UI 进行配置。\n\n可以创建多个图表配置并随意切换 - 允许灵活、不同地查看您的图表。\n\n可以通过交易视图右上角的\"图表配置器\"（齿轮图标）按钮访问图表配置。","type":"content","url":"/freq-ui#id-4","position":13},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl4":"设置","lvl3":"界面","lvl2":"FreqUI"},"type":"lvl4","url":"/freq-ui#id-5","position":14},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl4":"设置","lvl3":"界面","lvl2":"FreqUI"},"content":"可以通过访问设置页面更改多个 UI 相关设置。\n\n您可以更改的内容（包括但不限于）：\n\nUI 的时区\n\n在浏览器标签页的图标中显示开放交易\n\n蜡烛图颜色（上涨/下跌 -> 红色/绿色）\n\n启用/禁用应用内通知类型","type":"content","url":"/freq-ui#id-5","position":15},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl3":"回测","lvl2":"FreqUI"},"type":"lvl3","url":"/freq-ui#id-6","position":16},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl3":"回测","lvl2":"FreqUI"},"content":"当 freqtrade 在 \n\nwebserver 模式 下启动（使用 freqtrade webserver 启动 freqtrade）时，回测视图变为可用。\n此视图允许您回测策略并可视化结果。\n\n您还可以加载和可视化之前的回测结果，以及相互比较结果。\n\n","type":"content","url":"/freq-ui#id-6","position":17},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl3":"CORS","lvl2":"FreqUI"},"type":"lvl3","url":"/freq-ui#cors","position":18},{"hierarchy":{"lvl1":"FreqUI 用户界面","lvl3":"CORS","lvl2":"FreqUI"},"content":"本节内容仅在跨源情况下需要（当你有多个机器人 API 运行在 localhost:8081、localhost:8082 等端口上，并想要将它们组合到一个 FreqUI 实例中时）。\n\n技术说明\n\n所有基于 Web 的前端都受到 \n\nCORS（跨源资源共享）的限制。\n\n由于大多数对 Freqtrade API 的请求都需要认证，因此正确的 CORS 策略对于避免安全问题至关重要。\n\n此外，标准不允许对带有凭证的请求使用 * CORS 策略，因此必须适当设置此配置。\n\n用户可以通过 CORS_origins 配置设置来允许不同源 URL 访问机器人 API。\n它包含一个允许访问机器人 API 资源的 URL 列表。\n\n假设你的应用程序部署在 https://frequi.freqtrade.io/home/ - 这意味着需要以下配置：{\n    //...\n    \"jwt_secret_key\": \"somethingrandom\",\n    \"CORS_origins\": [\"https://frequi.freqtrade.io\"],\n    //...\n}\n\n在以下（相当常见的）情况下，FreqUI 可以通过 http://localhost:8080/trade 访问（这是你在导航到 freqUI 时在导航栏中看到的）。\n\n这种情况的正确配置是 http://localhost:8080 - URL 的主要部分，包括端口。{\n    //...\n    \"jwt_secret_key\": \"somethingrandom\",\n    \"CORS_origins\": [\"http://localhost:8080\"],\n    //...\n}\n\n尾部斜杠\n\nCORS_origins 配置中不允许使用尾部斜杠（例如 \"http://localhots:8080/\"）。\n\n这样的配置将不会生效，CORS 错误将继续存在。\n\n强烈建议\n\n我们强烈建议将 jwt_secret_key 设置为只有你自己知道的随机值，以避免未经授权访问你的机器人。","type":"content","url":"/freq-ui#cors","position":19},{"hierarchy":{"lvl1":"FreqAI 配置指南"},"type":"lvl1","url":"/freqai-configuration","position":0},{"hierarchy":{"lvl1":"FreqAI 配置指南"},"content":"","type":"content","url":"/freqai-configuration","position":1},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl2":"配置"},"type":"lvl2","url":"/freqai-configuration#id","position":2},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl2":"配置"},"content":"FreqAI 通过典型的 \n\nFreqtrade 配置文件 和标准的 \n\nFreqtrade 策略 进行配置。FreqAI 配置和策略文件的示例分别可在 config_examples/config_freqai.example.json 和 freqtrade/templates/FreqaiExampleStrategy.py 中找到。","type":"content","url":"/freqai-configuration#id","position":3},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"配置文件设置","lvl2":"配置"},"type":"lvl3","url":"/freqai-configuration#id-1","position":4},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"配置文件设置","lvl2":"配置"},"content":"虽然有许多可选参数可供选择（详见\n\n参数表），但 FreqAI 配置至少必须包含以下参数（参数值仅为示例）：    \"freqai\": {\n        \"enabled\": true,\n        \"purge_old_models\": 2,\n        \"train_period_days\": 30,\n        \"backtest_period_days\": 7,\n        \"identifier\" : \"unique-id\",\n        \"feature_parameters\" : {\n            \"include_timeframes\": [\"5m\",\"15m\",\"4h\"],\n            \"include_corr_pairlist\": [\n                \"ETH/USD\",\n                \"LINK/USD\",\n                \"BNB/USD\"\n            ],\n            \"label_period_candles\": 24,\n            \"include_shifted_candles\": 2,\n            \"indicator_periods_candles\": [10, 20]\n        },\n        \"data_split_parameters\" : {\n            \"test_size\": 0.25\n        }\n    }\n\n完整的配置示例可在 config_examples/config_freqai.example.json 中找到。\n\nNote\n\nidentifier 常被新手忽略，但它在你的配置中起着重要作用。这个值是你为某次运行选择的唯一 ID。保持它不变可以实现崩溃恢复和更快的回测。当你想尝试新的运行（新特征、新模型等）时，应更改此值（或删除 user_data/models/unique-id 文件夹）。更多细节见\n\n参数表。","type":"content","url":"/freqai-configuration#id-1","position":5},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"构建 FreqAI 策略","lvl2":"配置"},"type":"lvl3","url":"/freqai-configuration#id-freqai","position":6},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"构建 FreqAI 策略","lvl2":"配置"},"content":"FreqAI 策略需要在标准 \n\nFreqtrade 策略 中包含以下代码：    # 用户应定义最大启动蜡烛数（传递给任一指标的最大蜡烛数）\n    startup_candle_count: int = 20\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n\n        # 模型将返回用户在 `set_freqai_targets()` 中创建的所有标签\n        # （及附加目标）、是否应接受预测的指示、\n        # 以及每个训练周期用户在 `set_freqai_targets()` 中创建的每个标签的目标均值/标准差。\n\n        dataframe = self.freqai.start(dataframe, metadata, self)\n\n        return dataframe\n\n    def feature_engineering_expand_all(self, dataframe: DataFrame, period, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在启用 FreqAI 的策略中有效*\n        此函数会根据配置中定义的 `indicator_periods_candles`、`include_timeframes`、`include_shifted_candles` 和 `include_corr_pairs` 自动扩展定义的特征。换句话说，在此函数中定义的单个特征会自动扩展为\n        `indicator_periods_candles` * `include_timeframes` * `include_shifted_candles` *\n        `include_corr_pairs` 个特征添加到模型中。\n\n        所有特征必须以 `%` 开头，FreqAI 内部才能识别。\n\n        :param df: 将接收特征的策略数据框\n        :param period: 指标的周期 - 用法示例：\n        dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n        \"\"\"\n\n        dataframe[\"%-rsi-period\"] = ta.RSI(dataframe, timeperiod=period)\n        dataframe[\"%-mfi-period\"] = ta.MFI(dataframe, timeperiod=period)\n        dataframe[\"%-adx-period\"] = ta.ADX(dataframe, timeperiod=period)\n        dataframe[\"%-sma-period\"] = ta.SMA(dataframe, timeperiod=period)\n        dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n\n        return dataframe\n\n    def feature_engineering_expand_basic(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在启用 FreqAI 的策略中有效*\n        此函数会根据配置中定义的 `include_timeframes`、`include_shifted_candles` 和 `include_corr_pairs` 自动扩展定义的特征。换句话说，在此函数中定义的单个特征会自动扩展为\n        `include_timeframes` * `include_shifted_candles` * `include_corr_pairs`\n        个特征添加到模型中。\n\n        这里定义的特征*不会*在用户定义的 `indicator_periods_candles` 上自动复制。\n\n        所有特征必须以 `%` 开头，FreqAI 内部才能识别。\n\n        :param df: 将接收特征的策略数据框\n        dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n        dataframe[\"%-ema-200\"] = ta.EMA(dataframe, timeperiod=200)\n        \"\"\"\n        dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n        dataframe[\"%-raw_volume\"] = dataframe[\"volume\"]\n        dataframe[\"%-raw_price\"] = dataframe[\"close\"]\n        return dataframe\n\n    def feature_engineering_standard(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在启用 FreqAI 的策略中有效*\n        此可选函数会在基础时间框架的数据框上调用一次。\n        这是要调用的最终函数，这意味着进入此函数的数据框将包含所有其他\n        freqai_feature_engineering_* 函数创建的所有特征和列。\n\n        这是进行自定义特征提取（如 tsfresh）的好地方。\n        也是定义不应自动扩展的特征（如星期几）的好地方。\n\n        所有特征必须以 `%` 开头，FreqAI 内部才能识别。\n\n        :param df: 将接收特征的策略数据框\n        用法示例：dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n        \"\"\"\n        dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n        dataframe[\"%-hour_of_day\"] = (dataframe[\"date\"].dt.hour + 1) / 25\n        return dataframe\n\n    def set_freqai_targets(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在启用 FreqAI 的策略中有效*\n        设置模型目标的必需函数。\n        所有目标必须以 `&` 开头，FreqAI 内部才能识别。\n\n        :param df: 将接收目标的策略数据框\n        用法示例：dataframe[\"&-target\"] = dataframe[\"close\"].shift(-1) / dataframe[\"close\"]\n        \"\"\"\n        dataframe[\"&-s_close\"] = (\n            dataframe[\"close\"]\n            .shift(-self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n            .rolling(self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n            .mean()\n            / dataframe[\"close\"]\n            - 1\n            )\n        return dataframe\n\n注意 feature_engineering_*() 是添加\n\n特征的地方，而 set_freqai_targets() 用于添加标签/目标。完整的策略示例见 templates/FreqaiExampleStrategy.py。\n\nNote\n\nself.freqai.start() 函数不能在 populate_indicators() 之外调用。\n\nNote\n\n特征必须在 feature_engineering_*() 中定义。在 populate_indicators() 中定义 FreqAI 特征会导致算法在 live/dry 模式下失败。若要添加与特定交易对或时间框架无关的通用特征，应使用 feature_engineering_standard()（如 freqtrade/templates/FreqaiExampleStrategy.py 所示）。","type":"content","url":"/freqai-configuration#id-freqai","position":7},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"重要的数据框键模式","lvl2":"配置"},"type":"lvl3","url":"/freqai-configuration#id-2","position":8},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"重要的数据框键模式","lvl2":"配置"},"content":"以下是你可以在典型策略数据框（df[]）中包含/使用的键：\n\nDataFrame 键\n\n描述\n\ndf['&*']\n\n任何在 set_freqai_targets() 中以 & 开头的数据框列都会被 FreqAI 视为训练目标（标签）（通常遵循 &-s* 命名约定）。例如，要预测未来 40 根蜡烛的收盘价，你可以设置 df['&-s_close'] = df['close'].shift(-self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])，并在配置中设置 \"label_period_candles\": 40。FreqAI 会做出预测并以相同的键（df['&-s_close']）返回结果，可在 populate_entry/exit_trend() 中使用。 数据类型： 取决于模型输出。\n\ndf['&*_std/mean']\n\n训练期间（或使用 fit_live_predictions_candles 进行实时跟踪时）定义标签的标准差和均值。常用于了解预测的罕见程度（可用 z-score，如 templates/FreqaiExampleStrategy.py 所示，并在\n\n此处解释，用于评估某一预测在训练期间或历史上出现的频率）。 数据类型： 浮点数。\n\ndf['do_predict']\n\n异常点指示。返回值为 -2 到 2 的整数，表示预测是否可信。do_predict==1 表示预测可信。如果输入数据点的 Dissimilarity Index（DI，详见\n\n此处）高于配置阈值，FreqAI 会将 do_predict 减 1，结果为 do_predict==0。如果启用 use_SVM_to_remove_outliers，支持向量机（SVM，详见\n\n此处）也可能检测到训练和预测数据中的异常值，此时 SVM 也会将 do_predict 减 1。如果 SVM 和 DI 之一认为是异常点，结果为 do_predict==0；如果两者都认为是异常点，结果为 do_predict==-1。如果同时启用 SVM 和 DBSCAN（详见\n\n此处），且两者都检测到异常点，结果为 do_predict==-2。特殊情况是 do_predict == 2，表示模型因超出 expired_hours 而过期。 数据类型： -2 到 2 之间的整数。\n\ndf['DI_values']\n\nDI（Dissimilarity Index）值是 FreqAI 对预测置信度的代理。DI 越低，预测越接近训练数据，即置信度越高。详见\n\n此处。 数据类型： 浮点数。\n\ndf['%*']\n\n任何在 feature_engineering_*() 中以 % 开头的数据框列都会被视为训练特征。例如，你可以通过设置 df['%-rsi'] 将 RSI 纳入训练特征集（如 templates/FreqaiExampleStrategy.py）。更多细节见\n\n此处。 注意： 由于以 % 开头的特征数量会迅速增加（如 include_shifted_candles 和 include_timeframes 的乘法功能，详见\n\n参数表），这些特征会在 FreqAI 返回给策略的数据框中被移除。若要保留某类特征用于绘图，应以 %% 开头（见下文）。 数据类型： 取决于用户创建的特征。\n\ndf['%%*']\n\n任何在 feature_engineering_*() 中以 %% 开头的数据框列也会被视为训练特征，与上面的 % 类似。但此时这些特征会返回给策略，用于 FreqUI/plot-dataframe 绘图和 Dry/Live/Backtesting 监控。 数据类型： 取决于用户创建的特征。请注意，在 feature_engineering_expand() 中创建的特征会根据你配置的扩展自动采用 FreqAI 命名方案（如 include_timeframes、include_corr_pairlist、indicators_periods_candles、include_shifted_candles）。因此，如果你想绘制 %%-rsi，最终的绘图配置名称可能是：%%-rsi-period_10_ETH/USDT:USDT_1h，表示 rsi 特征，period=10，timeframe=1h，pair=ETH/USDT:USDT（如果用的是期货对会加 :USDT）。建议在 populate_indicators() 中 self.freqai.start() 之后加 print(dataframe.columns)，查看可用于绘图的所有特征。","type":"content","url":"/freqai-configuration#id-2","position":9},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"设置 startup_candle_count","lvl2":"配置"},"type":"lvl3","url":"/freqai-configuration#id-startup-candle-count","position":10},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"设置 startup_candle_count","lvl2":"配置"},"content":"FreqAI 策略中的 startup_candle_count 需与标准 Freqtrade 策略设置方式一致（详见\n\n此处）。该值用于确保在调用 dataprovider 时有足够的数据，避免首次训练时出现 NaN。你可以通过找出传递给指标创建函数（如 TA-Lib 函数）的最大周期（以蜡烛为单位）来设置此值。在示例中，startup_candle_count 为 20，因为这是 indicators_periods_candles 中的最大值。\n\nNote\n\n有些 TA-Lib 函数实际上需要比传递的 period 更多的数据，否则特征集会被 NaN 填充。经验上，将 startup_candle_count 乘以 2 总能获得无 NaN 的训练集。因此，通常最安全的做法是将预期的 startup_candle_count 乘以 2。你可以通过如下日志确认数据是否干净：2022-08-31 15:14:04 - freqtrade.freqai.data_kitchen - INFO - dropped 0 training points due to NaNs in populated dataset 4319.","type":"content","url":"/freqai-configuration#id-startup-candle-count","position":11},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"创建动态目标阈值","lvl2":"配置"},"type":"lvl3","url":"/freqai-configuration#id-3","position":12},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"创建动态目标阈值","lvl2":"配置"},"content":"决定何时入场或出场可以采用动态方式以反映当前市场状况。FreqAI 允许你从模型训练中返回额外信息（详见\n\n此处）。例如，&*_std/mean 返回值描述了最近一次训练期间目标/标签的统计分布。将某一预测与这些值比较，可以了解预测的罕见程度。在 templates/FreqaiExampleStrategy.py 中，target_roi 和 sell_roi 被定义为距离均值 1.25 个标准差，这样更接近均值的预测会被过滤掉。dataframe[\"target_roi\"] = dataframe[\"&-s_close_mean\"] + dataframe[\"&-s_close_std\"] * 1.25\ndataframe[\"sell_roi\"] = dataframe[\"&-s_close_mean\"] - dataframe[\"&-s_close_std\"] * 1.25\n\n如果你想用历史预测的分布来创建动态目标，而不是用训练信息，可以在配置中设置 fit_live_predictions_candles 为你希望用于生成目标统计的历史预测蜡烛数。    \"freqai\": {\n        \"fit_live_predictions_candles\": 300,\n    }\n\n如果设置了该值，FreqAI 会先用训练数据的预测，随后引入实际预测数据。FreqAI 会保存这些历史数据，如果你用相同的 identifier 停止并重启模型，这些数据会被重新加载。","type":"content","url":"/freqai-configuration#id-3","position":13},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"使用不同的预测模型","lvl2":"配置"},"type":"lvl3","url":"/freqai-configuration#id-4","position":14},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"使用不同的预测模型","lvl2":"配置"},"content":"FreqAI 已内置多种可直接通过 --freqaimodel 标志使用的预测模型库。这些库包括 CatBoost、LightGBM 和 XGBoost 的回归、分类和多目标模型，位于 freqai/prediction_models/。\n\n回归模型和分类模型预测的目标不同——回归模型预测连续值（如明天 BTC 的价格），而分类器预测离散值（如明天 BTC 是否会上涨）。因此，你需要根据所用模型类型以不同方式指定目标（详见\n\n下文）。\n\n上述所有模型库都实现了梯度提升决策树算法。它们都基于集成学习原理，将多个简单学习器的预测组合起来，获得更稳定、泛化能力更强的最终预测。这里的简单学习器是决策树。梯度提升指的是学习方法，每个简单学习器按顺序构建，后一个学习器用于改进前一个的误差。想了解更多可参考各自的官方文档：\n\nCatBoost: \n\nhttps://​catboost​.ai​/en​/docs/\n\nLightGBM: \n\nhttps://​lightgbm​.readthedocs​.io​/en​/v3​.3​.2​/#\n\nXGBoost: \n\nhttps://​xgboost​.readthedocs​.io​/en​/stable​/#\n\n还有许多在线文章对这些算法进行描述和比较。例如 \n\nCatBoost vs. LightGBM vs. XGBoost — 哪个算法最好？ 和 \n\nXGBoost、LightGBM 还是 CatBoost — 我该用哪个提升算法？。请记住，每种模型的性能高度依赖于具体应用，任何报告的指标未必适用于你的场景。\n\n除了 FreqAI 已有的模型，你还可以用 IFreqaiModel 类自定义和创建自己的预测模型。建议你重写 fit()、train() 和 predict()，以自定义训练过程的各个方面。你可以将自定义 FreqAI 模型放在 user_data/freqaimodels，freqtrade 会根据 --freqaimodel 名称（需与自定义模型类名一致）自动加载。请确保使用唯一名称，避免覆盖内置模型。","type":"content","url":"/freqai-configuration#id-4","position":15},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl4":"设置模型目标","lvl3":"使用不同的预测模型","lvl2":"配置"},"type":"lvl4","url":"/freqai-configuration#id-5","position":16},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl4":"设置模型目标","lvl3":"使用不同的预测模型","lvl2":"配置"},"content":"","type":"content","url":"/freqai-configuration#id-5","position":17},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"回归器","lvl4":"设置模型目标","lvl3":"使用不同的预测模型","lvl2":"配置"},"type":"lvl5","url":"/freqai-configuration#id-6","position":18},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"回归器","lvl4":"设置模型目标","lvl3":"使用不同的预测模型","lvl2":"配置"},"content":"如果你用的是回归器，需要指定连续值目标。FreqAI 包含多种回归器，如通过 --freqaimodel CatboostRegressor 使用的 CatboostRegressor。例如，预测未来 100 根蜡烛的价格目标可这样设置：df['&s-close_price'] = df['close'].shift(-100)\n\n如果你想预测多个目标，需要用上述语法定义多个标签。","type":"content","url":"/freqai-configuration#id-6","position":19},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"分类器","lvl4":"设置模型目标","lvl3":"使用不同的预测模型","lvl2":"配置"},"type":"lvl5","url":"/freqai-configuration#id-7","position":20},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"分类器","lvl4":"设置模型目标","lvl3":"使用不同的预测模型","lvl2":"配置"},"content":"如果你用的是分类器，需要指定离散值目标。FreqAI 包含多种分类器，如通过 --freqaimodel CatboostClassifier 使用的 CatboostClassifier。如果你选择用分类器，类别需用字符串设置。例如，预测未来 100 根蜡烛价格是涨还是跌：df['&s-up_or_down'] = np.where( df[\"close\"].shift(-100) > df[\"close\"], 'up', 'down')\n\n如果你想预测多个目标，必须在同一标签列中指定所有标签。例如，可以添加 same 标签来表示价格未变：df['&s-up_or_down'] = np.where( df[\"close\"].shift(-100) > df[\"close\"], 'up', 'down')\ndf['&s-up_or_down'] = np.where( df[\"close\"].shift(-100) == df[\"close\"], 'same', df['&s-up_or_down'])","type":"content","url":"/freqai-configuration#id-7","position":21},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"PyTorch 模块","lvl2":"配置"},"type":"lvl3","url":"/freqai-configuration#pytorch","position":22},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl3":"PyTorch 模块","lvl2":"配置"},"content":"","type":"content","url":"/freqai-configuration#pytorch","position":23},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl4":"快速开始","lvl3":"PyTorch 模块","lvl2":"配置"},"type":"lvl4","url":"/freqai-configuration#id-8","position":24},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl4":"快速开始","lvl3":"PyTorch 模块","lvl2":"配置"},"content":"最快速运行 pytorch 模型的方法如下（回归任务）：freqtrade trade --config config_examples/config_freqai.example.json --strategy FreqaiExampleStrategy --freqaimodel PyTorchMLPRegressor --strategy-path freqtrade/templates \n\n安装/docker\n\nPyTorch 模块需要如 torch 这样的大型包，需在 ./setup.sh -i 时明确选择，在 “Do you also want dependencies for freqai-rl or PyTorch (~700mb additional space required) [y/N]?” 问题时回答 “y”。\n\n喜欢 docker 的用户应确保使用带 _freqaitorch 后缀的 docker 镜像。\n\n我们在 docker/docker-compose-freqai.yml 中提供了专用的 docker-compose 文件，可通过 docker compose -f docker/docker-compose-freqai.yml run ... 使用，或复制替换原有 docker 文件。\n\n该 docker-compose 文件还包含一个（默认禁用的）部分，用于在 docker 容器中启用 GPU 资源。显然，这要求系统本身有可用的 GPU 资源。\n\nPyTorch 从 2.3 版本起不再支持 macOS x64（基于 Intel 的 Apple 设备）。因此 freqtrade 也不再支持该平台上的 PyTorch。","type":"content","url":"/freqai-configuration#id-8","position":25},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"type":"lvl4","url":"/freqai-configuration#id-9","position":26},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"content":"","type":"content","url":"/freqai-configuration#id-9","position":27},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"模型","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"type":"lvl5","url":"/freqai-configuration#id-10","position":28},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"模型","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"content":"你可以通过在自定义 \n\nIFreqaiModel 文件中定义 nn.Module 类，并在 def train() 函数中使用该类，来构建自己的 PyTorch 神经网络架构。以下是用 PyTorch 实现的逻辑回归模型示例（分类任务应配合 nn.BCELoss 损失函数使用）。class LogisticRegression(nn.Module):\n    def __init__(self, input_size: int):\n        super().__init__()\n        # 定义层\n        self.linear = nn.Linear(input_size, 1)\n        self.activation = nn.Sigmoid()\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        # 前向传播\n        out = self.linear(x)\n        out = self.activation(out)\n        return out\n\nclass MyCoolPyTorchClassifier(BasePyTorchClassifier):\n    \"\"\"\n    这是一个自定义 IFreqaiModel，展示了用户如何为训练设置自己的神经网络架构。\n    \"\"\"\n\n    @property\n    def data_convertor(self) -> PyTorchDataConvertor:\n        return DefaultPyTorchDataConvertor(target_tensor_type=torch.float)\n\n    def __init__(self, **kwargs) -> None:\n        super().__init__(**kwargs)\n        config = self.freqai_info.get(\"model_training_parameters\", {})\n        self.learning_rate: float = config.get(\"learning_rate\",  3e-4)\n        self.model_kwargs: dict[str, Any] = config.get(\"model_kwargs\",  {})\n        self.trainer_kwargs: dict[str, Any] = config.get(\"trainer_kwargs\",  {})\n\n    def fit(self, data_dictionary: dict, dk: FreqaiDataKitchen, **kwargs) -> Any:\n        \"\"\"\n        用户在此设置训练和测试数据以适配所需模型\n        :param data_dictionary: 包含所有训练、测试、标签、权重数据的字典\n        :param dk: 当前币种/模型的数据厨房对象\n        \"\"\"\n\n        class_names = self.get_class_names()\n        self.convert_label_column_to_int(data_dictionary, dk, class_names)\n        n_features = data_dictionary[\"train_features\"].shape[-1]\n        model = LogisticRegression(\n            input_dim=n_features\n        )\n        model.to(self.device)\n        optimizer = torch.optim.AdamW(model.parameters(), lr=self.learning_rate)\n        criterion = torch.nn.CrossEntropyLoss()\n        init_model = self.get_init_model(dk.pair)\n        trainer = PyTorchModelTrainer(\n            model=model,\n            optimizer=optimizer,\n            criterion=criterion,\n            model_meta_data={\"class_names\": class_names},\n            device=self.device,\n            init_model=init_model,\n            data_convertor=self.data_convertor,\n            **self.trainer_kwargs,\n        )\n        trainer.fit(data_dictionary, self.splits)\n        return trainer","type":"content","url":"/freqai-configuration#id-10","position":29},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"训练器","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"type":"lvl5","url":"/freqai-configuration#id-11","position":30},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"训练器","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"content":"PyTorchModelTrainer 执行标准的 PyTorch 训练循环：\n定义模型、损失函数和优化器，然后将它们移动到合适的设备（GPU 或 CPU）。在循环中，遍历 dataloader 中的批次，将数据移动到设备，计算预测和损失，反向传播，并用优化器更新模型参数。\n\n此外，训练器还负责：\n\n保存和加载模型\n\n将数据从 pandas.DataFrame 转换为 torch.Tensor","type":"content","url":"/freqai-configuration#id-11","position":31},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"与 Freqai 模块集成","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"type":"lvl5","url":"/freqai-configuration#id-freqai-1","position":32},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"与 Freqai 模块集成","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"content":"与所有 freqai 模型一样，PyTorch 模型继承自 IFreqaiModel。IFreqaiModel 声明了三个抽象方法：train、fit 和 predict。我们在三层继承体系中实现这些方法。\n从上到下：\n\nBasePyTorchModel - 实现 train 方法。所有 BasePyTorch* 继承自它。负责通用数据准备（如数据归一化）并调用 fit 方法。设置子类用到的 device 属性和父类用到的 model_type 属性。\n\nBasePyTorch* -  实现 predict 方法。* 代表一组算法，如分类器或回归器。负责数据预处理、预测和必要的后处理。\n\nPyTorch*Classifier / PyTorch*Regressor - 实现 fit 方法。负责主要的训练流程，初始化训练器和模型对象。","type":"content","url":"/freqai-configuration#id-freqai-1","position":33},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"完整示例","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"type":"lvl5","url":"/freqai-configuration#id-12","position":34},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"完整示例","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"content":"用 MLP（多层感知机）模型、MSELoss 损失函数和 AdamW 优化器构建 PyTorch 回归器。class PyTorchMLPRegressor(BasePyTorchRegressor):\n    def __init__(self, **kwargs) -> None:\n        super().__init__(**kwargs)\n        config = self.freqai_info.get(\"model_training_parameters\", {})\n        self.learning_rate: float = config.get(\"learning_rate\",  3e-4)\n        self.model_kwargs: dict[str, Any] = config.get(\"model_kwargs\",  {})\n        self.trainer_kwargs: dict[str, Any] = config.get(\"trainer_kwargs\",  {})\n\n    def fit(self, data_dictionary: dict, dk: FreqaiDataKitchen, **kwargs) -> Any:\n        n_features = data_dictionary[\"train_features\"].shape[-1]\n        model = PyTorchMLPModel(\n            input_dim=n_features,\n            output_dim=1,\n            **self.model_kwargs\n        )\n        model.to(self.device)\n        optimizer = torch.optim.AdamW(model.parameters(), lr=self.learning_rate)\n        criterion = torch.nn.MSELoss()\n        init_model = self.get_init_model(dk.pair)\n        trainer = PyTorchModelTrainer(\n            model=model,\n            optimizer=optimizer,\n            criterion=criterion,\n            device=self.device,\n            init_model=init_model,\n            target_tensor_type=torch.float,\n            **self.trainer_kwargs,\n        )\n        trainer.fit(data_dictionary)\n        return trainer\n\n这里我们创建了一个实现 fit 方法的 PyTorchMLPRegressor 类。fit 方法指定了训练的各个组成部分：模型、优化器、损失函数和训练器。我们继承了 BasePyTorchRegressor 和 BasePyTorchModel，前者实现了适合回归任务的 predict 方法，后者实现了训练方法。\n\n设置分类器类别名\n\n使用分类器时，用户必须通过重写 IFreqaiModel.class_names 属性声明类别名（或目标）。这可以在 FreqAI 策略的 set_freqai_targets 方法中设置 self.freqai.class_names 实现。\n\n例如，若用二分类器预测价格涨跌，可如下设置类别名：def set_freqai_targets(self, dataframe: DataFrame, metadata: dict, **kwargs) -> DataFrame:\n    self.freqai.class_names = [\"down\", \"up\"]\n    dataframe['&s-up_or_down'] = np.where(dataframe[\"close\"].shift(-100) >\n                                                dataframe[\"close\"], 'up', 'down')\n\n    return dataframe\n\n完整示例见 \n\nclassifier test strategy class。","type":"content","url":"/freqai-configuration#id-12","position":35},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"用 torch.compile() 提升性能","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"type":"lvl5","url":"/freqai-configuration#id-torch-compile","position":36},{"hierarchy":{"lvl1":"FreqAI 配置指南","lvl5":"用 torch.compile() 提升性能","lvl4":"结构","lvl3":"PyTorch 模块","lvl2":"配置"},"content":"Torch 提供了 torch.compile() 方法，可用于针对特定 GPU 硬件提升性能。更多细节见 \n\n官方教程。简而言之，只需用 torch.compile() 包裹你的 model：        model = PyTorchMLPModel(\n            input_dim=n_features,\n            output_dim=1,\n            **self.model_kwargs\n        )\n        model.to(self.device)\n        model = torch.compile(model)\n\n然后像平常一样使用模型即可。注意，这样会关闭 eager 执行，错误和回溯信息会变得不够直观。","type":"content","url":"/freqai-configuration#id-torch-compile","position":37},{"hierarchy":{"lvl1":"FreqAI 开发者指南"},"type":"lvl1","url":"/freqai-developers","position":0},{"hierarchy":{"lvl1":"FreqAI 开发者指南"},"content":"","type":"content","url":"/freqai-developers","position":1},{"hierarchy":{"lvl1":"FreqAI 开发者指南","lvl2":"开发"},"type":"lvl2","url":"/freqai-developers#id","position":2},{"hierarchy":{"lvl1":"FreqAI 开发者指南","lvl2":"开发"},"content":"","type":"content","url":"/freqai-developers#id","position":3},{"hierarchy":{"lvl1":"FreqAI 开发者指南","lvl3":"项目架构","lvl2":"开发"},"type":"lvl3","url":"/freqai-developers#id-1","position":4},{"hierarchy":{"lvl1":"FreqAI 开发者指南","lvl3":"项目架构","lvl2":"开发"},"content":"FreqAI 的架构和功能被高度通用化，鼓励开发独特的特性、功能、模型等。\n\n类结构和详细的算法概览如下图所示：\n\n如图所示，FreqAI 由三个不同的对象组成：\n\nIFreqaiModel - 一个持久化的单例对象，包含收集、存储和处理数据、特征工程、训练和推理模型所需的全部逻辑。\n\nFreqaiDataKitchen - 一个非持久化对象，为每个唯一资产/模型唯一创建。除了元数据外，还包含多种数据处理工具。\n\nFreqaiDataDrawer - 一个持久化的单例对象，包含所有历史预测、模型及其保存/加载方法。\n\n有多种内置的\n\n预测模型，它们直接继承自 IFreqaiModel。每个模型都可以完全访问 IFreqaiModel 的所有方法，因此可以随意重写这些函数。然而，高级用户通常只会重写 fit()、train()、predict() 和 data_cleaning_train/predict()。","type":"content","url":"/freqai-developers#id-1","position":5},{"hierarchy":{"lvl1":"FreqAI 开发者指南","lvl3":"数据处理","lvl2":"开发"},"type":"lvl3","url":"/freqai-developers#id-2","position":6},{"hierarchy":{"lvl1":"FreqAI 开发者指南","lvl3":"数据处理","lvl2":"开发"},"content":"FreqAI 旨在以简化后处理和增强崩溃恢复能力（通过自动数据重载）的方式组织模型文件、预测数据和元数据。数据保存在 user_data_dir/models/ 目录结构下，包含所有与训练和回测相关的数据。FreqaiDataKitchen() 严重依赖该文件结构以实现正确的训练和推理，因此不应手动修改。","type":"content","url":"/freqai-developers#id-2","position":7},{"hierarchy":{"lvl1":"FreqAI 开发者指南","lvl4":"文件结构","lvl3":"数据处理","lvl2":"开发"},"type":"lvl4","url":"/freqai-developers#id-3","position":8},{"hierarchy":{"lvl1":"FreqAI 开发者指南","lvl4":"文件结构","lvl3":"数据处理","lvl2":"开发"},"content":"文件结构会根据\n\n配置中设置的模型 identifier 自动生成。以下结构展示了数据在后处理时的存储位置：\n\n结构\n\n描述\n\nconfig_*.json\n\n模型专用配置文件的副本。\n\nhistoric_predictions.pkl\n\n包含在 live 部署期间 identifier 模型生命周期内生成的所有历史预测。historic_predictions.pkl 用于在崩溃或配置更改后重新加载模型。始终保留一个备份文件以防主文件损坏。FreqAI 自动检测损坏并用备份替换损坏的文件。\n\npair_dictionary.json\n\n包含训练队列以及最近训练模型磁盘位置的文件。\n\nsub-train-*_TIMESTAMP\n\n包含与单个模型相关的所有文件的文件夹，如：\n\n\n\n*_metadata.json - 模型元数据，如归一化最大/最小值、预期训练特征列表等。\n\n\n\n*_model.* - 保存到磁盘的模型文件，用于崩溃恢复。可能为 joblib（常见提升库）、zip（stable_baselines）、hd5（keras 类型）等。\n\n\n\n*_pca_object.pkl - \n\n主成分分析（PCA） 变换对象（如果配置中设置了 principal_component_analysis: True），用于变换未见过的预测特征。\n\n\n\n*_svm_model.pkl - \n\n支持向量机（SVM） 模型（如果配置中设置了 use_SVM_to_remove_outliers: True），用于检测未见过的预测特征中的异常值。\n\n\n\n*_trained_df.pkl - 包含用于训练 identifier 模型的所有训练特征的数据框。用于计算 \n\nDissimilarity Index (DI)，也可用于后处理。\n\n\n\n*_trained_dates.df.pkl - 与 trained_df.pkl 相关的日期，便于后处理。\n\n示例文件结构如下：├── models\n│   └── unique-id\n│       ├── config_freqai.example.json\n│       ├── historic_predictions.backup.pkl\n│       ├── historic_predictions.pkl\n│       ├── pair_dictionary.json\n│       ├── sub-train-1INCH_1662821319\n│       │   ├── cb_1inch_1662821319_metadata.json\n│       │   ├── cb_1inch_1662821319_model.joblib\n│       │   ├── cb_1inch_1662821319_pca_object.pkl\n│       │   ├── cb_1inch_1662821319_svm_model.joblib\n│       │   ├── cb_1inch_1662821319_trained_dates_df.pkl\n│       │   └── cb_1inch_1662821319_trained_df.pkl\n│       ├── sub-train-1INCH_1662821371\n│       │   ├── cb_1inch_1662821371_metadata.json\n│       │   ├── cb_1inch_1662821371_model.joblib\n│       │   ├── cb_1inch_1662821371_pca_object.pkl\n│       │   ├── cb_1inch_1662821371_svm_model.joblib\n│       │   ├── cb_1inch_1662821371_trained_dates_df.pkl\n│       │   └── cb_1inch_1662821371_trained_df.pkl\n│       ├── sub-train-ADA_1662821344\n│       │   ├── cb_ada_1662821344_metadata.json\n│       │   ├── cb_ada_1662821344_model.joblib\n│       │   ├── cb_ada_1662821344_pca_object.pkl\n│       │   ├── cb_ada_1662821344_svm_model.joblib\n│       │   ├── cb_ada_1662821344_trained_dates_df.pkl\n│       │   └── cb_ada_1662821344_trained_df.pkl\n│       └── sub-train-ADA_1662821399\n│           ├── cb_ada_1662821399_metadata.json\n│           ├── cb_ada_1662821399_model.joblib\n│           ├── cb_ada_1662821399_pca_object.pkl\n│           ├── cb_ada_1662821399_svm_model.joblib\n│           ├── cb_ada_1662821399_trained_dates_df.pkl\n│           └── cb_ada_1662821399_trained_df.pkl\n","type":"content","url":"/freqai-developers#id-3","position":9},{"hierarchy":{"lvl1":"FreqAI 特征工程指南"},"type":"lvl1","url":"/freqai-feature-engineering","position":0},{"hierarchy":{"lvl1":"FreqAI 特征工程指南"},"content":"","type":"content","url":"/freqai-feature-engineering","position":1},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl2":"特征工程"},"type":"lvl2","url":"/freqai-feature-engineering#id","position":2},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl2":"特征工程"},"content":"","type":"content","url":"/freqai-feature-engineering#id","position":3},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl3":"定义特征","lvl2":"特征工程"},"type":"lvl3","url":"/freqai-feature-engineering#id-1","position":4},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl3":"定义特征","lvl2":"特征工程"},"content":"低层次特征工程在用户策略中通过一组名为 feature_engineering_* 的函数完成。这些函数设置\"基础特征\"，如 RSI、MFI、EMA、SMA、一天中的时间、交易量等。\"基础特征\"可以是自定义指标，也可以从任何技术分析库中导入。FreqAI 配备了一组函数，以简化大规模特征工程的快速实现：\n\n函数\n\n描述\n\nfeature_engineering_expand_all()\n\n此可选函数将根据配置中定义的 indicator_periods_candles、include_timeframes、include_shifted_candles 和 include_corr_pairs 自动扩展定义的特征。\n\nfeature_engineering_expand_basic()\n\n此可选函数将根据配置中定义的 include_timeframes、include_shifted_candles 和 include_corr_pairs 自动扩展定义的特征。注意：此函数不会在 indicator_periods_candles 上扩展。\n\nfeature_engineering_standard()\n\n此可选函数将使用基础时间框架的数据框调用一次。这是最后调用的函数，意味着进入此函数的数据框将包含由其他 feature_engineering_expand 函数创建的所有特征和列。此函数是进行自定义特征提取（例如 tsfresh）的好地方。此函数也是任何不应自动扩展的特征（例如星期几）的好地方。\n\nset_freqai_targets()\n\n设置模型目标的必需函数。所有目标必须以 & 开头，以便 FreqAI 内部识别。\n\n同时，高层次特征工程在 FreqAI 配置的 \"feature_parameters\":{} 中处理。在此文件中，可以决定在\"基础特征\"之上进行大规模特征扩展，例如\"包含相关对\"或\"包含信息时间框架\"，甚至\"包含最近的蜡烛\"。\n\n建议从提供的示例策略（位于 templates/FreqaiExampleStrategy.py）中的模板 feature_engineering_* 函数开始，以确保特征定义遵循正确的约定。以下是如何在策略中设置指标和标签的示例：    def feature_engineering_expand_all(self, dataframe: DataFrame, period, metadata, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅适用于启用 FreqAI 的策略*\n        此函数将根据配置中定义的 `indicator_periods_candles`、`include_timeframes`、`include_shifted_candles` 和 `include_corr_pairs` 自动扩展定义的特征。换句话说，在此函数中定义的单个特征将自动扩展为 `indicator_periods_candles` * `include_timeframes` * `include_shifted_candles` * `include_corr_pairs` 个特征添加到模型中。\n\n        所有特征必须以 `%` 开头，以便 FreqAI 内部识别。\n\n        访问元数据，如当前对/时间框架/周期：\n\n        `metadata[\"pair\"]` `metadata[\"tf\"]`  `metadata[\"period\"]`\n\n        :param df: 将接收特征的策略数据框\n        :param period: 指标的周期 - 使用示例：\n        :param metadata: 当前对的元数据\n        dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n        \"\"\"\n\n        dataframe[\"%-rsi-period\"] = ta.RSI(dataframe, timeperiod=period)\n        dataframe[\"%-mfi-period\"] = ta.MFI(dataframe, timeperiod=period)\n        dataframe[\"%-adx-period\"] = ta.ADX(dataframe, timeperiod=period)\n        dataframe[\"%-sma-period\"] = ta.SMA(dataframe, timeperiod=period)\n        dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n\n        bollinger = qtpylib.bollinger_bands(\n            qtpylib.typical_price(dataframe), window=period, stds=2.2\n        )\n        dataframe[\"bb_lowerband-period\"] = bollinger[\"lower\"]\n        dataframe[\"bb_middleband-period\"] = bollinger[\"mid\"]\n        dataframe[\"bb_upperband-period\"] = bollinger[\"upper\"]\n\n        dataframe[\"%-bb_width-period\"] = (\n            dataframe[\"bb_upperband-period\"]\n            - dataframe[\"bb_lowerband-period\"]\n        ) / dataframe[\"bb_middleband-period\"]\n        dataframe[\"%-close-bb_lower-period\"] = (\n            dataframe[\"close\"] / dataframe[\"bb_lowerband-period\"]\n        )\n\n        dataframe[\"%-roc-period\"] = ta.ROC(dataframe, timeperiod=period)\n\n        dataframe[\"%-relative_volume-period\"] = (\n            dataframe[\"volume\"] / dataframe[\"volume\"].rolling(period).mean()\n        )\n\n        return dataframe\n\n    def feature_engineering_expand_basic(self, dataframe: DataFrame, metadata, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅适用于启用 FreqAI 的策略*\n        此函数将根据配置中定义的 `include_timeframes`、`include_shifted_candles` 和 `include_corr_pairs` 自动扩展定义的特征。换句话说，在此函数中定义的单个特征将自动扩展为 `include_timeframes` * `include_shifted_candles` * `include_corr_pairs` 个特征添加到模型中。\n\n        在此定义的特征*不会*在用户定义的 `indicator_periods_candles` 上自动复制。\n\n        访问元数据，如当前对/时间框架：\n\n        `metadata[\"pair\"]` `metadata[\"tf\"]`\n\n        所有特征必须以 `%` 开头，以便 FreqAI 内部识别。\n\n        :param df: 将接收特征的策略数据框\n        :param metadata: 当前对的元数据\n        dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n        dataframe[\"%-ema-200\"] = ta.EMA(dataframe, timeperiod=200)\n        \"\"\"\n        dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n        dataframe[\"%-raw_volume\"] = dataframe[\"volume\"]\n        dataframe[\"%-raw_price\"] = dataframe[\"close\"]\n        return dataframe\n\n    def feature_engineering_standard(self, dataframe: DataFrame, metadata, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅适用于启用 FreqAI 的策略*\n        此可选函数将使用基础时间框架的数据框调用一次。这是最后调用的函数，意味着进入此函数的数据框将包含由所有其他 freqai_feature_engineering_* 函数创建的所有特征和列。\n\n        此函数是进行自定义特征提取（例如 tsfresh）的好地方。此函数也是任何不应自动扩展的特征（例如星期几）的好地方。\n\n        访问元数据，如当前对：\n\n        `metadata[\"pair\"]`\n\n        所有特征必须以 `%` 开头，以便 FreqAI 内部识别。\n\n        :param df: 将接收特征的策略数据框\n        :param metadata: 当前对的元数据\n        使用示例：dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n        \"\"\"\n        dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n        dataframe[\"%-hour_of_day\"] = (dataframe[\"date\"].dt.hour + 1) / 25\n        return dataframe\n\n    def set_freqai_targets(self, dataframe: DataFrame, metadata, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅适用于启用 FreqAI 的策略*\n        设置模型目标的必需函数。所有目标必须以 `&` 开头，以便 FreqAI 内部识别。\n\n        访问元数据，如当前对：\n\n        `metadata[\"pair\"]`\n\n        :param df: 将接收目标的策略数据框\n        :param metadata: 当前对的元数据\n        使用示例：dataframe[\"&-target\"] = dataframe[\"close\"].shift(-1) / dataframe[\"close\"]\n        \"\"\"\n        dataframe[\"&-s_close\"] = (\n            dataframe[\"close\"]\n            .shift(-self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n            .rolling(self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n            .mean()\n            / dataframe[\"close\"]\n            - 1\n            )\n        \n        return dataframe\n\n在提供的示例中，用户不希望将 bb_lowerband 作为特征传递给模型，因此没有以 % 开头。然而，用户希望将 bb_width 传递给模型进行训练/预测，因此以 % 开头。\n\n在定义了\"基础特征\"后，下一步是使用配置文件中的强大 feature_parameters 进行扩展：    \"freqai\": {\n        //...\n        \"feature_parameters\" : {\n            \"include_timeframes\": [\"5m\",\"15m\",\"4h\"],\n            \"include_corr_pairlist\": [\n                \"ETH/USD\",\n                \"LINK/USD\",\n                \"BNB/USD\"\n            ],\n            \"label_period_candles\": 24,\n            \"include_shifted_candles\": 2,\n            \"indicator_periods_candles\": [10, 20]\n        },\n        //...\n    }\n\n上述配置中的 include_timeframes 是策略中每次调用 feature_engineering_expand_*() 的时间框架（tf）。在提供的案例中，用户要求将 5m、15m 和 4h 时间框架的 rsi、mfi、roc 和 bb_width 包含在特征集中。\n\n您可以使用 include_corr_pairlist 要求将每个定义的特征也包含在信息对中。这意味着特征集将包含 feature_engineering_expand_*() 在配置中定义的每个相关对（在提供的示例中为 ETH/USD、LINK/USD 和 BNB/USD）的所有 include_timeframes 上的所有特征。\n\ninclude_shifted_candles 表示要包含在特征集中的前几根蜡烛的数量。例如，include_shifted_candles: 2 告诉 FreqAI 在特征集中包含每个特征的前 2 根蜡烛。\n\n总的来说，提供的示例策略用户创建的特征数量为：include_timeframes 的长度 * feature_engineering_expand_*() 中的特征数量 * include_corr_pairlist 的长度 * include_shifted_candles 的数量 * indicator_periods_candles 的长度 = 3 * 3 * 3 * 2 * 2 = 108。\n\n了解更多关于创造性特征工程的信息\n\n查看我们的\n\nmedium文章，旨在帮助用户学习如何创造性地进行特征工程。","type":"content","url":"/freqai-feature-engineering#id-1","position":5},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用 metadata 对 feature_engineering_* 函数进行更精细的控制","lvl3":"定义特征","lvl2":"特征工程"},"type":"lvl4","url":"/freqai-feature-engineering#id-metadata-feature-engineering","position":6},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用 metadata 对 feature_engineering_* 函数进行更精细的控制","lvl3":"定义特征","lvl2":"特征工程"},"content":"所有 feature_engineering_* 和 set_freqai_targets() 函数都传递一个 metadata 字典，其中包含 FreqAI 用于特征构建的 pair、tf（时间框架）和 period 信息。因此，用户可以在 feature_engineering_* 函数中使用 metadata 作为阻止/保留特定时间框架、周期、对等的特征的标准。def feature_engineering_expand_all(self, dataframe: DataFrame, period, metadata, **kwargs) -> DataFrame:\n    if metadata[\"tf\"] == \"1h\":\n        dataframe[\"%-roc-period\"] = ta.ROC(dataframe, timeperiod=period)\n\n这将阻止 ta.ROC() 添加到除 \"1h\" 以外的任何时间框架。","type":"content","url":"/freqai-feature-engineering#id-metadata-feature-engineering","position":7},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"从训练中返回额外信息","lvl3":"定义特征","lvl2":"特征工程"},"type":"lvl4","url":"/freqai-feature-engineering#id-2","position":8},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"从训练中返回额外信息","lvl3":"定义特征","lvl2":"特征工程"},"content":"重要指标可以通过在自定义预测模型类中将其分配给 dk.data['extra_returns_per_train']['my_new_value'] = XYZ 返回到策略。\n\nFreqAI 获取在此字典中分配的 my_new_value 并将其扩展以适应返回到策略的数据框。然后，您可以通过 dataframe['my_new_value'] 在策略中使用返回的指标。FreqAI 中如何使用返回值的示例是用于\n\n创建动态目标阈值的 &*_mean 和 &*_std 值。\n\n另一个示例，用户希望使用来自交易数据库的实时指标，如下所示：    \"freqai\": {\n        \"extra_returns_per_train\": {\"total_profit\": 4}\n    }\n\n您需要在配置中设置标准字典，以便 FreqAI 可以返回适当的数据框形状。这些值可能会被预测模型覆盖，但在模型尚未设置它们或需要默认初始值的情况下，预设值将是返回的值。","type":"content","url":"/freqai-feature-engineering#id-2","position":9},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"为时间重要性加权特征","lvl3":"定义特征","lvl2":"特征工程"},"type":"lvl4","url":"/freqai-feature-engineering#id-3","position":10},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"为时间重要性加权特征","lvl3":"定义特征","lvl2":"特征工程"},"content":"FreqAI 允许您通过指数函数设置 weight_factor 以更强烈地加权最近的数据：W_i = \\exp(\\frac{-i}{\\alpha*n})\n\n其中 W_i 是总数据集中第 i 个数据点的权重，n 是数据点的总数。下图显示了不同权重因子对特征集中数据点的影响。","type":"content","url":"/freqai-feature-engineering#id-3","position":11},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl3":"构建数据管道","lvl2":"特征工程"},"type":"lvl3","url":"/freqai-feature-engineering#id-4","position":12},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl3":"构建数据管道","lvl2":"特征工程"},"content":"默认情况下，FreqAI 根据用户配置设置构建动态管道。默认设置是健壮的，设计用于与各种方法一起工作。这两个步骤是 MinMaxScaler(-1,1) 和 VarianceThreshold，后者移除任何方差为 0 的列。用户可以通过更多配置参数激活其他步骤。例如，如果用户在 freqai 配置中添加 use_SVM_to_remove_outliers: true，则 FreqAI 将自动将 \n\nSVMOutlierExtractor 添加到管道中。同样，用户可以添加 principal_component_analysis: true 到 freqai 配置中以激活 PCA。\n\nDissimilarityIndex 通过 DI_threshold: 1 激活。最后，也可以通过 noise_standard_deviation: 0.1 向数据添加噪声。最后，用户可以通过 use_DBSCAN_to_remove_outliers: true 添加 \n\nDBSCAN 异常值移除。\n\n更多信息可用\n\n请查看\n\n参数表以获取有关这些参数的更多信息。","type":"content","url":"/freqai-feature-engineering#id-4","position":13},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"自定义管道","lvl3":"构建数据管道","lvl2":"特征工程"},"type":"lvl4","url":"/freqai-feature-engineering#id-5","position":14},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"自定义管道","lvl3":"构建数据管道","lvl2":"特征工程"},"content":"鼓励用户通过构建自己的数据管道来满足其需求。这可以通过在 IFreqaiModel 的 train() 函数中简单地将 dk.feature_pipeline 设置为其所需的 Pipeline 对象来完成，或者如果他们不想修改 train() 函数，可以在 IFreqaiModel 中覆盖 define_data_pipeline/define_label_pipeline 函数：\n\n更多信息可用\n\nFreqAI 使用 \n\nDataSieve 管道，它遵循 SKlearn 管道 API，但添加了 X、y 和 sample_weight 向量点移除、特征移除、特征名称跟踪等功能。from datasieve.transforms import SKLearnWrapper, DissimilarityIndex\nfrom datasieve.pipeline import Pipeline\nfrom sklearn.preprocessing import QuantileTransformer, StandardScaler\nfrom freqai.base_models import BaseRegressionModel\n\n\nclass MyFreqaiModel(BaseRegressionModel):\n    \"\"\"\n    一些很酷的自定义模型\n    \"\"\"\n    def fit(self, data_dictionary: Dict, dk: FreqaiDataKitchen, **kwargs) -> Any:\n        \"\"\"\n        我的自定义拟合函数\n        \"\"\"\n        model = cool_model.fit()\n        return model\n\n    def define_data_pipeline(self) -> Pipeline:\n        \"\"\"\n        用户在此定义其自定义特征管道（如果他们希望）\n        \"\"\"\n        feature_pipeline = Pipeline([\n            ('qt', SKLearnWrapper(QuantileTransformer(output_distribution='normal'))),\n            ('di', ds.DissimilarityIndex(di_threshold=1))\n        ])\n\n        return feature_pipeline\n    \n    def define_label_pipeline(self) -> Pipeline:\n        \"\"\"\n        用户在此定义其自定义标签管道（如果他们希望）\n        \"\"\"\n        label_pipeline = Pipeline([\n            ('qt', SKLearnWrapper(StandardScaler())),\n        ])\n\n        return label_pipeline\n\n在这里，您定义了在训练和预测期间将用于特征集的确切管道。您可以通过将 SKLearnWrapper 类包装在 SKLearnWrapper 中，如上所示，使用大多数 SKLearn 转换步骤。此外，您可以使用 \n\nDataSieve 库 中可用的任何转换。\n\n您可以通过创建一个继承自 datasieve BaseTransform 的类并实现您的 fit()、transform() 和 inverse_transform() 方法来轻松添加自己的转换：from datasieve.transforms.base_transform import BaseTransform\n# 导入您需要的其他内容\n\nclass MyCoolTransform(BaseTransform):\n    def __init__(self, **kwargs):\n        self.param1 = kwargs.get('param1', 1)\n\n    def fit(self, X, y=None, sample_weight=None, feature_list=None, **kwargs):\n        # 对 X、y、sample_weight 或/和 feature_list 进行一些操作\n        return X, y, sample_weight, feature_list\n\n    def transform(self, X, y=None, sample_weight=None,\n                  feature_list=None, outlier_check=False, **kwargs):\n        # 对 X、y、sample_weight 或/和 feature_list 进行一些操作\n        return X, y, sample_weight, feature_list\n\n    def inverse_transform(self, X, y=None, sample_weight=None, feature_list=None, **kwargs):\n        # 对 X、y、sample_weight 或/和 feature_list 进行一些操作\n        return X, y, sample_weight, feature_list\n\n提示\n\n您可以在与 IFreqaiModel 相同的文件中定义此自定义类。","type":"content","url":"/freqai-feature-engineering#id-5","position":15},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"将自定义 IFreqaiModel 迁移到新管道","lvl3":"构建数据管道","lvl2":"特征工程"},"type":"lvl4","url":"/freqai-feature-engineering#id-ifreqaimodel","position":16},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"将自定义 IFreqaiModel 迁移到新管道","lvl3":"构建数据管道","lvl2":"特征工程"},"content":"如果您创建了自己的自定义 IFreqaiModel，并且仍然依赖 data_cleaning_train/predict()，则需要迁移到新管道。如果您的模型不依赖 data_cleaning_train/predict()，则无需担心此迁移。\n\n有关迁移的更多详细信息，请参见\n\n此处。","type":"content","url":"/freqai-feature-engineering#id-ifreqaimodel","position":17},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl3":"异常值检测","lvl2":"特征工程"},"type":"lvl3","url":"/freqai-feature-engineering#id-6","position":18},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl3":"异常值检测","lvl2":"特征工程"},"content":"股票和加密市场在异常数据点形式中存在大量非模式噪声。FreqAI 实现了多种方法来识别此类异常值，从而降低风险。","type":"content","url":"/freqai-feature-engineering#id-6","position":19},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用 Dissimilarity Index (DI) 识别异常值","lvl3":"异常值检测","lvl2":"特征工程"},"type":"lvl4","url":"/freqai-feature-engineering#id-dissimilarity-index-di","position":20},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用 Dissimilarity Index (DI) 识别异常值","lvl3":"异常值检测","lvl2":"特征工程"},"content":"Dissimilarity Index (DI) 旨在量化与模型做出的每个预测相关的不确定性。\n\n您可以通过在配置中包含以下语句，告诉 FreqAI 使用 DI 从训练/测试数据集中移除异常数据点：    \"freqai\": {\n        \"feature_parameters\" : {\n            \"DI_threshold\": 1\n        }\n    }\n\n这将向您的 feature_pipeline 添加 DissimilarityIndex 步骤，并将阈值设置为 1。DI 允许由于低确定性而丢弃异常值（在模型特征空间中不存在）的预测。为此，FreqAI 测量每个训练数据点（特征向量）X_{a} 与所有其他训练数据点之间的距离：d_{ab} = \\sqrt{\\sum_{j=1}^p(X_{a,j}-X_{b,j})^2}\n\n其中 d_{ab} 是归一化点 a 和 b 之间的距离，p 是特征的数量，即向量 X 的长度。特征距离 \\overline{d} 对于一组训练数据点，简单地是平均距离的平均值：\\overline{d} = \\sum_{a=1}^n(\\sum_{b=1}^n(d_{ab}/n)/n)\n\n\\overline{d} 量化了训练数据的分布，与新的预测特征向量 X_k 和所有训练数据之间的距离进行比较：d_k = \\arg \\min d_{k,i}\n\n这使 Dissimilarity Index 的估计成为可能：DI_k = d_k/\\overline{d}\n\n您可以通过 DI_threshold 调整 DI，以增加或减少训练模型的推断。较高的 DI_threshold 意味着 DI 更宽松，允许使用远离训练数据的预测，而较低的 DI_threshold 则相反，因此丢弃更多预测。\n\n下图描述了 3D 数据集的 DI。","type":"content","url":"/freqai-feature-engineering#id-dissimilarity-index-di","position":21},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用支持向量机 (SVM) 识别异常值","lvl3":"异常值检测","lvl2":"特征工程"},"type":"lvl4","url":"/freqai-feature-engineering#id-svm","position":22},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用支持向量机 (SVM) 识别异常值","lvl3":"异常值检测","lvl2":"特征工程"},"content":"您可以通过在配置中包含以下语句，告诉 FreqAI 使用支持向量机 (SVM) 从训练/测试数据集中移除异常数据点：    \"freqai\": {\n        \"feature_parameters\" : {\n            \"use_SVM_to_remove_outliers\": true\n        }\n    }\n\n这将向您的 feature_pipeline 添加 SVMOutlierExtractor 步骤。SVM 将在训练数据上训练，任何 SVM 认为超出特征空间的数据点将被移除。\n\n您可以通过 feature_parameters.svm_params 字典在配置中为 SVM 提供其他参数，例如 shuffle 和 nu。\n\n参数 shuffle 默认设置为 False 以确保一致的结果。如果设置为 True，在同一数据集上多次运行 SVM 可能会导致不同的结果，因为 max_iter 太低，算法无法达到所需的 tol。增加 max_iter 可以解决此问题，但会导致过程花费更长时间。\n\n参数 nu，非常广泛地说，是应该被视为异常值的数据点的数量，应该在 0 和 1 之间。","type":"content","url":"/freqai-feature-engineering#id-svm","position":23},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用 DBSCAN 识别异常值","lvl3":"异常值检测","lvl2":"特征工程"},"type":"lvl4","url":"/freqai-feature-engineering#id-dbscan","position":24},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用 DBSCAN 识别异常值","lvl3":"异常值检测","lvl2":"特征工程"},"content":"您可以通过在配置中激活 use_DBSCAN_to_remove_outliers 来配置 FreqAI 使用 DBSCAN 对训练/测试数据集或传入的预测异常值进行聚类和移除：    \"freqai\": {\n        \"feature_parameters\" : {\n            \"use_DBSCAN_to_remove_outliers\": true\n        }\n    }\n\n这将向您的 feature_pipeline 添加 DataSieveDBSCAN 步骤。这是一种无监督机器学习算法，可以在不需要知道应该有多少个聚类的情况下对数据进行聚类。\n\n给定数据点数量 N 和距离 \\varepsilon，DBSCAN 通过将所有在距离 \\varepsilon 内有 N-1 个其他数据点的数据点设置为核心点来对数据集进行聚类。在距离 \\varepsilon 内有一个核心点但在距离 \\varepsilon 内没有 N-1 个其他数据点的数据点被视为边缘点。聚类是核心点和边缘点的集合。在距离 <\\varepsilon 内没有其他数据点的数据点被视为异常值。下图显示了 N = 3 的聚类。\n\nFreqAI 使用 sklearn.cluster.DBSCAN（详细信息可在 scikit-learn 的网页上找到\n\n此处（外部网站）），其中 min_samples（N）取为特征集中时间点（蜡烛）数量的 1/4。eps（\\varepsilon）自动计算为从特征集中所有数据点的成对距离中最近邻计算的k-距离图中的肘点。","type":"content","url":"/freqai-feature-engineering#id-dbscan","position":25},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用主成分分析进行数据降维","lvl3":"异常值检测","lvl2":"特征工程"},"type":"lvl4","url":"/freqai-feature-engineering#id-7","position":26},{"hierarchy":{"lvl1":"FreqAI 特征工程指南","lvl4":"使用主成分分析进行数据降维","lvl3":"异常值检测","lvl2":"特征工程"},"content":"您可以通过在配置中激活 principal_component_analysis 来降低特征的维度：    \"freqai\": {\n        \"feature_parameters\" : {\n            \"principal_component_analysis\": true\n        }\n    }\n\n这将对特征执行 PCA 并降低其维度，使数据集的解释方差 >= 0.999。降低数据维度使训练模型更快，因此允许更最新的模型。","type":"content","url":"/freqai-feature-engineering#id-7","position":27},{"hierarchy":{"lvl1":"FreqAI 参数表"},"type":"lvl1","url":"/freqai-parameter-table","position":0},{"hierarchy":{"lvl1":"FreqAI 参数表"},"content":"","type":"content","url":"/freqai-parameter-table","position":1},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl2":"参数表"},"type":"lvl2","url":"/freqai-parameter-table#id","position":2},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl2":"参数表"},"content":"下表列出了 FreqAI 可用的所有配置参数。一些参数在 config_examples/config_freqai.example.json 中有示例。\n\n必填参数标记为 必需，必须按建议方式之一进行设置。","type":"content","url":"/freqai-parameter-table#id","position":3},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"通用配置参数","lvl2":"参数表"},"type":"lvl3","url":"/freqai-parameter-table#id-1","position":4},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"通用配置参数","lvl2":"参数表"},"content":"参数\n\n描述\n\n\n\nconfig.freqai 树下的通用配置参数\n\nfreqai\n\n必需。  包含所有 FreqAI 控制参数的父字典。 数据类型： 字典。\n\ntrain_period_days\n\n必需。  用于训练数据的天数（滑动窗口宽度）。 数据类型： 正整数。\n\nbacktest_period_days\n\n必需。  在回测期间，从训练好的模型推理的天数，然后滑动上面定义的 train_period_days 窗口并重新训练模型（详见\n\n此处）。可以为小数天，但请注意，提供的 timerange 会被此数值除以，以得出完成回测所需的训练次数。 数据类型： 浮点数。\n\nidentifier\n\n必需。  当前模型的唯一 ID。如果模型保存到磁盘，identifier 允许重新加载特定的预训练模型/数据。 数据类型： 字符串。\n\nlive_retrain_hours\n\ndry/live 运行期间的再训练频率。 数据类型： 大于 0 的浮点数。 默认值：0（模型尽可能频繁地再训练）。\n\nexpiration_hours\n\n如果模型超过 expiration_hours 小时，则避免做出预测。 数据类型： 正整数。 默认值：0（模型永不过期）。\n\npurge_old_models\n\n磁盘上保留的模型数量（与回测无关）。默认值为 2，表示 dry/live 运行会在磁盘上保留最新的 2 个模型。设置为 0 保留所有模型。此参数也接受布尔值以保持向后兼容。 数据类型： 整数。 默认值：2。\n\nsave_backtest_models\n\n回测时是否将模型保存到磁盘。回测通过保存预测数据并在后续运行中直接重用这些数据（如需调整入场/出场参数）来实现最高效。将回测模型保存到磁盘还允许用相同的模型 identifier 启动 dry/live 实例时复用这些模型文件。 数据类型： 布尔值。 默认值：False（不保存模型）。\n\nfit_live_predictions_candles\n\n用于从预测数据而非训练数据集计算目标（标签）统计的历史蜡烛数量（详见\n\n此处）。 数据类型： 正整数。\n\ncontinual_learning\n\n使用最近训练模型的最终状态作为新模型的起点，实现增量学习（详见\n\n此处）。请注意，这目前是增量学习的朴素实现，在市场偏离模型时很容易过拟合/陷入局部最优。我们主要为实验目的保留此功能，以便为加密市场等混沌系统的更成熟增量学习方法做好准备。 数据类型： 布尔值。 默认值：False。\n\nwrite_metrics_to_disk\n\n将训练时长、推理时长和 CPU 使用情况收集到 json 文件中。 数据类型： 布尔值。 默认值：False\n\ndata_kitchen_thread_count\n\n 指定用于数据处理（异常值方法、归一化等）的线程数。对训练所用线程数无影响。如果用户未设置（默认），FreqAI 会使用最大线程数减 2（为 Freqtrade 机器人和 FreqUI 留出 1 个物理核心）。 数据类型： 正整数。\n\nactivate_tensorboard\n\n 是否为支持 tensorboard 的模块（目前为强化学习、XGBoost、Catboost 和 PyTorch）激活 tensorboard。tensorboard 需要安装 Torch，因此你需要使用 torch/RL docker 镜像，或在安装时选择安装 Torch。 数据类型： 布尔值。 默认值：True。\n\nwait_for_training_iteration_on_reload\n\n 使用 /reload 或 ctrl-c 时，是否等待当前训练迭代完成后再优雅关闭。如果设为 False，FreqAI 会中断当前训练迭代，更快地优雅关闭，但会丢失当前训练迭代。 数据类型： 布尔值。 默认值：True。","type":"content","url":"/freqai-parameter-table#id-1","position":5},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"特征参数","lvl2":"参数表"},"type":"lvl3","url":"/freqai-parameter-table#id-2","position":6},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"特征参数","lvl2":"参数表"},"content":"参数\n\n描述\n\n\n\nfreqai.feature_parameters 子字典下的特征参数\n\nfeature_parameters\n\n包含用于特征集工程的参数的字典。详情和示例见\n\n此处。 数据类型： 字典。\n\ninclude_timeframes\n\n所有在 feature_engineering_expand_*() 中创建的指标所用的时间框架列表。该列表作为特征添加到基础指标数据集中。 数据类型： 时间框架（字符串）列表。\n\ninclude_corr_pairlist\n\nFreqAI 会将该相关币种列表作为额外特征添加到所有 pair_whitelist 币种。特征工程期间在 feature_engineering_expand_*() 中设置的所有指标都会为每个相关币种创建。相关币种特征会添加到基础指标数据集中。 数据类型： 资产（字符串）列表。\n\nlabel_period_candles\n\n创建标签时面向未来的蜡烛数量。可在 set_freqai_targets() 中使用（详细用法见 templates/FreqaiExampleStrategy.py）。此参数非必需，你可以自定义标签并选择是否使用该参数。请参见 templates/FreqaiExampleStrategy.py 示例。 数据类型： 正整数。\n\ninclude_shifted_candles\n\n将前几根蜡烛的特征添加到后续蜡烛，以引入历史信息。如果使用，FreqAI 会复制并移动所有特征，使前 include_shifted_candles 根蜡烛的信息可用于后续蜡烛。 数据类型： 正整数。\n\nweight_factor\n\n按时间新旧对训练数据点加权（详见\n\n此处）。 数据类型： 正浮点数（通常 < 1）。\n\nindicator_max_period_candles\n\n已废弃（#7325）。已被在\n\n策略中设置的 startup_candle_count 替代。startup_candle_count 与时间框架无关，定义了在 feature_engineering_*() 中创建指标时用到的最大周期。FreqAI 会结合 include_time_frames 中的最大时间框架计算需要下载的数据点数，以确保首个数据点不含 NaN。 数据类型： 正整数。\n\nindicator_periods_candles\n\n用于计算指标的周期。指标会添加到基础指标数据集中。 数据类型： 正整数列表。\n\nprincipal_component_analysis\n\n是否自动用主成分分析（PCA）降维。详见\n\n此处。 数据类型： 布尔值。 默认值：False。\n\nplot_feature_importances\n\n为每个模型创建特征重要性图，显示前/后 plot_feature_importances 个特征。图表保存在 user_data/models/<identifier>/sub-train-<COIN>_<timestamp>.html。 数据类型： 整数。 默认值：0。\n\nDI_threshold\n\n设置大于 0 时启用 Dissimilarity Index 进行异常值检测。详见\n\n此处。 数据类型： 正浮点数（通常 < 1）。\n\nuse_SVM_to_remove_outliers\n\n训练支持向量机（SVM）检测并移除训练集和输入数据中的异常值。详见\n\n此处。 数据类型： 布尔值。\n\nsvm_params\n\nSklearn SGDOneClassSVM() 的所有可用参数。部分参数详见\n\n此处。 数据类型： 字典。\n\nuse_DBSCAN_to_remove_outliers\n\n用 DBSCAN 算法聚类数据，识别并移除训练和预测数据中的异常值。详见\n\n此处。 数据类型： 布尔值。\n\nnoise_standard_deviation\n\n若设置，FreqAI 会为训练特征添加噪声以防止过拟合。FreqAI 会从高斯分布生成标准差为 noise_standard_deviation 的随机偏差并加到所有数据点。noise_standard_deviation 应相对于归一化空间设置，即在 -1 到 1 之间。因为 FreqAI 中的数据总是归一化到 -1 到 1，noise_standard_deviation: 0.05 意味着 32% 的数据会被随机增减超过 2.5%（即落在第一个标准差内的数据百分比）。 数据类型： 整数。 默认值：0。\n\noutlier_protection_percentage\n\n启用后可防止异常值检测方法丢弃过多数据。如果 SVM 或 DBSCAN 检测为异常值的点超过 outlier_protection_percentage%，FreqAI 会记录警告并忽略异常值检测，即保留原始数据集。如果触发了异常值保护，则不会基于该训练集做出预测。 数据类型： 浮点数。 默认值：30。\n\nreverse_train_test_order\n\n拆分特征数据集（见下文），用最新的数据拆分做训练，历史数据做测试。这样模型可以训练到最新数据点，同时避免过拟合。但在使用前应理解该参数的非常规性质。 数据类型： 布尔值。 默认值：False（不反转）。\n\nshuffle_after_split\n\n拆分数据为训练集和测试集后，分别对两者进行洗牌。 数据类型： 布尔值。 默认值：False。\n\nbuffer_train_data_candles\n\n在指标填充后，从训练数据的开头和结尾各裁剪 buffer_train_data_candles 个数据点。主要用于预测极大/极小值时，argrelextrema 函数无法在时间范围边缘判断极值。为提高模型准确性，最好在完整时间范围上计算 argrelextrema，然后用此参数按核函数裁剪边缘数据。若目标为移动价格，则不需要此 buffer，因为时间范围末尾的移动蜡烛会是 NaN，FreqAI 会自动从训练集中剔除这些数据。 数据类型： 整数。 默认值：0。","type":"content","url":"/freqai-parameter-table#id-2","position":7},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"数据拆分参数","lvl2":"参数表"},"type":"lvl3","url":"/freqai-parameter-table#id-3","position":8},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"数据拆分参数","lvl2":"参数表"},"content":"参数\n\n描述\n\n\n\nfreqai.data_split_parameters 子字典下的数据拆分参数\n\ndata_split_parameters\n\n包含所有 scikit-learn test_train_split() 可用参数的字典，详见\n\n此处（外部网站）。 数据类型： 字典。\n\ntest_size\n\n用于测试而非训练的数据比例。 数据类型： 小于 1 的正浮点数。\n\nshuffle\n\n训练期间是否对训练数据点洗牌。通常在时间序列预测中为保持数据的时间顺序，设为 False。 数据类型： 布尔值。 默认值：False。","type":"content","url":"/freqai-parameter-table#id-3","position":9},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"模型训练参数","lvl2":"参数表"},"type":"lvl3","url":"/freqai-parameter-table#id-4","position":10},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"模型训练参数","lvl2":"参数表"},"content":"参数\n\n描述\n\n\n\nfreqai.model_training_parameters 子字典下的模型训练参数\n\nmodel_training_parameters\n\n灵活的字典，包含所选模型库的所有可用参数。例如，若用 LightGBMRegressor，该字典可包含 \n\nLightGBMRegressor 的任意参数（外部网站）。如选用其他模型，则可包含该模型的任意参数。当前可用模型列表见\n\n此处。 数据类型： 字典。\n\nn_estimators\n\n训练模型时要拟合的提升树数量。 数据类型： 整数。\n\nlearning_rate\n\n训练模型时的提升学习率。 数据类型： 浮点数。\n\nn_jobs, thread_count, task_type\n\n设置并行处理的线程数和 task_type（gpu 或 cpu）。不同模型库参数名不同。 数据类型： 浮点数。","type":"content","url":"/freqai-parameter-table#id-4","position":11},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"强化学习参数","lvl2":"参数表"},"type":"lvl3","url":"/freqai-parameter-table#id-5","position":12},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"强化学习参数","lvl2":"参数表"},"content":"参数\n\n描述\n\n\n\nfreqai.rl_config 子字典下的强化学习参数\n\nrl_config\n\n包含强化学习模型控制参数的字典。 数据类型： 字典。\n\ntrain_cycles\n\n训练步数将设为 train_cycles * 训练数据点数。 数据类型： 整数。\n\nmax_trade_duration_candles\n\n指导智能体训练时保持交易低于期望长度。用法见 prediction_models/ReinforcementLearner.py 中可自定义的 calculate_reward() 函数。 数据类型： 整数。\n\nmodel_type\n\nstable_baselines3 或 SBcontrib 的模型字符串。可用字符串包括：'TRPO', 'ARS', 'RecurrentPPO', 'MaskablePPO', 'PPO', 'A2C', 'DQN'。用户应确保 model_training_parameters 与所选 stable_baselines3 模型的参数一致，详见其文档。\n\nPPO 文档（外部网站） 数据类型： 字符串。\n\npolicy_type\n\nstable_baselines3 可用的策略类型之一。 数据类型： 字符串。\n\nmax_training_drawdown_pct\n\n智能体在训练期间允许的最大回撤。 数据类型： 浮点数。 默认值：0.8\n\ncpu_count\n\n分配给强化学习训练进程的线程/CPU 数（取决于是否选择了 ReinforcementLearning_multiproc）。建议保持默认，默认值为物理核心总数减 1。 数据类型： 整数。\n\nmodel_reward_parameters\n\n用于 ReinforcementLearner.py 中可自定义 calculate_reward() 函数的参数。 数据类型： 整数。\n\nadd_state_info\n\n告诉 FreqAI 在训练和推理时将状态信息包含在特征集中。当前状态变量包括交易时长、当前利润、持仓方向。仅在 dry/live 运行时可用，回测时自动关闭。 数据类型： 布尔值。 默认值：False。\n\nnet_arch\n\n网络结构，详见 \n\nstable_baselines3 文档。简言之：[<共享层>, dict(vf=[<非共享价值网络层>], pi=[<非共享策略网络层>])]。默认值为 [128, 128]，即 2 层共享隐藏层，每层 128 单元。\n\nrandomize_starting_position\n\n随机化每个 episode 的起始点以避免过拟合。 数据类型： 布尔值。 默认值：False。\n\ndrop_ohlc_from_features\n\n训练期间不将归一化 ohlc 数据包含在传递给智能体的特征集中（ohlc 仍用于驱动环境）。 数据类型： 布尔值。 默认值： False\n\nprogress_bar\n\n显示进度条，包括当前进度、已用时间和预计剩余时间。 数据类型： 布尔值。 默认值：False。","type":"content","url":"/freqai-parameter-table#id-5","position":13},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"PyTorch 参数","lvl2":"参数表"},"type":"lvl3","url":"/freqai-parameter-table#pytorch","position":14},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"PyTorch 参数","lvl2":"参数表"},"content":"","type":"content","url":"/freqai-parameter-table#pytorch","position":15},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl4":"通用","lvl3":"PyTorch 参数","lvl2":"参数表"},"type":"lvl4","url":"/freqai-parameter-table#id-6","position":16},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl4":"通用","lvl3":"PyTorch 参数","lvl2":"参数表"},"content":"参数\n\n描述\n\n\n\nfreqai.model_training_parameters 子字典下的模型训练参数\n\nlearning_rate\n\n传递给优化器的学习率。 数据类型： 浮点数。 默认值：3e-4。\n\nmodel_kwargs\n\n传递给模型类的参数。 数据类型： 字典。 默认值：{}。\n\ntrainer_kwargs\n\n传递给训练器类的参数。 数据类型： 字典。 默认值：{}。","type":"content","url":"/freqai-parameter-table#id-6","position":17},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl4":"trainer_kwargs","lvl3":"PyTorch 参数","lvl2":"参数表"},"type":"lvl4","url":"/freqai-parameter-table#trainer-kwargs","position":18},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl4":"trainer_kwargs","lvl3":"PyTorch 参数","lvl2":"参数表"},"content":"参数\n\n描述\n\n\n\nfreqai.model_training_parameters.model_kwargs 子字典下的模型训练参数\n\nn_epochs\n\nn_epochs 参数是 PyTorch 训练循环中的关键设置，决定整个训练集将用于更新模型参数的次数。一个 epoch 表示完整遍历一次训练集。会覆盖 n_steps。n_epochs 或 n_steps 必须设置一个。 数据类型： int，可选。 默认值：10。\n\nn_steps\n\n设置 n_epochs 的另一种方式——训练迭代次数。这里的迭代指调用 optimizer.step() 的次数。如果设置了 n_epochs，则忽略。简化公式： n_epochs = n_steps / (n_obs / batch_size)  这样做的动机是 n_steps 更易于优化，并能在不同 n_obs（数据点数）下保持稳定。 数据类型： int，可选。 默认值：None。\n\nbatch_size\n\n训练时使用的批次大小。 数据类型： int。 默认值：64。","type":"content","url":"/freqai-parameter-table#trainer-kwargs","position":19},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"其他参数","lvl2":"参数表"},"type":"lvl3","url":"/freqai-parameter-table#id-7","position":20},{"hierarchy":{"lvl1":"FreqAI 参数表","lvl3":"其他参数","lvl2":"参数表"},"content":"参数\n\n描述\n\n\n\n其他参数\n\nfreqai.keras\n\n如果所选模型使用 Keras（典型于基于 TensorFlow 的预测模型），需激活此标志，以便模型保存/加载遵循 Keras 标准。 数据类型： 布尔值。 默认值：False。\n\nfreqai.conv_width\n\n神经网络输入张量的宽度。可替代移动蜡烛（include_shifted_candles），通过将历史数据点作为张量的第二维输入。技术上也可用于回归器，但只会增加计算开销，不影响模型训练/预测。 数据类型： 整数。 默认值：2。\n\nfreqai.reduce_df_footprint\n\n将所有数值列转换为 float32/int32，旨在减少内存/磁盘占用并加快训练/推理。此参数在 Freqtrade 配置文件主级别设置（不在 FreqAI 内部）。 数据类型： 布尔值。 默认值：False。","type":"content","url":"/freqai-parameter-table#id-7","position":21},{"hierarchy":{"lvl1":"FreqAI 强化学习指南"},"type":"lvl1","url":"/freqai-reinforcement-learning","position":0},{"hierarchy":{"lvl1":"FreqAI 强化学习指南"},"content":"","type":"content","url":"/freqai-reinforcement-learning","position":1},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl2":"强化学习"},"type":"lvl2","url":"/freqai-reinforcement-learning#id","position":2},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl2":"强化学习"},"content":"安装体积\n\n强化学习依赖项包含如 torch 这样的大型包，需在执行 ./setup.sh -i 时，在\"Do you also want dependencies for freqai-rl (~700mb additional space required) [y/N]?”问题上选择\"y\"以显式安装。\n\n喜欢使用 docker 的用户应确保使用带有 _freqairl 后缀的 docker 镜像。","type":"content","url":"/freqai-reinforcement-learning#id","position":3},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"背景与术语","lvl2":"强化学习"},"type":"lvl3","url":"/freqai-reinforcement-learning#id-1","position":4},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"背景与术语","lvl2":"强化学习"},"content":"","type":"content","url":"/freqai-reinforcement-learning#id-1","position":5},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl4":"什么是 RL，FreqAI 为什么需要它？","lvl3":"背景与术语","lvl2":"强化学习"},"type":"lvl4","url":"/freqai-reinforcement-learning#id-rl-freqai","position":6},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl4":"什么是 RL，FreqAI 为什么需要它？","lvl3":"背景与术语","lvl2":"强化学习"},"content":"强化学习涉及两个重要组成部分：智能体（agent）和训练环境（environment）。在智能体训练期间，智能体逐根遍历历史蜡烛数据，每次做出一组动作中的一个：多头开仓、多头平仓、空头开仓、空头平仓、中立。在此训练过程中，环境会跟踪这些动作的表现，并根据自定义的 calculate_reward()（我们为用户提供了一个默认奖励函数，详情见\n\n此处）对智能体进行奖励。奖励用于训练神经网络中的权重。\n\nFreqAI RL 实现的另一个重要组成部分是*状态（state）*信息的使用。每一步都会将状态信息（如当前利润、当前持仓、当前交易持续时间）输入网络。这些信息用于训练环境中的智能体，并在 dry/live 时强化智能体（此功能在回测中不可用）。FreqAI + Freqtrade 是这种强化机制的完美结合，因为这些信息在实时部署中随时可用。\n\n强化学习是 FreqAI 的自然进化，因为它为市场自适应和反应性增加了新的层次，这是分类器和回归器无法比拟的。然而，分类器和回归器也有 RL 不具备的优势，比如稳健的预测。训练不当的 RL 智能体可能会找到\"漏洞\"或\"技巧\"来最大化奖励，但实际上并未获得任何交易收益。因此，RL 更加复杂，需要比典型分类器和回归器更高的理解水平。","type":"content","url":"/freqai-reinforcement-learning#id-rl-freqai","position":7},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl4":"RL 接口","lvl3":"背景与术语","lvl2":"强化学习"},"type":"lvl4","url":"/freqai-reinforcement-learning#rl","position":8},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl4":"RL 接口","lvl3":"背景与术语","lvl2":"强化学习"},"content":"在当前框架下，我们旨在通过通用的\"预测模型\"文件暴露训练环境，该文件是用户继承的 BaseReinforcementLearner 对象（如 freqai/prediction_models/ReinforcementLearner）。在此用户类中，RL 环境可通过 MyRLEnv 进行自定义（见\n\n下文）。\n\n我们设想大多数用户会将精力集中在创造性设计 calculate_reward() 函数（详情见\n\n此处），而对环境的其他部分保持不变。其他用户甚至不会修改环境，只会调整配置和 FreqAI 已有的强大特征工程。与此同时，我们也允许高级用户完全自定义自己的模型类。\n\n该框架基于 stable_baselines3（torch）和 OpenAI gym 构建基础环境类。但总体而言，模型类隔离良好，因此可以轻松集成其他竞争库。环境继承自 gym.Env，因此如需切换到其他库，需编写全新的环境。","type":"content","url":"/freqai-reinforcement-learning#rl","position":9},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl4":"重要注意事项","lvl3":"背景与术语","lvl2":"强化学习"},"type":"lvl4","url":"/freqai-reinforcement-learning#id-2","position":10},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl4":"重要注意事项","lvl3":"背景与术语","lvl2":"强化学习"},"content":"如上所述，智能体在一个\"人工\"交易\"环境\"中被\"训练\"。在我们的案例中，这个环境看起来与真实的 Freqtrade 回测环境很相似，但它不是。实际上，RL 训练环境要简单得多。它不包含任何复杂的策略逻辑，如 custom_exit、custom_stoploss、杠杆控制等回调。RL 环境是对真实市场的非常\"原始\"表示，智能体可以自由学习由 calculate_reward() 强制执行的策略（如止损、止盈等）。因此，必须注意，智能体训练环境并不等同于真实世界。","type":"content","url":"/freqai-reinforcement-learning#id-2","position":11},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"运行强化学习","lvl2":"强化学习"},"type":"lvl3","url":"/freqai-reinforcement-learning#id-3","position":12},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"运行强化学习","lvl2":"强化学习"},"content":"设置和运行强化学习模型与运行回归器或分类器相同。命令行上必须定义同样的两个参数：--freqaimodel 和 --strategy：freqtrade trade --freqaimodel ReinforcementLearner --strategy MyRLStrategy --config config.json\n\n其中 ReinforcementLearner 将使用 freqai/prediction_models/ReinforcementLearner 中的模板类（或 user_data/freqaimodels 下的自定义类）。策略部分则与典型回归器一样，采用\n\n特征工程的 feature_engineering_*。不同之处在于目标的创建，强化学习不需要目标标签。然而，FreqAI 要求在动作列中设置一个默认（中立）值：    def set_freqai_targets(self, dataframe, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅适用于启用 FreqAI 的策略*\n        设置模型目标的必需函数。\n        所有目标必须以 `&` 开头，以便 FreqAI 内部识别。\n\n        更多特征工程细节见：\n\n        https://www.freqtrade.io/en/latest/freqai-feature-engineering\n\n        :param df: 将接收目标的策略数据框\n        使用示例：dataframe[\"&-target\"] = dataframe[\"close\"].shift(-1) / dataframe[\"close\"]\n        \"\"\"\n        # 对于 RL，无需设置直接目标。此处为占位（中立），直到智能体发送动作。\n        dataframe[\"&-action\"] = 0\n        return dataframe\n\n大部分函数与典型回归器相同，但下方函数展示了策略如何将原始价格数据传递给智能体，以便其在训练环境中访问原始 OHLCV：    def feature_engineering_standard(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n        # 以下特征对 RL 模型是必要的\n        dataframe[f\"%-raw_close\"] = dataframe[\"close\"]\n        dataframe[f\"%-raw_open\"] = dataframe[\"open\"]\n        dataframe[f\"%-raw_high\"] = dataframe[\"high\"]\n        dataframe[f\"%-raw_low\"] = dataframe[\"low\"]\n    return dataframe\n\n最后，没有显式的\"标签\"需要设置——而是需要分配 &-action 列，该列在 populate_entry/exit_trends() 中被访问时包含智能体的动作。在本例中，中立动作为 0。此值应与所用环境一致。FreqAI 提供的两个环境均以 0 作为中立动作。\n\n用户会很快意识到无需设置标签，智能体会\"自主\"做出进出场决策。这使得策略构建变得相当简单。进出场信号由智能体以整数形式给出，直接用于策略中的进出场判断：    def populate_entry_trend(self, df: DataFrame, metadata: dict) -> DataFrame:\n\n        enter_long_conditions = [df[\"do_predict\"] == 1, df[\"&-action\"] == 1]\n\n        if enter_long_conditions:\n            df.loc[\n                reduce(lambda x, y: x & y, enter_long_conditions), [\"enter_long\", \"enter_tag\"]\n            ] = (1, \"long\")\n\n        enter_short_conditions = [df[\"do_predict\"] == 1, df[\"&-action\"] == 3]\n\n        if enter_short_conditions:\n            df.loc[\n                reduce(lambda x, y: x & y, enter_short_conditions), [\"enter_short\", \"enter_tag\"]\n            ] = (1, \"short\")\n\n        return df\n\n    def populate_exit_trend(self, df: DataFrame, metadata: dict) -> DataFrame:\n        exit_long_conditions = [df[\"do_predict\"] == 1, df[\"&-action\"] == 2]\n        if exit_long_conditions:\n            df.loc[reduce(lambda x, y: x & y, exit_long_conditions), \"exit_long\"] = 1\n\n        exit_short_conditions = [df[\"do_predict\"] == 1, df[\"&-action\"] == 4]\n        if exit_short_conditions:\n            df.loc[reduce(lambda x, y: x & y, exit_short_conditions), \"exit_short\"] = 1\n\n        return df\n\n需要注意的是，&-action 取决于所选环境。上述示例展示了 5 个动作，其中 0 为中立，1 为多头开仓，2 为多头平仓，3 为空头开仓，4 为空头平仓。","type":"content","url":"/freqai-reinforcement-learning#id-3","position":13},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"配置强化学习器","lvl2":"强化学习"},"type":"lvl3","url":"/freqai-reinforcement-learning#id-4","position":14},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"配置强化学习器","lvl2":"强化学习"},"content":"要配置 Reinforcement Learner，需在 freqai 配置中包含如下字典：        \"rl_config\": {\n            \"train_cycles\": 25,\n            \"add_state_info\": true,\n            \"max_trade_duration_candles\": 300,\n            \"max_training_drawdown_pct\": 0.02,\n            \"cpu_count\": 8,\n            \"model_type\": \"PPO\",\n            \"policy_type\": \"MlpPolicy\",\n            \"model_reward_parameters\": {\n                \"rr\": 1,\n                \"profit_aim\": 0.025\n            }\n        }\n\n参数详情见\n\n参数表。一般来说，train_cycles 决定智能体在其人工环境中遍历蜡烛数据以训练模型权重的次数。model_type 是一个字符串，选择 \n\nstable_baselines（外部链接）中可用的模型之一。\n\nNote\n\n如果你想尝试 continual_learning，应在主 freqai 配置字典中将其设为 true。这会让强化学习库在每次再训练时，从前一模型的最终状态继续训练新模型，而不是每次都从头训练。\n\nNote\n\n请记住，通用的 model_training_parameters 字典应包含特定 model_type 的所有模型超参数。例如，PPO 参数见\n\n此处。","type":"content","url":"/freqai-reinforcement-learning#id-4","position":15},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"创建自定义奖励函数","lvl2":"强化学习"},"type":"lvl3","url":"/freqai-reinforcement-learning#id-5","position":16},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"创建自定义奖励函数","lvl2":"强化学习"},"content":"不适用于生产环境\n\n警告！\n\nFreqtrade 源码中提供的奖励函数仅用于展示功能，旨在展示/测试尽可能多的环境控制特性，并在小型计算机上快速运行。它是基准，不适用于生产环境。请注意，你需要自己创建 custom_reward() 函数，或使用其他用户在 Freqtrade 源码之外构建的模板。\n\n当你开始修改策略和预测模型时，会很快发现强化学习器与回归器/分类器有一些重要区别。首先，策略不设置目标值（无标签！）。相反，你需要在 MyRLEnv 类中设置 calculate_reward() 函数（见下文）。prediction_models/ReinforcementLearner.py 中提供了一个默认的 calculate_reward()，用于演示奖励构建的必要模块，但不适用于生产。用户必须创建自己的自定义强化学习模型类，或使用 Freqtrade 源码之外的预构建模型并保存到 user_data/freqaimodels。在 calculate_reward() 中可以表达你对市场的创造性理论。例如，你可以在智能体获利时奖励它，亏损时惩罚它，或奖励其开仓、惩罚其持仓过久。下方展示了这些奖励的计算方式：\n\n提示\n\n最好的奖励函数是连续可微且缩放良好的。换句话说，对罕见事件施加一次性大负惩罚不是好主意，神经网络无法学会这种函数。更好的做法是对常见事件施加小负惩罚，这有助于智能体更快学习。你还可以通过让奖励/惩罚随某些线性/指数函数按严重程度缩放来提升连续性。例如，随着持仓时间增加，逐步增加惩罚，这比在某一时刻一次性施加大惩罚更好。from freqtrade.freqai.prediction_models.ReinforcementLearner import ReinforcementLearner\nfrom freqtrade.freqai.RL.Base5ActionRLEnv import Actions, Base5ActionRLEnv, Positions\n\n\nclass MyCoolRLModel(ReinforcementLearner):\n    \"\"\"\n    用户自定义 RL 预测模型。\n\n    将此文件保存到 `freqtrade/user_data/freqaimodels`\n\n    然后用如下命令调用：\n\n    freqtrade trade --freqaimodel MyCoolRLModel --config config.json --strategy SomeCoolStrat\n\n    用户可重写 `IFreqaiModel` 继承树中的任意函数。对 RL 来说，最重要的是在此重写 `MyRLEnv`（见下文），以定义自定义 `calculate_reward()`，或重写环境的其他部分。\n\n    此类还允许用户重写 IFreqaiModel 树的其他部分。例如，可以重写 `def fit()`、`def train()` 或 `def predict()` 以精细控制这些过程。\n\n    另一个常见重写是 `def data_cleaning_predict()`，用于精细控制数据处理管道。\n    \"\"\"\n    class MyRLEnv(Base5ActionRLEnv):\n        \"\"\"\n        用户自定义环境。此类继承自 BaseEnvironment 和 gym.Env。\n        用户可重写父类的任意函数。以下为自定义 `calculate_reward()` 的示例。\n\n        警告！\n        此函数仅用于展示功能，旨在展示尽可能多的环境控制特性，并在小型计算机上快速运行。它是基准，不适用于生产环境。\n        \"\"\"\n        def calculate_reward(self, action: int) -> float:\n            # 首先，若动作无效则惩罚\n            if not self._is_valid(action):\n                return -2\n            pnl = self.get_unrealized_profit()\n\n            factor = 100\n\n            pair = self.pair.replace(':', '')\n\n            # 可使用 dataframe 中的特征值\n            # 假设策略中已生成移位的 RSI 指标。\n            rsi_now = self.raw_features[f\"%-rsi-period_10_shift-1_{pair}_\"\n                            f\"{self.config['timeframe']}\"]\\\n                            .iloc[self._current_tick]\n\n            # 奖励智能体开仓\n            if (action in (Actions.Long_enter.value, Actions.Short_enter.value)\n                    and self._position == Positions.Neutral):\n                if rsi_now < 40:\n                    factor = 40 / rsi_now\n                else:\n                    factor = 1\n                return 25 * factor\n\n            # 惩罚智能体未开仓\n            if action == Actions.Neutral.value and self._position == Positions.Neutral:\n                return -1\n            max_trade_duration = self.rl_config.get('max_trade_duration_candles', 300)\n            trade_duration = self._current_tick - self._last_trade_tick\n            if trade_duration <= max_trade_duration:\n                factor *= 1.5\n            elif trade_duration > max_trade_duration:\n                factor *= 0.5\n            # 惩罚持仓不动\n            if self._position in (Positions.Short, Positions.Long) and \\\n            action == Actions.Neutral.value:\n                return -1 * trade_duration / max_trade_duration\n            # 多头平仓\n            if action == Actions.Long_exit.value and self._position == Positions.Long:\n                if pnl > self.profit_aim * self.rr:\n                    factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n                return float(pnl * factor)\n            # 空头平仓\n            if action == Actions.Short_exit.value and self._position == Positions.Short:\n                if pnl > self.profit_aim * self.rr:\n                    factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n                return float(pnl * factor)\n            return 0.","type":"content","url":"/freqai-reinforcement-learning#id-5","position":17},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"使用 Tensorboard","lvl2":"强化学习"},"type":"lvl3","url":"/freqai-reinforcement-learning#id-tensorboard","position":18},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"使用 Tensorboard","lvl2":"强化学习"},"content":"强化学习模型受益于训练指标的跟踪。FreqAI 集成了 Tensorboard，允许用户跨所有币种和所有再训练过程跟踪训练和评估表现。可通过以下命令激活 Tensorboard：tensorboard --logdir user_data/models/unique-id\n\n其中 unique-id 是 freqai 配置文件中设置的 identifier。该命令需在单独的 shell 中运行，浏览器访问 127.0.0.1:6006（6006 为 Tensorboard 默认端口）查看输出。","type":"content","url":"/freqai-reinforcement-learning#id-tensorboard","position":19},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"自定义日志","lvl2":"强化学习"},"type":"lvl3","url":"/freqai-reinforcement-learning#id-6","position":20},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"自定义日志","lvl2":"强化学习"},"content":"FreqAI 还内置了一个名为 self.tensorboard_log 的分集摘要日志器，用于将自定义信息添加到 Tensorboard 日志。默认情况下，该函数在环境内每步调用一次以记录智能体动作。单集内所有步的值在每集结束时汇总报告，然后所有指标重置为 0，为下一个 episode 做准备。\n\nself.tensorboard_log 也可在环境内任意位置使用，例如可在 calculate_reward 函数中添加，以收集奖励各部分被调用的频率：    class MyRLEnv(Base5ActionRLEnv):\n        \"\"\"\n        用户自定义环境。此类继承自 BaseEnvironment 和 gym.Env。\n        用户可重写父类的任意函数。以下为自定义 `calculate_reward()` 的示例。\n        \"\"\"\n        def calculate_reward(self, action: int) -> float:\n            if not self._is_valid(action):\n                self.tensorboard_log(\"invalid\")\n                return -2\n\n\nNote\n\nself.tensorboard_log() 仅用于跟踪计数对象（如事件、动作）。如需记录浮点数，可作为第二参数传入，如 self.tensorboard_log(\"float_metric1\", 0.23)。此时指标值不会累加。","type":"content","url":"/freqai-reinforcement-learning#id-6","position":21},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"选择基础环境","lvl2":"强化学习"},"type":"lvl3","url":"/freqai-reinforcement-learning#id-7","position":22},{"hierarchy":{"lvl1":"FreqAI 强化学习指南","lvl3":"选择基础环境","lvl2":"强化学习"},"content":"FreqAI 提供三种基础环境：Base3ActionRLEnvironment、Base4ActionEnvironment 和 Base5ActionEnvironment。顾名思义，这些环境分别适用于可选择 3、4、5 种动作的智能体。Base3ActionEnvironment 最简单，智能体可选择持有、多头或空头。该环境也可用于仅做多的机器人（自动跟随策略的 can_short 标志），其中多头为开仓，空头为平仓。Base4ActionEnvironment 中，智能体可多头开仓、空头开仓、中立持有或平仓。Base5ActionEnvironment 则与 Base4 类似，但将平仓动作区分为多头平仓和空头平仓。环境选择的主要影响包括：\n\ncalculate_reward 中可用的动作\n\n用户策略中消费的动作\n\nFreqAI 提供的所有环境均继承自动作/持仓无关的 BaseEnvironment，该对象包含所有共享逻辑。架构设计易于自定义。最简单的自定义是 calculate_reward()（详见\n\n此处）。当然，也可进一步扩展环境内的任意函数，只需在预测模型文件的 MyRLEnv 中重写这些函数即可。更高级的自定义建议直接继承 BaseEnvironment 创建全新环境。\n\nNote\n\n仅 Base3ActionRLEnv 支持仅做多训练/交易（将用户策略属性 can_short = False）。","type":"content","url":"/freqai-reinforcement-learning#id-7","position":23},{"hierarchy":{"lvl1":"FreqAI 运行指南"},"type":"lvl1","url":"/freqai-running","position":0},{"hierarchy":{"lvl1":"FreqAI 运行指南"},"content":"","type":"content","url":"/freqai-running","position":1},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl2":"运行 FreqAI"},"type":"lvl2","url":"/freqai-running#id-freqai","position":2},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl2":"运行 FreqAI"},"content":"有两种方式可以训练和部署自适应机器学习模型——实时部署和历史回测。在这两种情况下，FreqAI 都会运行/模拟模型的周期性再训练，如下图所示：","type":"content","url":"/freqai-running#id-freqai","position":3},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"实时部署","lvl2":"运行 FreqAI"},"type":"lvl3","url":"/freqai-running#id","position":4},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"实时部署","lvl2":"运行 FreqAI"},"content":"可以使用以下命令以 dry/live 模式运行 FreqAI：freqtrade trade --strategy FreqaiExampleStrategy --config config_freqai.example.json --freqaimodel LightGBMRegressor\n\n启动后，FreqAI 会根据配置设置开始训练一个新的模型，并生成一个新的 identifier。训练完成后，该模型将用于对新到的蜡烛数据进行预测，直到有新模型可用。通常，FreqAI 会尽可能频繁地生成新模型，并管理一个内部队列以尽量保持所有币对的模型都是最新的。FreqAI 总是使用最近训练的模型对实时数据进行预测。如果你不希望 FreqAI 频繁再训练新模型，可以设置 live_retrain_hours，让 FreqAI 至少等待指定小时数后再训练新模型。此外，你可以设置 expired_hours，让 FreqAI 避免使用超过该小时数的旧模型进行预测。\n\n训练好的模型默认会保存到磁盘，以便在回测或崩溃后复用。你可以在配置中设置 \"purge_old_models\": true 来\n\n清理旧模型，以节省磁盘空间。\n\n要从已保存的回测模型（或先前崩溃的 dry/live 会话）启动 dry/live 运行，只需指定特定模型的 identifier：    \"freqai\": {\n        \"identifier\": \"example\",\n        \"live_retrain_hours\": 0.5\n    }\n\n在这种情况下，虽然 FreqAI 会用预训练模型启动，但仍会检查自模型训练以来经过了多长时间。如果自加载模型结束以来已过完整的 live_retrain_hours，FreqAI 会开始训练新模型。","type":"content","url":"/freqai-running#id","position":5},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"自动数据下载","lvl3":"实时部署","lvl2":"运行 FreqAI"},"type":"lvl4","url":"/freqai-running#id-1","position":6},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"自动数据下载","lvl3":"实时部署","lvl2":"运行 FreqAI"},"content":"FreqAI 会自动下载所需的数据量，以确保通过定义的 train_period_days 和 startup_candle_count 训练模型（详细参数说明见\n\n参数表）。","type":"content","url":"/freqai-running#id-1","position":7},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"保存预测数据","lvl3":"实时部署","lvl2":"运行 FreqAI"},"type":"lvl4","url":"/freqai-running#id-2","position":8},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"保存预测数据","lvl3":"实时部署","lvl2":"运行 FreqAI"},"content":"在特定 identifier 模型生命周期内的所有预测都会存储在 historic_predictions.pkl 文件中，以便在崩溃或配置更改后重新加载。","type":"content","url":"/freqai-running#id-2","position":9},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"清理旧模型数据","lvl3":"实时部署","lvl2":"运行 FreqAI"},"type":"lvl4","url":"/freqai-running#id-3","position":10},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"清理旧模型数据","lvl3":"实时部署","lvl2":"运行 FreqAI"},"content":"FreqAI 每次成功训练后都会保存新模型文件。随着新模型的生成，这些文件会变得过时。如果你计划让 FreqAI 长时间运行并高频再训练，建议在配置中启用 purge_old_models：    \"freqai\": {\n        \"purge_old_models\": 4,\n    }\n\n这会自动清理除最近四个模型外的所有旧模型，以节省磁盘空间。输入 “0” 则永远不会清理任何模型。","type":"content","url":"/freqai-running#id-3","position":11},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"回测","lvl2":"运行 FreqAI"},"type":"lvl3","url":"/freqai-running#id-4","position":12},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"回测","lvl2":"运行 FreqAI"},"content":"可以用以下命令执行 FreqAI 回测模块：freqtrade backtesting --strategy FreqaiExampleStrategy --strategy-path freqtrade/templates --config config_examples/config_freqai.example.json --freqaimodel LightGBMRegressor --timerange 20210501-20210701\n\n如果使用现有配置文件从未执行过该命令，FreqAI 会为每个币对、每个回测窗口训练新模型。\n\n回测模式需要在部署前\n\n下载必要的数据（与 dry/live 模式不同，后者 FreqAI 会自动下载数据）。你需要确保下载的数据时间范围大于回测时间范围，因为 FreqAI 需要在目标回测时间范围开始前的数据来训练模型，以便在回测时间范围的第一根蜡烛上就能做出预测。如何计算所需下载数据的更多细节见\n\n此处。\n\n模型复用\n\n训练完成后，可以用相同配置文件再次执行回测，FreqAI 会找到已训练的模型并加载，而不会重新训练。这对于在策略内部调整（甚至超参数优化）买入和卖出条件非常有用。如果你想用相同配置文件重新训练新模型，只需更改 identifier。这样，你可以通过指定 identifier 随时切换到任何你想用的模型。\n\nNote\n\n回测会对每个回测窗口调用一次 set_freqai_targets()（窗口数量为完整回测时间范围除以 backtest_period_days 参数）。这样可以模拟 dry/live 行为而不会产生前视偏差。但 feature_engineering_*() 的特征定义会在整个训练时间范围上执行一次。因此要确保特征不会前视未来。关于前视偏差的更多细节见\n\n常见错误。","type":"content","url":"/freqai-running#id-4","position":13},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"保存回测预测数据","lvl3":"回测","lvl2":"运行 FreqAI"},"type":"lvl4","url":"/freqai-running#id-5","position":14},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"保存回测预测数据","lvl3":"回测","lvl2":"运行 FreqAI"},"content":"为了便于调整你的策略（不是特征！），FreqAI 会自动保存回测期间的预测，以便在未来回测和实时运行时复用相同 identifier 模型的预测。这为高层次超参数优化进出场条件提供了性能提升。\n\n在 unique-id 文件夹下会创建一个名为 backtesting_predictions 的目录，里面包含所有以 feather 格式存储的预测。\n\n要更改特征，你必须在配置中设置新的 identifier，以通知 FreqAI 训练新模型。\n\n如果你希望将某次回测生成的模型保存下来，以便后续直接用其启动实时部署而不是重新训练新模型，需在配置中设置 save_backtest_models 为 True。\n\nNote\n\n为确保模型可复用，freqAI 会用长度为 1 的 dataframe 调用你的策略。如果你的策略生成相同特征所需的数据多于 1 条，则无法将回测预测用于实时部署，每次新回测都需更新 identifier。","type":"content","url":"/freqai-running#id-5","position":15},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"回测实时收集的预测","lvl3":"回测","lvl2":"运行 FreqAI"},"type":"lvl4","url":"/freqai-running#id-6","position":16},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"回测实时收集的预测","lvl3":"回测","lvl2":"运行 FreqAI"},"content":"FreqAI 允许你通过回测参数 --freqai-backtest-live-models 复用实时历史预测。当你想复用 dry/run 生成的预测进行对比或其他研究时，这很有用。\n\n此时不能指定 --timerange 参数，因为它会根据历史预测文件中的数据自动计算。","type":"content","url":"/freqai-running#id-6","position":17},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"下载完整回测周期所需数据","lvl3":"回测","lvl2":"运行 FreqAI"},"type":"lvl4","url":"/freqai-running#id-7","position":18},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"下载完整回测周期所需数据","lvl3":"回测","lvl2":"运行 FreqAI"},"content":"对于 dry/live 部署，FreqAI 会自动下载所需数据。但要使用回测功能，你需要用 download-data 命令下载数据（详见\n\n此处）。你需要特别注意，下载的数据量要足够，确保在回测时间范围开始前有足够的训练数据。额外数据量可通过将时间范围起始日期向前移动 train_period_days 和 startup_candle_count（详细参数见\n\n参数表）来粗略估算。\n\n例如，若要用\n\n示例配置（train_period_days 设为 30，startup_candle_count: 40，最大 include_timeframes 为 1h）回测 --timerange 20210501-20210701，则下载数据的起始日期应为 20210501 - 30 天 - 40 * 1h / 24 小时 = 20210330（比目标训练时间范围早 31.7 天）。","type":"content","url":"/freqai-running#id-7","position":19},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"决定滑动训练窗口和回测周期的大小","lvl3":"回测","lvl2":"运行 FreqAI"},"type":"lvl4","url":"/freqai-running#id-8","position":20},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl4":"决定滑动训练窗口和回测周期的大小","lvl3":"回测","lvl2":"运行 FreqAI"},"content":"回测时间范围通过配置文件中的常规 --timerange 参数定义。滑动训练窗口的持续时间由 train_period_days 设置，backtest_period_days 则是滑动回测窗口，二者均以天为单位（backtest_period_days 可为小数，表示在 live/dry 模式下的亚日再训练）。在\n\n示例配置（位于 config_examples/config_freqai.example.json）中，用户要求 FreqAI 使用 30 天训练期，并在随后的 7 天进行回测。模型训练完成后，FreqAI 会回测接下来的 7 天。然后\"滑动窗口\"前移一周（模拟 FreqAI 在 live 模式下每周再训练一次），新模型使用前 30 天（包括前一个模型用于回测的 7 天）进行训练。如此反复，直到 --timerange 结束。这意味着如果你设置 --timerange 20210501-20210701，FreqAI 在该时间范围结束时会训练 8 个独立模型（因为整个范围包含 8 周）。\n\nNote\n\n虽然允许使用小数的 backtest_period_days，但要注意 --timerange 会被该值整除，以确定 FreqAI 需要训练多少个模型来完成整个回测。例如，设置 10 天的 --timerange 和 0.1 的 backtest_period_days，FreqAI 需要为每个币对训练 100 个模型才能完成回测。正因如此，完整回测 FreqAI 的自适应训练会非常耗时。最好的测试方法是直接 dry run 并让其持续训练。在这种情况下，回测所需时间与 dry run 完全相同。","type":"content","url":"/freqai-running#id-8","position":21},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"定义模型过期时间","lvl2":"运行 FreqAI"},"type":"lvl3","url":"/freqai-running#id-9","position":22},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"定义模型过期时间","lvl2":"运行 FreqAI"},"content":"在 dry/live 模式下，FreqAI 会按顺序为每个币对训练模型（在主 Freqtrade 机器人之外的独立线程/GPU 上）。这意味着模型之间总会有年龄差异。如果你训练 50 个币对，每个币对训练需 5 分钟，最老的模型会超过 4 小时。这在策略的特征时间尺度（交易目标周期）小于 4 小时时可能不可接受。你可以在配置文件中设置 expiration_hours，只允许模型在小于指定小时数时参与交易：    \"freqai\": {\n        \"expiration_hours\": 0.5,\n    }\n\n在示例配置中，用户只允许使用小于半小时的模型进行预测。","type":"content","url":"/freqai-running#id-9","position":23},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"控制模型学习过程","lvl2":"运行 FreqAI"},"type":"lvl3","url":"/freqai-running#id-10","position":24},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"控制模型学习过程","lvl2":"运行 FreqAI"},"content":"模型训练参数取决于所选的机器学习库。FreqAI 允许你在配置的 model_training_parameters 字典中为任意库设置任意参数。示例配置（见 config_examples/config_freqai.example.json）展示了 Catboost 和 LightGBM 的部分参数示例，但你可以添加这些库或你实现的其他库的所有可用参数。\n\n数据划分参数在 data_split_parameters 中定义，可为 scikit-learn 的 train_test_split() 函数的任意参数。train_test_split() 有一个 shuffle 参数，允许打乱数据或保持顺序。这对于避免因时间自相关数据而导致的训练偏差特别有用。更多参数细节见\n\nscikit-learn 官网（外部网站）。\n\nFreqAI 特有参数 label_period_candles 定义用于 labels 的未来蜡烛数量偏移。在\n\n示例配置中，用户要求 labels 预测未来 24 根蜡烛。","type":"content","url":"/freqai-running#id-10","position":25},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"持续学习","lvl2":"运行 FreqAI"},"type":"lvl3","url":"/freqai-running#id-11","position":26},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"持续学习","lvl2":"运行 FreqAI"},"content":"你可以在配置中设置 \"continual_learning\": true 采用持续学习方案。启用后，初始模型会从头训练，后续训练会从前一次训练的最终模型状态开始。这让新模型拥有\"记忆\"。默认情况下为 False，即所有新模型都从头训练，不继承前一模型。\n\n持续学习强制参数空间恒定\n\n由于 continual_learning 意味着模型参数空间不能在训练间变化，启用 continual_learning 时会自动禁用 principal_component_analysis。提示：PCA 会改变参数空间和特征数量，详细了解 PCA 见\n\n此处。\n\n实验性功能\n\n请注意，这目前是增量学习的朴素实现，在市场偏离模型时极易过拟合/陷入局部最优。FreqAI 主要为实验目的提供该机制，以便为加密市场等混沌系统的更成熟持续学习方法做好准备。","type":"content","url":"/freqai-running#id-11","position":27},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"超参数优化（Hyperopt）","lvl2":"运行 FreqAI"},"type":"lvl3","url":"/freqai-running#id-hyperopt","position":28},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"超参数优化（Hyperopt）","lvl2":"运行 FreqAI"},"content":"你可以用与\n\n常规 Freqtrade 超参数优化相同的命令进行 hyperopt：freqtrade hyperopt --hyperopt-loss SharpeHyperOptLoss --strategy FreqaiExampleStrategy --freqaimodel LightGBMRegressor --strategy-path freqtrade/templates --config config_examples/config_freqai.example.json --timerange 20220428-20220507\n\nhyperopt 要求你像\n\n回测一样预先下载数据。此外，hyperopt FreqAI 策略时需注意以下限制：\n\n--analyze-per-epoch 超参数不兼容 FreqAI。\n\n不能对 feature_engineering_*() 和 set_freqai_targets() 函数中的指标进行超参数优化。这意味着不能用 hyperopt 优化模型参数。除此之外，可以优化所有其他\n\n空间。\n\n回测的所有说明同样适用于 hyperopt。\n\n结合 hyperopt 和 FreqAI 的最佳方法是专注于优化进出场阈值/条件。你需要优化未用于特征的参数。例如，不应尝试优化特征创建中的滚动窗口长度，或任何会改变预测的 FreqAI 配置部分。为高效 hyperopt FreqAI 策略，FreqAI 会将预测保存为 dataframe 并复用。因此只需优化进出场阈值/条件。\n\nFreqAI 中可超参数优化的一个好例子是 \n\nDissimilarity Index (DI) 的阈值 DI_values，超过该值的数据点视为异常值：di_max = IntParameter(low=1, high=20, default=10, space='buy', optimize=True, load=True)\ndataframe['outlier'] = np.where(dataframe['DI_values'] > self.di_max.value/10, 1, 0)\n\n这个超参数优化可以帮助你了解适合你参数空间的 DI_values。","type":"content","url":"/freqai-running#id-hyperopt","position":29},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"使用 Tensorboard","lvl2":"运行 FreqAI"},"type":"lvl3","url":"/freqai-running#id-tensorboard","position":30},{"hierarchy":{"lvl1":"FreqAI 运行指南","lvl3":"使用 Tensorboard","lvl2":"运行 FreqAI"},"content":"可用性\n\nFreqAI 支持多种模型的 tensorboard，包括 XGBoost、所有 PyTorch 模型、强化学习和 Catboost。如果你希望在其他模型类型中集成 Tensorboard，请在 \n\nFreqtrade GitHub 提交 issue。\n\n要求\n\nTensorboard 日志记录需要 FreqAI 的 torch 安装或 docker 镜像。\n\n最简单的使用 tensorboard 的方式是确保配置文件中 freqai.activate_tensorboard 设置为 True（默认），运行 FreqAI 后，在另一个 shell 中运行：cd freqtrade\ntensorboard --logdir user_data/models/unique-id\n\n其中 unique-id 是 freqai 配置文件中设置的 identifier。如果你希望在浏览器 127.0.0.1:6060（6060 是 Tensorboard 默认端口）查看输出，必须在单独的 shell 中运行该命令。\n\n性能提示\n\nTensorboard 日志记录会降低训练速度，生产环境建议关闭。","type":"content","url":"/freqai-running#id-tensorboard","position":31},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/freqai","position":0},{"hierarchy":{"lvl1":""},"content":"","type":"content","url":"/freqai","position":1},{"hierarchy":{"lvl1":"","lvl2":""},"type":"lvl2","url":"/freqai","position":2},{"hierarchy":{"lvl1":"","lvl2":""},"content":"","type":"content","url":"/freqai","position":3},{"hierarchy":{"lvl1":"","lvl2":"title: FreqAI 使用指南\nsubject: FreqTrade FreqAI 指南\nsubtitle: FreqAI 机器学习模块详解\nshort_title: FreqAI\ndescription: 本文档详细介绍了 FreqAI 机器学习模块的功能和使用方法,包括自适应训练、特征工程、回测等核心功能的说明。"},"type":"lvl2","url":"/freqai#title-freqai-subject-freqtrade-freqai-subtitle-freqai-short-title-freqai-description-freqai","position":4},{"hierarchy":{"lvl1":"","lvl2":"title: FreqAI 使用指南\nsubject: FreqTrade FreqAI 指南\nsubtitle: FreqAI 机器学习模块详解\nshort_title: FreqAI\ndescription: 本文档详细介绍了 FreqAI 机器学习模块的功能和使用方法,包括自适应训练、特征工程、回测等核心功能的说明。"},"content":"","type":"content","url":"/freqai#title-freqai-subject-freqtrade-freqai-subtitle-freqai-short-title-freqai-description-freqai","position":5},{"hierarchy":{"lvl1":"FreqAI"},"type":"lvl1","url":"/freqai#freqai","position":6},{"hierarchy":{"lvl1":"FreqAI"},"content":"","type":"content","url":"/freqai#freqai","position":7},{"hierarchy":{"lvl1":"FreqAI","lvl2":"简介"},"type":"lvl2","url":"/freqai#id","position":8},{"hierarchy":{"lvl1":"FreqAI","lvl2":"简介"},"content":"FreqAI 是一款旨在自动化与训练预测性机器学习模型相关的各种任务的软件，该模型可根据一组输入信号生成市场预测。总体而言，FreqAI 旨在成为一个沙盒，便于在实时数据上轻松部署强大的机器学习库（\n\n详情）。\n\nNote\n\nFreqAI 是且永远是一个非营利、开源项目。FreqAI 没有加密货币代币，FreqAI 不出售信号，FreqAI 除了当前的 \n\nfreqtrade 文档 外没有其他域名。\n\n功能包括：\n\n自适应再训练 - 在\n\n实盘部署期间以监督方式自适应地再训练模型以适应市场\n\n快速特征工程 - 基于用户自定义策略创建丰富的\n\n特征集（1 万+特征）\n\n高性能 - 线程允许在与模型推理（预测）和机器人交易操作不同的线程（或可用时在 GPU 上）上自适应地再训练模型。最新的模型和数据保存在内存中以实现快速推理\n\n真实回测 - 使用\n\n回测模块在历史数据上模拟自适应训练，自动化再训练\n\n可扩展性 - 通用且健壮的架构允许集成任何 Python 可用的\n\n机器学习库/方法。目前已提供八个示例，包括分类器、回归器和卷积神经网络\n\n智能异常值剔除 - 使用多种\n\n异常值检测技术从训练和预测数据集中剔除异常值\n\n崩溃恢复 - 将训练好的模型存储到磁盘，以便从崩溃中快速恢复，并为持续的 dry/live 运行\n\n清理过时文件\n\n自动数据归一化 - 以智能且统计安全的方式\n\n归一化数据\n\n自动数据下载 - 计算数据下载的时间范围并更新历史数据（在实盘部署中）\n\n清理输入数据 - 在训练和模型推理前安全处理 NaN\n\n降维 - 通过\n\n主成分分析减少训练数据的维度\n\n机器人集群部署 - 设置一个机器人训练模型，同时一组\n\n消费者使用信号。","type":"content","url":"/freqai#id","position":9},{"hierarchy":{"lvl1":"FreqAI","lvl2":"快速开始"},"type":"lvl2","url":"/freqai#id-1","position":10},{"hierarchy":{"lvl1":"FreqAI","lvl2":"快速开始"},"content":"测试 FreqAI 最简单的方法是在 dry 模式下运行以下命令：freqtrade trade --config config_examples/config_freqai.example.json --strategy FreqaiExampleStrategy --freqaimodel LightGBMRegressor --strategy-path freqtrade/templates\n\n你将看到自动数据下载的启动过程，随后是同时训练和交易。\n\n不适用于生产环境\n\nFreqtrade 源代码中提供的示例策略旨在展示/测试 FreqAI 的各种功能。它还设计为可在小型计算机上运行，以便开发者和用户之间进行基准测试。它不适合用于生产环境。\n\n一个示例策略、预测模型和配置可作为起点，分别位于\nfreqtrade/templates/FreqaiExampleStrategy.py、freqtrade/freqai/prediction_models/LightGBMRegressor.py 和\nconfig_examples/config_freqai.example.json。","type":"content","url":"/freqai#id-1","position":11},{"hierarchy":{"lvl1":"FreqAI","lvl2":"总体思路"},"type":"lvl2","url":"/freqai#id-2","position":12},{"hierarchy":{"lvl1":"FreqAI","lvl2":"总体思路"},"content":"你需要为 FreqAI 提供一组自定义基础指标（与\n\n典型 Freqtrade 策略相同）以及目标值（标签）。对于白名单中的每个交易对，FreqAI 都会训练一个模型，根据自定义指标的输入预测目标值。模型会以预定频率持续再训练，以适应市场条件。FreqAI 支持回测策略（在历史数据上模拟定期再训练的现实情况）和 dry/live 部署。在 dry/live 条件下，FreqAI 可以设置为在后台线程中持续再训练，以保持模型尽可能最新。\n\n下图展示了算法的概览，解释了数据处理管道和模型的使用方式。","type":"content","url":"/freqai#id-2","position":13},{"hierarchy":{"lvl1":"FreqAI","lvl3":"重要的机器学习术语","lvl2":"总体思路"},"type":"lvl3","url":"/freqai#id-3","position":14},{"hierarchy":{"lvl1":"FreqAI","lvl3":"重要的机器学习术语","lvl2":"总体思路"},"content":"特征（Features） - 基于历史数据的参数，模型就是在这些参数上训练的。单根蜡烛的所有特征存储为一个向量。在 FreqAI 中，你可以用策略中能构造的任何内容来构建特征集。\n\n标签（Labels） - 模型训练的目标值。每个特征向量都关联一个你在策略中定义的标签。这些标签有意地\"看向未来\"，你训练模型的目标就是让它能预测这些标签。\n\n训练（Training） - \"教\"模型将特征集与关联标签匹配的过程。不同类型的模型\"学习\"方式不同，这意味着某些模型在特定应用上可能优于其他模型。FreqAI 已实现的不同模型的更多信息见\n\n这里。\n\n训练数据（Train data） - 在训练期间输入模型以\"教\"模型如何预测目标的特征数据集的子集。这些数据直接影响模型中的权重连接。\n\n测试数据（Test data） - 用于在训练后评估模型性能的特征数据集的子集。这些数据不会影响模型中的节点权重。\n\n推理（Inferencing） - 向训练好的模型输入新的、未见过的数据，让其做出预测的过程。","type":"content","url":"/freqai#id-3","position":15},{"hierarchy":{"lvl1":"FreqAI","lvl2":"安装依赖"},"type":"lvl2","url":"/freqai#id-4","position":16},{"hierarchy":{"lvl1":"FreqAI","lvl2":"安装依赖"},"content":"正常的 Freqtrade 安装流程会询问你是否要安装 FreqAI 依赖。如果你想使用 FreqAI，请回答\"yes\"。如果你没有选择 yes，可以在安装后手动安装这些依赖：pip install -r requirements-freqai.txt\n\nNote\n\nCatboost 不会在低性能的 arm 设备（如树莓派）上安装，因为该平台没有提供相应的 wheel 包。","type":"content","url":"/freqai#id-4","position":17},{"hierarchy":{"lvl1":"FreqAI","lvl3":"Docker 使用方法","lvl2":"安装依赖"},"type":"lvl3","url":"/freqai#docker","position":18},{"hierarchy":{"lvl1":"FreqAI","lvl3":"Docker 使用方法","lvl2":"安装依赖"},"content":"如果你使用 docker，可以使用带有 FreqAI 依赖的专用标签 :freqai。因此，你可以将 docker compose 文件中的镜像行替换为 image: freqtradeorg/freqtrade:stable_freqai。该镜像包含常规的 FreqAI 依赖。与本地安装类似，Catboost 在 ARM 设备上不可用。如果你想使用 PyTorch 或强化学习，应使用 torch 或 RL 标签，如 image: freqtradeorg/freqtrade:stable_freqaitorch、image: freqtradeorg/freqtrade:stable_freqairl。\n\ndocker-compose-freqai.yml\n\n我们在 docker/docker-compose-freqai.yml 中提供了专用的 docker-compose 文件，可以通过 docker compose -f docker/docker-compose-freqai.yml run ... 使用，或复制替换原有 docker 文件。该 docker-compose 文件还包含一个（默认禁用的）部分，用于在 docker 容器中启用 GPU 资源。显然，这要求系统本身有可用的 GPU 资源。","type":"content","url":"/freqai#docker","position":19},{"hierarchy":{"lvl1":"FreqAI","lvl3":"FreqAI 在开源机器学习领域的位置","lvl2":"安装依赖"},"type":"lvl3","url":"/freqai#freqai-1","position":20},{"hierarchy":{"lvl1":"FreqAI","lvl3":"FreqAI 在开源机器学习领域的位置","lvl2":"安装依赖"},"content":"对混沌时间序列系统（如股票/加密货币市场）进行预测需要一套广泛的工具来测试各种假设。幸运的是，近年来强大的机器学习库（如 scikit-learn）的成熟为研究带来了广阔的可能性。来自各个领域的科学家现在可以轻松地在大量成熟的机器学习算法上原型化他们的研究。同样，这些用户友好的库也让\"公民科学家\"能够用基础的 Python 技能进行数据探索。然而，在历史和实时混沌数据源上利用这些机器学习库在实际操作上可能很困难且昂贵。此外，健壮的数据收集、存储和处理也是一项挑战。\n\nFreqAI 旨在提供一个通用且可扩展的开源框架，专注于市场预测的自适应建模实盘部署。FreqAI 框架实际上是开源机器学习库丰富世界的一个沙盒。在 FreqAI 沙盒中，用户可以组合各种第三方库，在免费的 24/7 混沌数据源——加密货币交易所数据上测试创新假设。","type":"content","url":"/freqai#freqai-1","position":21},{"hierarchy":{"lvl1":"FreqAI","lvl3":"FreqAI 论文引用","lvl2":"安装依赖"},"type":"lvl3","url":"/freqai#freqai-2","position":22},{"hierarchy":{"lvl1":"FreqAI","lvl3":"FreqAI 论文引用","lvl2":"安装依赖"},"content":"FreqAI 已\n\n发表在 Journal of Open Source Software。如果你在研究中用到了 FreqAI，请使用以下引用：@article{Caulk2022, \n    doi = {10.21105/joss.04864},\n    url = {https://doi.org/10.21105/joss.04864},\n    year = {2022}, publisher = {The Open Journal},\n    volume = {7}, number = {80}, pages = {4864},\n    author = {Robert A. Caulk and Elin Törnquist and Matthias Voppichler and Andrew R. Lawless and Ryan McMullan and Wagner Costa Santos and Timothy C. Pogue and Johan van der Vlugt and Stefan P. Gehring and Pascal Schmidt},\n    title = {FreqAI: generalizing adaptive modeling for chaotic time-series market forecasts},\n    journal = {Journal of Open Source Software} } ","type":"content","url":"/freqai#freqai-2","position":23},{"hierarchy":{"lvl1":"FreqAI","lvl2":"常见陷阱"},"type":"lvl2","url":"/freqai#id-5","position":24},{"hierarchy":{"lvl1":"FreqAI","lvl2":"常见陷阱"},"content":"FreqAI 不能与动态 VolumePairlists（或任何动态增删交易对的 pairlist 过滤器）一起使用。\n这是出于性能考虑——FreqAI 依赖于快速预测/再训练。为此，它需要在 dry/live 实例开始时下载所有训练数据。FreqAI 会自动存储和追加新蜡烛，以便后续再训练。这意味着如果由于 volume pairlist 在 dry run 期间后续新增了交易对，FreqAI 将无法及时准备好数据。不过，FreqAI 可以与 ShufflePairlist 或总交易对数量恒定（但根据成交量重新排序）的 VolumePairlist 配合使用。","type":"content","url":"/freqai#id-5","position":25},{"hierarchy":{"lvl1":"FreqAI","lvl2":"进阶学习资料"},"type":"lvl2","url":"/freqai#id-6","position":26},{"hierarchy":{"lvl1":"FreqAI","lvl2":"进阶学习资料"},"content":"这里我们整理了一些外部资料，深入介绍了 FreqAI 的各个组件：\n\n实时对决：使用 XGBoost 和 CatBoost 对金融市场数据进行自适应建模\n\nFreqAI - 从价格到预测","type":"content","url":"/freqai#id-6","position":27},{"hierarchy":{"lvl1":"FreqAI","lvl2":"支持"},"type":"lvl2","url":"/freqai#id-7","position":28},{"hierarchy":{"lvl1":"FreqAI","lvl2":"支持"},"content":"你可以在多个地方获得 FreqAI 的支持，包括 \n\nFreqtrade discord、专用的 \n\nFreqAI discord，以及 \n\ngithub issues。","type":"content","url":"/freqai#id-7","position":29},{"hierarchy":{"lvl1":"FreqAI","lvl2":"致谢"},"type":"lvl2","url":"/freqai#id-8","position":30},{"hierarchy":{"lvl1":"FreqAI","lvl2":"致谢"},"content":"FreqAI 由一群为项目贡献各自专长的个人开发。\n\n构思与软件开发：\nRobert Caulk \n\n理论头脑风暴与数据分析：\nElin Törnquist \n\n代码审查与软件架构头脑风暴：\n\n\n软件开发：\nWagner Costa \nEmre Suzen \nTimothy Pogue \n\n测试与 bug 报告：\nStefan Gehring , , Andrew Lawless , Pascal Schmidt , Ryan McMullan , Juha Nykänen , Johan van der Vlugt , Richárd Józsa ","type":"content","url":"/freqai#id-8","position":31},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南"},"type":"lvl1","url":"/hyperopt","position":0},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南"},"content":"","type":"content","url":"/hyperopt","position":1},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl2":"Hyperopt"},"type":"lvl2","url":"/hyperopt#hyperopt","position":2},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl2":"Hyperopt"},"content":"本页解释了如何通过寻找最佳参数来调整您的策略，这个过程称为超参数优化。机器人使用 optuna 包中包含的算法来完成这项工作。\n搜索将消耗所有 CPU 核心，让您的笔记本电脑听起来像战斗机，并且仍然需要很长时间。\n\n一般来说，最佳参数的搜索从几个随机组合开始（详见\n\n下文），然后使用 optuna 的采样器算法之一（目前是 NSGAIIISampler）来快速找到搜索超空间中最小化\n\n损失函数值的参数组合。\n\nHyperopt 需要历史数据，就像回测一样（hyperopt 使用不同参数多次运行回测）。\n要了解如何获取您感兴趣的交易对和交易所的数据，请查看文档的\n\n数据下载部分。\n\nHyperopt 崩溃\n\n当只使用 1 个 CPU 核心时，Hyperopt 可能会崩溃，这在 \n\nIssue #1133 中被发现。\n\n不再需要编写单独的 hyperopt 类\n\n自 2021.4 版本起，您不再需要编写单独的 hyperopt 类，而是可以直接在策略中配置参数。\n\n旧方法在 2021.8 之前得到支持，并在 2021.9 中被移除。","type":"content","url":"/hyperopt#hyperopt","position":3},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"安装 hyperopt 依赖","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-hyperopt","position":4},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"安装 hyperopt 依赖","lvl2":"Hyperopt"},"content":"由于 Hyperopt 依赖项不是运行机器人本身所必需的，它们很重，在某些平台（如树莓派）上不容易构建，因此默认不安装。\n\n在运行 Hyperopt 之前，您需要安装相应的依赖项，如下所述。\n\n不支持在树莓派上运行\n\n由于 Hyperopt 是一个资源密集型进程，不建议也不支持在树莓派上运行。","type":"content","url":"/hyperopt#id-hyperopt","position":5},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"Docker 安装","lvl3":"安装 hyperopt 依赖","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#docker","position":6},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"Docker 安装","lvl3":"安装 hyperopt 依赖","lvl2":"Hyperopt"},"content":"docker 镜像包含 hyperopt 依赖项，无需进一步操作。","type":"content","url":"/hyperopt#docker","position":7},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"简易安装脚本 (setup.sh) / 手动安装","lvl3":"安装 hyperopt 依赖","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-setup-sh","position":8},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"简易安装脚本 (setup.sh) / 手动安装","lvl3":"安装 hyperopt 依赖","lvl2":"Hyperopt"},"content":"source .venv/bin/activate\npip install -r requirements-hyperopt.txt","type":"content","url":"/hyperopt#id-setup-sh","position":9},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#hyperopt-1","position":10},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"content":"用法: freqtrade hyperopt [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                          [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                          [--strategy-path PATH] [--recursive-strategy-search]\n                          [--freqaimodel NAME] [--freqaimodel-path PATH]\n                          [-i TIMEFRAME] [--timerange TIMERANGE]\n                          [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                          [--max-open-trades INT]\n                          [--stake-amount STAKE_AMOUNT] [--fee FLOAT]\n                          [-p PAIRS [PAIRS ...]] [--hyperopt-path PATH]\n                          [--eps] [--enable-protections]\n                          [--dry-run-wallet DRY_RUN_WALLET]\n                          [--timeframe-detail TIMEFRAME_DETAIL] [-e INT]\n                          [--spaces {all,buy,sell,roi,stoploss,trailing,protection,trades,default} [{all,buy,sell,roi,stoploss,trailing,protection,trades,default} ...]]\n                          [--print-all] [--print-json] [-j JOBS]\n                          [--random-state INT] [--min-trades INT]\n                          [--hyperopt-loss NAME] [--disable-param-export]\n                          [--ignore-missing-spaces] [--analyze-per-epoch]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的K线（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --max-open-trades INT\n                        覆盖配置设置中的 `max_open_trades` 值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖配置设置中的 `stake_amount` 值。\n  --fee FLOAT           指定手续费比率。将应用两次（在交易进入和退出时）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅用于这些交易对。交易对之间用空格分隔。\n  --hyperopt-path PATH  指定超参数损失函数的额外查找路径。\n  --eps, --enable-position-stacking\n                        允许多次购买同一交易对（仓位叠加）。\n  --enable-protections, --enableprotections\n                        为回测启用保护机制。这将显著降低回测速度，但会包含已配置的保护机制。\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        起始余额，用于回测/超参数优化和模拟运行。\n  --timeframe-detail TIMEFRAME_DETAIL\n                        为回测指定详细时间框架 (`1m`, `5m`, `30m`, `1h`, `1d`)。\n  -e INT, --epochs INT  指定 epoch 数量（默认：100）。\n  --spaces {all,buy,sell,roi,stoploss,trailing,protection,trades,default} [{all,buy,sell,roi,stoploss,trailing,protection,trades,default} ...]\n                        指定要超参数优化的参数空间。空格分隔的列表。\n  --print-all           打印所有结果，而不仅仅是最佳结果。\n  --print-json          以 JSON 格式输出结果。\n  -j JOBS, --job-workers JOBS\n                        超参数优化的并发作业数（worker 进程数）。如果为 -1（默认），则使用所有 CPU；为 -2 时，使用所有 CPU 但保留一个，依此类推。如果为 1，则不使用并行计算。\n  --random-state INT    设置随机种子，以便复现超参数优化结果。\n  --min-trades INT      设置超参数优化路径中评估的最小交易次数（默认：1）。\n  --hyperopt-loss NAME, --hyperoptloss NAME\n                        指定超参数损失函数类（IHyperOptLoss）的类名。不同的损失函数会产生完全不同的结果，因为优化目标不同。内置损失函数包括：\n                        ShortTradeDurHyperOptLoss, OnlyProfitHyperOptLoss,\n                        SharpeHyperOptLoss, SharpeHyperOptLossDaily,\n                        SortinoHyperOptLoss, SortinoHyperOptLossDaily,\n                        CalmarHyperOptLoss, MaxDrawDownHyperOptLoss,\n                        MaxDrawDownRelativeHyperOptLoss,\n                        MaxDrawDownPerPairHyperOptLoss,\n                        ProfitDrawDownHyperOptLoss, MultiMetricHyperOptLoss\n  --disable-param-export\n                        禁用自动导出超参数。\n  --ignore-missing-spaces, --ignore-unparameterized-spaces\n                        对于未包含任何参数的超参数空间，抑制错误。\n  --analyze-per-epoch   每个 epoch 执行一次 populate_indicators。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人要使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        为 freqaimodels 指定额外的查找路径。","type":"content","url":"/hyperopt#hyperopt-1","position":11},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"Hyperopt 清单","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#hyperopt-2","position":12},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"Hyperopt 清单","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"content":"Hyperopt 中所有任务/可能性的清单\n\n根据您想要优化的空间，只需要以下部分：\n\n使用 space='buy' 定义参数 - 用于入场信号优化\n\n使用 space='sell' 定义参数 - 用于出场信号优化\n\n前提\n\npopulate_indicators 需要创建所有空间可能使用的所有指标，否则 hyperopt 将无法工作。\n\n很少情况下，您可能还需要创建一个名为 HyperOpt 的\n\n嵌套类并实现：\n\nroi_space - 用于自定义 ROI 优化（如果您需要优化超空间中 ROI 参数的范围与默认值不同）\n\ngenerate_roi_table - 用于自定义 ROI 优化（如果您需要 ROI 表中值的范围与默认值不同，或者 ROI 表中的条目数（步骤）与默认的 4 个步骤不同）\n\nstoploss_space - 用于自定义止损优化（如果您需要优化超空间中止损参数的范围与默认值不同）\n\ntrailing_space - 用于自定义追踪止损优化（如果您需要优化超空间中追踪止损参数的范围与默认值不同）\n\nmax_open_trades_space - 用于自定义 max_open_trades 优化（如果您需要优化超空间中 max_open_trades 参数的范围与默认值不同）\n\n快速优化 ROI、止损和追踪止损\n\n您可以快速优化 roi、stoploss 和 trailing 空间，而无需更改策略中的任何内容。# 准备一个可用的策略。\nfreqtrade hyperopt --hyperopt-loss SharpeHyperOptLossDaily \\\n    --spaces roi stoploss trailing --strategy MyWorkingStrategy \\\n    --config config.json -e 100","type":"content","url":"/hyperopt#hyperopt-2","position":13},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"Hyperopt 执行逻辑","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#hyperopt-3","position":14},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"Hyperopt 执行逻辑","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"content":"Hyperopt 将首先将您的数据加载到内存中，然后为每个交易对运行一次 populate_indicators() 以生成所有指标，除非指定了 --analyze-per-epoch。\n\n然后，Hyperopt 将分叉到不同的进程（处理器数量或 -j <n>），并反复运行回测，更改属于定义的 --spaces 的参数。\n\n对于每组新参数，freqtrade 将首先运行 populate_entry_trend()，然后运行 populate_exit_trend()，然后运行常规回测过程来模拟交易。\n\n回测后，结果将传递给\n\n损失函数，该函数将评估这个结果是否比之前的结果更好或更差。基于损失函数结果，hyperopt 将确定下一轮回测中要尝试的下一组参数。","type":"content","url":"/hyperopt#hyperopt-3","position":15},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"配置您的守卫和触发器","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id","position":16},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"配置您的守卫和触发器","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"content":"您需要在策略文件中更改两个地方来添加新的买入 hyperopt 进行测试：\n\n在类级别定义 hyperopt 将要优化的参数。\n\n在 populate_entry_trend() 中 - 使用定义的参数值而不是原始常量。\n\n在那里您有两种不同类型的指标：1. guards（守卫）和 2. triggers（触发器）。\n\n守卫是类似\"当 ADX < 10 时永不买入\"或\"当当前价格超过 EMA10 时永不买入\"的条件。\n\n触发器是在特定时刻实际触发买入的指标，如\"当 EMA5 上穿 EMA10 时买入\"或\"当收盘价触及布林带下轨时买入\"。\n\n守卫和触发器\n\n从技术上讲，守卫和触发器之间没有区别。\n\n但是，本指南将做出这种区分，以明确信号不应该是\"粘性\"的。\n\n粘性信号是在多个蜡烛期间保持活跃的信号。这可能导致在信号消失前（这意味着成功的机会比开始时低得多）才进入信号。\n\n超参优化将在每个 epoch 轮次中选择一个触发器和可能的多个守卫。","type":"content","url":"/hyperopt#id","position":17},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl5":"出场信号优化","lvl4":"配置您的守卫和触发器","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"type":"lvl5","url":"/hyperopt#id-1","position":18},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl5":"出场信号优化","lvl4":"配置您的守卫和触发器","lvl3":"Hyperopt 命令参考","lvl2":"Hyperopt"},"content":"与上述入场信号类似，出场信号也可以优化。\n将相应的设置放入以下方法中：\n\n在类级别定义 hyperopt 将要优化的参数，可以通过将它们命名为 sell_*，或通过显式定义 space='sell'。\n\n在 populate_exit_trend() 中 - 使用定义的参数值而不是原始常量。\n\n配置和规则与买入信号相同。","type":"content","url":"/hyperopt#id-1","position":19},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"解决一个谜题","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-2","position":20},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"解决一个谜题","lvl2":"Hyperopt"},"content":"假设您很好奇：是否应该使用 MACD 交叉或布林带下轨来触发您的做多入场。\n您还想知道是否应该使用 RSI 或 ADX 来帮助做出这些决定。\n如果您决定使用 RSI 或 ADX，应该为它们使用哪些值？\n\n让我们使用超参数优化来解决这个谜题。","type":"content","url":"/hyperopt#id-2","position":21},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"优化指标参数","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-3","position":22},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"优化指标参数","lvl2":"Hyperopt"},"content":"假设您有一个简单的策略 - EMA 交叉策略（2 个移动平均线交叉）- 并且您想找到这个策略的理想参数。\n默认情况下，我们假设止损为 5% - 止盈（minimal_roi）为 10% - 这意味着 freqtrade 将在达到 10% 利润时卖出交易。from pandas import DataFrame\nfrom functools import reduce\n\nimport talib.abstract as ta\n\nfrom freqtrade.strategy import (BooleanParameter, CategoricalParameter, DecimalParameter, \n                                IStrategy, IntParameter)\nimport freqtrade.vendor.qtpylib.indicators as qtpylib\n\nclass MyAwesomeStrategy(IStrategy):\n    stoploss = -0.05\n    timeframe = '15m'\n    minimal_roi = {\n        \"0\":  0.10\n    }\n    # 定义参数空间\n    buy_ema_short = IntParameter(3, 50, default=5)\n    buy_ema_long = IntParameter(15, 200, default=50)\n\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"生成策略使用的所有指标\"\"\"\n        \n        # 计算所有 ema_short 值\n        for val in self.buy_ema_short.range:\n            dataframe[f'ema_short_{val}'] = ta.EMA(dataframe, timeperiod=val)\n        \n        # 计算所有 ema_long 值\n        for val in self.buy_ema_long.range:\n            dataframe[f'ema_long_{val}'] = ta.EMA(dataframe, timeperiod=val)\n        \n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        conditions = []\n        conditions.append(qtpylib.crossed_above(\n                dataframe[f'ema_short_{self.buy_ema_short.value}'], dataframe[f'ema_long_{self.buy_ema_long.value}']\n            ))\n\n        # 检查交易量不为 0\n        conditions.append(dataframe['volume'] > 0)\n\n        if conditions:\n            dataframe.loc[\n                reduce(lambda x, y: x & y, conditions),\n                'enter_long'] = 1\n        return dataframe\n\n    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        conditions = []\n        conditions.append(qtpylib.crossed_above(\n                dataframe[f'ema_long_{self.buy_ema_long.value}'], dataframe[f'ema_short_{self.buy_ema_short.value}']\n            ))\n\n        # 检查交易量不为 0\n        conditions.append(dataframe['volume'] > 0)\n\n        if conditions:\n            dataframe.loc[\n                reduce(lambda x, y: x & y, conditions),\n                'exit_long'] = 1\n        return dataframe\n\n分解说明：\n\n使用 self.buy_ema_short.range 将返回一个包含参数低值和高值之间所有条目的范围对象。\n在这种情况下（IntParameter(3, 50, default=5)），循环将为 3 到 50 之间的所有数字运行（[3, 4, 5, ... 49, 50]）。\n通过在循环中使用这个，hyperopt 将生成 48 个新列（['buy_ema_3', 'buy_ema_4', ... , 'buy_ema_50']）。\n\nHyperopt 本身将使用选定的值来创建买入和卖出信号。\n\n虽然这个策略可能过于简单，无法提供稳定的利润，但它应该作为如何优化指标参数的示例。\n\nNote\n\nself.buy_ema_short.range 在 hyperopt 和其他模式之间的行为会有所不同。对于 hyperopt，上面的示例可能生成 48 个新列，但是对于所有其他模式（回测、模拟/实盘），它将只为选定的值生成列。因此，您应该避免使用具有显式值的结果列（除了 self.buy_ema_short.value 之外的值）。\n\nNote\n\nrange 属性也可以与 DecimalParameter 和 CategoricalParameter 一起使用。由于无限搜索空间，RealParameter 不提供此属性。\n\n性能提示\n\n在正常的超参优化过程中，指标被计算一次并提供给每个 epoch，随着核心数量的增加，RAM 使用量线性增加。由于这也影响性能，有两种替代方案可以减少 RAM 使用量：\n\n将 ema_short 和 ema_long 计算从 populate_indicators() 移到 populate_entry_trend()。由于 populate_entry_trend() 将在每个 epoch 计算，您不需要使用 .range 功能。\n\nhyperopt 提供 --analyze-per-epoch，这将把 populate_indicators() 的执行移到 epoch 进程中，每个 epoch 每个参数只计算一个值，而不是使用 .range 功能。在这种情况下，.range 功能将只返回实际使用的值。\n\n这些替代方案将减少 RAM 使用量，但会增加 CPU 使用量。但是，您的超参优化运行不太可能因为内存不足（OOM）问题而失败。\n\n无论您使用 .range 功能还是上述替代方案，您都应该尝试使用尽可能小的空间范围，因为这将改善 CPU/RAM 使用量。","type":"content","url":"/hyperopt#id-3","position":23},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"优化保护措施","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#optimizing-protections","position":24},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"优化保护措施","lvl2":"Hyperopt"},"content":"Freqtrade 也可以优化保护措施。如何优化保护措施取决于您，以下内容仅供参考。\n\n策略只需要将\"protections\"条目定义为返回保护配置列表的属性。from pandas import DataFrame\nfrom functools import reduce\n\nimport talib.abstract as ta\n\nfrom freqtrade.strategy import (BooleanParameter, CategoricalParameter, DecimalParameter, \n                                IStrategy, IntParameter)\nimport freqtrade.vendor.qtpylib.indicators as qtpylib\n\nclass MyAwesomeStrategy(IStrategy):\n    stoploss = -0.05\n    timeframe = '15m'\n    # 定义参数空间\n    cooldown_lookback = IntParameter(2, 48, default=5, space=\"protection\", optimize=True)\n    stop_duration = IntParameter(12, 200, default=5, space=\"protection\", optimize=True)\n    use_stop_protection = BooleanParameter(default=True, space=\"protection\", optimize=True)\n\n\n    @property\n    def protections(self):\n        prot = []\n\n        prot.append({\n            \"method\": \"CooldownPeriod\",\n            \"stop_duration_candles\": self.cooldown_lookback.value\n        })\n        if self.use_stop_protection.value:\n            prot.append({\n                \"method\": \"StoplossGuard\",\n                \"lookback_period_candles\": 24 * 3,\n                \"trade_limit\": 4,\n                \"stop_duration_candles\": self.stop_duration.value,\n                \"only_per_pair\": False\n            })\n\n        return prot\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # ...\n        \n\n然后您可以按如下方式运行 hyperopt：\nfreqtrade hyperopt --hyperopt-loss SharpeHyperOptLossDaily --strategy MyAwesomeStrategy --spaces protection\n\nNote\n\n保护空间不是默认空间的一部分，仅在使用参数 Hyperopt 接口时可用，不适用于旧版 hyperopt 接口（需要单独的 hyperopt 文件）。\n如果选择了保护空间，Freqtrade 也会自动更改 “--enable-protections” 标志。\n\nWarning\n\n如果保护措施被定义为属性，配置中的条目将被忽略。\n因此建议不要在配置中定义保护措施。","type":"content","url":"/hyperopt#optimizing-protections","position":25},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"从以前的属性设置迁移","lvl3":"优化保护措施","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-4","position":26},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"从以前的属性设置迁移","lvl3":"优化保护措施","lvl2":"Hyperopt"},"content":"从以前的设置迁移非常简单，可以通过将保护措施条目转换为属性来完成。\n简单来说，以下配置将转换为下面的内容。class MyAwesomeStrategy(IStrategy):\n    protections = [\n        {\n            \"method\": \"CooldownPeriod\",\n            \"stop_duration_candles\": 4\n        }\n    ]\n\n结果class MyAwesomeStrategy(IStrategy):\n    \n    @property\n    def protections(self):\n        return [\n            {\n                \"method\": \"CooldownPeriod\",\n                \"stop_duration_candles\": 4\n            }\n        ]\n\n然后您显然也会将潜在有趣的条目更改为参数，以允许超参优化。","type":"content","url":"/hyperopt#id-4","position":27},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"优化 max_entry_position_adjustment","lvl3":"优化保护措施","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-max-entry-position-adjustment","position":28},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"优化 max_entry_position_adjustment","lvl3":"优化保护措施","lvl2":"Hyperopt"},"content":"虽然 max_entry_position_adjustment 不是一个单独的空间，但它仍然可以通过使用上面显示的属性方法在 hyperopt 中使用。from pandas import DataFrame\nfrom functools import reduce\n\nimport talib.abstract as ta\n\nfrom freqtrade.strategy import (BooleanParameter, CategoricalParameter, DecimalParameter, \n                                IStrategy, IntParameter)\nimport freqtrade.vendor.qtpylib.indicators as qtpylib\n\nclass MyAwesomeStrategy(IStrategy):\n    stoploss = -0.05\n    timeframe = '15m'\n\n    # 定义参数空间\n    max_epa = CategoricalParameter([-1, 0, 1, 3, 5, 10], default=1, space=\"buy\", optimize=True)\n\n    @property\n    def max_entry_position_adjustment(self):\n        return self.max_epa.value\n        \n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # ...\n\n使用 IntParameter\n\n您也可以使用 IntParameter 进行此优化，但必须显式返回一个整数：max_epa = IntParameter(-1, 10, default=1, space=\"buy\", optimize=True)\n\n@property\ndef max_entry_position_adjustment(self):\n    return int(self.max_epa.value)","type":"content","url":"/hyperopt#id-max-entry-position-adjustment","position":29},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"损失函数","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#loss-functions","position":30},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"损失函数","lvl2":"Hyperopt"},"content":"每个超参数调优都需要一个目标。这通常被定义为损失函数（有时也称为目标函数），对于更理想的结果应该减小，对于不好的结果应该增加。\n\n损失函数必须通过 --hyperopt-loss <Class-name> 参数指定（或可选地通过配置中的 \"hyperopt_loss\" 键）。\n这个类应该位于 user_data/hyperopts/ 目录中的自己的文件中。\n\n目前，以下损失函数是内置的：\n\nShortTradeDurHyperOptLoss - （默认的旧版 Freqtrade 超参优化损失函数）- 主要用于短交易持续时间和避免损失。\n\nOnlyProfitHyperOptLoss - 只考虑利润金额。\n\nSharpeHyperOptLoss - 优化相对于标准差的交易回报的夏普比率。\n\nSharpeHyperOptLossDaily - 优化相对于标准差的每日交易回报的夏普比率。\n\nSortinoHyperOptLoss - 优化相对于下行标准差的交易回报的索提诺比率。\n\nSortinoHyperOptLossDaily - 优化相对于下行标准差的每日交易回报的索提诺比率。\n\nMaxDrawDownHyperOptLoss - 优化最大绝对回撤。\n\nMaxDrawDownRelativeHyperOptLoss - 优化最大绝对回撤，同时调整最大相对回撤。\n\nMaxDrawDownPerPairHyperOptLoss - 计算每对交易对的利润/回撤比率，并返回最差结果作为目标，强制 hyperopt 优化交易对列表中所有交易对的参数。这样，我们防止一个或多个具有良好结果的交易对夸大指标，而表现不佳的交易对不被表示，因此不被优化。\n\nCalmarHyperOptLoss - 优化相对于最大回撤的交易回报的卡玛比率。\n\nProfitDrawDownHyperOptLoss - 通过最大利润和最小回撤目标进行优化。可以在 hyperoptloss 文件中调整 DRAWDOWN_MULT 变量，以在回撤目的上更严格或更灵活。\n\nMultiMetricHyperOptLoss - 通过几个关键指标进行优化，以实现平衡的性能。主要重点是最大化利润和最小化回撤，同时还考虑其他指标，如利润因子、期望比率和胜率。此外，它对交易次数少的 epoch 应用惩罚，鼓励具有足够交易频率的策略。\n\n创建自定义损失函数在文档的\n\n高级 Hyperopt 部分中介绍。","type":"content","url":"/hyperopt#loss-functions","position":31},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"执行 Hyperopt","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-hyperopt-1","position":32},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"执行 Hyperopt","lvl2":"Hyperopt"},"content":"一旦您更新了 hyperopt 配置，您就可以运行它。\n因为 hyperopt 尝试很多组合来找到最佳参数，所以需要时间才能获得好的结果。\n\n我们强烈建议使用 screen 或 tmux 来防止任何连接丢失。freqtrade hyperopt --config config.json --hyperopt-loss <hyperoptlossname> --strategy <strategyname> -e 500 --spaces all\n\n-e 选项将设置 hyperopt 将进行多少次评估。由于 hyperopt 使用贝叶斯搜索，一次运行太多 epoch 可能不会产生更好的结果。经验表明，最佳结果通常在 500-1000 epoch 后不会有太大改善。使用不同的随机状态进行多次运行（执行），每次运行几百个 epoch，很可能会产生不同的结果。\n\n--spaces all 选项确定应该优化所有可能的参数。可能性如下所示。\n\nNote\n\nHyperopt 将使用 hyperopt 开始时间的时间戳存储 hyperopt 结果。\n读取命令（hyperopt-list、hyperopt-show）可以使用 --hyperopt-filename <filename> 来读取和显示较旧的 hyperopt 结果。\n您可以使用 ls -l user_data/hyperopt_results/ 找到文件名列表。","type":"content","url":"/hyperopt#id-hyperopt-1","position":33},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"使用不同的历史数据源执行 Hyperopt","lvl3":"执行 Hyperopt","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-hyperopt-2","position":34},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"使用不同的历史数据源执行 Hyperopt","lvl3":"执行 Hyperopt","lvl2":"Hyperopt"},"content":"如果您想使用磁盘上的替代历史数据集来超参优化参数，\n请使用 --datadir PATH 选项。默认情况下，hyperopt 使用 user_data/data 目录中的数据。","type":"content","url":"/hyperopt#id-hyperopt-2","position":35},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"使用较小的测试集运行 Hyperopt","lvl3":"执行 Hyperopt","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-hyperopt-3","position":36},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"使用较小的测试集运行 Hyperopt","lvl3":"执行 Hyperopt","lvl2":"Hyperopt"},"content":"使用 --timerange 参数来更改您想要使用的测试集数量。\n例如，要使用一个月的数据，将 --timerange 20210101-20210201（从 2021 年 1 月到 2021 年 2 月）传递给 hyperopt 调用。\n\n完整命令：freqtrade hyperopt --strategy <strategyname> --timerange 20210101-20210201","type":"content","url":"/hyperopt#id-hyperopt-3","position":37},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"使用较小的搜索空间运行 Hyperopt","lvl3":"执行 Hyperopt","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-hyperopt-4","position":38},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"使用较小的搜索空间运行 Hyperopt","lvl3":"执行 Hyperopt","lvl2":"Hyperopt"},"content":"使用 --spaces 选项来限制 hyperopt 使用的搜索空间。\n让 Hyperopt 优化所有内容是一个巨大的搜索空间。\n通常，从只搜索初始买入算法开始可能更有意义。\n或者，也许您只想为您拥有的那个很棒的新买入策略优化止损或 roi 表。\n\n合法值是：\n\nall：优化所有内容\n\nbuy：只搜索新的买入策略\n\nsell：只搜索新的卖出策略\n\nroi：只为您的策略优化最小利润表\n\nstoploss：搜索最佳止损值\n\ntrailing：搜索最佳追踪止损值\n\ntrades：搜索最佳最大开放交易值\n\nprotection：搜索最佳保护参数（阅读\n\n保护部分了解如何正确定义这些）\n\ndefault：all 除了 trailing 和 protection\n\n任何上述值的空格分隔列表，例如 --spaces roi stoploss\n\n当未指定 --space 命令行选项时使用的默认 Hyperopt 搜索空间不包括 trailing 超空间。我们建议您在找到、验证并将其他超空间的最佳参数粘贴到您的自定义策略中后，单独运行 trailing 超空间的优化。","type":"content","url":"/hyperopt#id-hyperopt-4","position":39},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-hyperopt-5","position":40},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"content":"一旦 Hyperopt 完成，您可以使用结果来更新您的策略。\n给定以下结果来自 hyperopt：Best result:\n\n    44/100:    135 trades. Avg profit  0.57%. Total profit  0.03871918 BTC (0.7722%). Avg duration 180:34 min. Objective: 1.94367\n\nBuy hyperspace params:\n{\n    'buy_adx': 44,\n    'buy_adx_enabled': False,\n    'buy_rsi': 29,\n    'buy_rsi_enabled': True,\n    'buy_trigger': 'bb_lower'\n}\n\n您应该理解这个结果如下：\n\n最好的买入触发器是 bb_lower。\n\n您不应该使用 ADX，因为 'buy_adx_enabled': False。\n\n您应该考虑使用 RSI 指标 ('buy_rsi_enabled': True) 并且最好的值是 29.0 ('buy_rsi': 29.0)","type":"content","url":"/hyperopt#id-hyperopt-5","position":41},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"自动参数应用到策略","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-5","position":42},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"自动参数应用到策略","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"content":"当使用 Hyperoptable 参数时，您的 hyperopt-run 结果将写入策略旁边的 json 文件（所以对于 MyAwesomeStrategy.py，文件将是 MyAwesomeStrategy.json）。如果使用 hyperopt-show 子命令，除非 --disable-param-export 提供给两个命令中的任何一个，否则也会更新此文件。\n\n您的策略类也可以包含这些结果明确。只需复制 hyperopt 结果块并将其粘贴到类级别，替换旧参数（如果有）。新参数将自动在下一次策略执行时加载。\n\n将整个 hyperopt 结果传输到您的策略将如下所示：class MyAwesomeStrategy(IStrategy):\n    # 最佳参数\n    buy_rsi = IntParameter(20, 40, default=30, space=\"buy\", optimize=True)\n    buy_rsi_enabled = CategoricalParameter([True, False], default=True, space=\"buy\", optimize=True)\n    buy_trigger = CategoricalParameter([\"bb_lower\", \"macd_cross_signal\", \"sar_reversal\"], default=\"bb_lower\", space=\"buy\", optimize=True)\n    buy_adx = IntParameter(20, 50, default=30, space=\"buy\", optimize=True)\n    buy_adx_enabled = CategoricalParameter([True, False], default=True, space=\"buy\", optimize=True)\n\n    # 最佳结果\n    # 买入参数\n    buy_params = {\n        'buy_adx': 44,\n        'buy_adx_enabled': False,\n        'buy_rsi': 29,\n        'buy_rsi_enabled': True,\n        'buy_trigger': 'bb_lower'\n    }\n\nNote\n\n配置文件中的值将覆盖参数文件级别的参数 - 两者都将覆盖策略中的参数。\n因此优先级是：config > parameter file > strategy *_params > parameter default","type":"content","url":"/hyperopt#id-5","position":43},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"理解 Hyperopt ROI 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-hyperopt-roi","position":44},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"理解 Hyperopt ROI 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"content":"如果您正在优化 ROI（即如果优化搜索空间包含 ‘all’、‘default’ 或 ‘roi’），您的结果将如下所示并包括 ROI 表：Best result:\n\n    44/100:    135 trades. Avg profit  0.57%. Total profit  0.03871918 BTC (0.7722%). Avg duration 180:34 min. Objective: 1.94367\n\nROI table:\n{\n    0: 0.106,\n    10: 0.079,\n    20: 0.053,\n    30: 0.027\n}\n\n为了在回测和实时交易/干运行中使用这个最佳 ROI 表，复制并粘贴它作为自定义策略的 minimal_roi 属性值：    # 最佳 ROI 表\n    minimal_roi = {\n        \"0\":  0.106,\n        \"10\": 0.079,\n        \"20\": 0.053,\n        \"30\": 0.027\n    }\n\n如评论中所述，您也可以将其用作配置文件中的 minimal_roi 设置值。","type":"content","url":"/hyperopt#id-hyperopt-roi","position":45},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl5":"默认 ROI 搜索空间","lvl4":"理解 Hyperopt ROI 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"type":"lvl5","url":"/hyperopt#id-roi","position":46},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl5":"默认 ROI 搜索空间","lvl4":"理解 Hyperopt ROI 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"content":"如果您正在优化 ROI，Freqtrade 为您创建了 ‘roi’ 优化超空间——它是 ROI 表组件的超空间。默认情况下，每个由 Freqtrade 生成的 ROI 表包含 4 行（步骤）。Hyperopt 实现了自适应范围，用于 ROI 表中的值，这些值取决于使用的时间框架。默认情况下，值在以下范围内变化（对于一些最常用的时间框架，值四舍五入到小数点后三位）：\n\n# step\n\n1m\n\n\n\n5m\n\n\n\n1h\n\n\n\n1d\n\n\n\n1\n\n2...12\n\n0.02...0.15\n\n10...60\n\n0.02...0.15\n\n120...720\n\n0.02...0.15\n\n2880...17280\n\n0.02...0.15\n\n2\n\n3...18\n\n0.01...0.10\n\n15...90\n\n0.01...0.10\n\n180...1080\n\n0.01...0.10\n\n4320...25920\n\n0.01...0.10\n\n3\n\n4...24\n\n0.01...0.07\n\n20...120\n\n0.01...0.07\n\n240...1440\n\n0.01...0.07\n\n5760...34560\n\n0.01...0.07\n\n4\n\n6...44\n\n0.0\n\n30...220\n\n0.0\n\n360...2640\n\n0.0\n\n8640...63360\n\n0.0\n\n这些范围应该足以满足大多数情况。步骤中的分钟（ROI dict 键）按比例缩放，取决于使用的时间框架。步骤中的 ROI 值按比例缩放，取决于使用的时间框架。\n\n如果您有 generate_roi_table() 和 roi_space() 方法，请删除它们，以利用这些自适应 ROI 表和 Freqtrade 生成的 ROI 超参优化空间。\n\n覆盖 roi_space() 方法，如果您需要 ROI 表组件在其他范围内变化。覆盖 generate_roi_table() 和 roi_space() 方法并实现您自己的自定义方法，以在 hyperoptimization 期间生成 ROI 表。\n\n这些方法的示例可以在 \n\noverriding pre-defined spaces section 中找到。\n\nReduced search space\n\n为了进一步限制搜索空间，小数限制为 3 位小数（精度为 0.001）。这通常足够了，每个比这更精确的值通常会导致过拟合结果。但是，您可以 \n\noverriding pre-defined spaces 来根据需要更改此设置。","type":"content","url":"/hyperopt#id-roi","position":47},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"理解 Hyperopt Stoploss 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-hyperopt-stoploss","position":48},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"理解 Hyperopt Stoploss 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"content":"如果您正在优化止损值（即如果优化搜索空间包含 ‘all’、‘default’ 或 ‘stoploss’），您的结果将如下所示并包括止损：Best result:\n\n    44/100:    135 trades. Avg profit  0.57%. Total profit  0.03871918 BTC (0.7722%). Avg duration 180:34 min. Objective: 1.94367\n\nStoploss: -0.0699\n\n为了在回测和实时交易/干运行中使用这个最佳止损值，复制并粘贴它作为自定义策略的 stoploss 属性值：    # 最佳止损值\n    stoploss = -0.0699\n\n如评论中所述，您也可以将其用作配置文件中的 stoploss 设置值。","type":"content","url":"/hyperopt#id-hyperopt-stoploss","position":49},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl5":"默认止损搜索空间","lvl4":"理解 Hyperopt Stoploss 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"type":"lvl5","url":"/hyperopt#id-6","position":50},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl5":"默认止损搜索空间","lvl4":"理解 Hyperopt Stoploss 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"content":"如果您正在优化止损值，Freqtrade 为您创建了 ‘stoploss’ 优化超空间。默认情况下，该超空间中的止损值范围为 -0.35...-0.02，足以满足大多数情况。\n\n如果您有 stoploss_space() 方法，请删除它以利用 Freqtrade 生成的 Stoploss 超参优化空间。\n\n覆盖 stoploss_space() 方法并定义您需要的范围，如果您需要止损值在 hyperoptimization 期间在其他范围内变化。这个方法的示例可以在 \n\noverriding pre-defined spaces section 中找到。\n\nReduced search space\n\n为了进一步限制搜索空间，小数限制为 3 位小数（精度为 0.001）。这通常足够了，每个比这更精确的值通常会导致过拟合结果。但是，您可以 \n\noverriding pre-defined spaces 来根据需要更改此设置。","type":"content","url":"/hyperopt#id-6","position":51},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"理解 Hyperopt Trailing Stop 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-hyperopt-trailing-stop","position":52},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"理解 Hyperopt Trailing Stop 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"content":"如果您正在优化追踪止损值（即如果优化搜索空间包含 ‘all’ 或 ‘trailing’），您的结果将如下所示并包括追踪止损参数：Best result:\n\n    44/100:    135 trades. Avg profit  0.57%. Total profit  0.03871918 BTC (0.7722%). Avg duration 180:34 min. Objective: 1.94367\n\nTrailing stop:\n{\n    'trailing_stop': True,\n    'trailing_stop_positive': 0.0201,\n    'trailing_stop_positive_offset': 0.0547,\n    'trailing_only_offset_is_reached': True\n}\n\n为了在回测和实时交易/干运行中使用这些最佳追踪止损参数，复制并粘贴它们作为自定义策略的相应属性值：    # 追踪止损\n    # 如果配置文件包含相应的值，这些属性将被覆盖。\n    trailing_stop = True\n    trailing_stop_positive = 0.0201\n    trailing_stop_positive_offset = 0.0547\n    trailing_only_offset_is_reached = True\n\n如评论中所述，您也可以将其用作配置文件中的相应设置值。","type":"content","url":"/hyperopt#id-hyperopt-trailing-stop","position":53},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl5":"默认追踪止损搜索空间","lvl4":"理解 Hyperopt Trailing Stop 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"type":"lvl5","url":"/hyperopt#id-7","position":54},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl5":"默认追踪止损搜索空间","lvl4":"理解 Hyperopt Trailing Stop 结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"content":"如果您正在优化追踪止损值，Freqtrade 为您创建了 ‘trailing’ 优化超空间。默认情况下，trailing_stop 参数在该超空间中始终设置为 True，trailing_only_offset_is_reached 值在 True 和 False 之间变化，trailing_stop_positive 和 trailing_stop_positive_offset 参数在 0.02...0.35 和 0.01...0.1 范围内变化，足以满足大多数情况。\n\n覆盖 trailing_space() 方法并定义您需要的范围，如果您需要值在 hyperoptimization 期间在其他范围内变化。这个方法的示例可以在 \n\noverriding pre-defined spaces section 中找到。\n\nReduced search space\n\n为了进一步限制搜索空间，小数限制为 3 位小数（精度为 0.001）。这通常足够了，每个比这更精确的值通常会导致过拟合结果。但是，您可以 \n\noverriding pre-defined spaces 来根据需要更改此设置。","type":"content","url":"/hyperopt#id-7","position":55},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"可重复的结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#reproducible-results","position":56},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"可重复的结果","lvl3":"理解 Hyperopt 结果","lvl2":"Hyperopt"},"content":"最佳参数搜索从参数空间中的几个（目前是 30）随机组合开始，随机 Hyperopt 轮次。这些随机轮次在 Hyperopt 输出中的第一列中用星号字符 (*) 标记。\n\n这些随机值的初始状态（随机状态）由 --random-state 命令行选项的值控制。您可以将其设置为任意值，以获得可重复的结果。\n\n如果您没有在命令行选项中明确设置此值，Hyperopt 会为您提供一些随机值。每个 Hyperopt 运行的随机状态值显示在日志中，因此您可以复制并粘贴它到 --random-state 命令行选项中，以重复使用初始随机轮次集。\n\n如果您没有更改命令行选项、配置、时间范围、策略和 Hyperopt 类、历史数据和损失函数，您应该获得相同的超参优化结果，使用相同的随机状态值。","type":"content","url":"/hyperopt#reproducible-results","position":57},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"输出格式化","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-8","position":58},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"输出格式化","lvl2":"Hyperopt"},"content":"默认情况下，hyperopt 打印彩色结果——利润为正的 epoch 以绿色打印。此高亮帮助您找到可以稍后分析的有趣 epoch。利润为零或利润为负（损失）的 epoch 以正常颜色打印。如果您不需要结果的颜色化（例如，当您将 hyperopt 输出重定向到文件时），您可以通过在命令行中指定 --no-color 选项来切换颜色化。\n\n您可以使用 --print-all 命令行选项，如果您想在 hyperopt 输出中看到所有结果，而不仅仅是最佳结果。当 --print-all 被使用时，当前最佳结果也默认高亮显示——它们以粗体（亮）样式打印。此功能也可以通过 --no-color 命令行选项关闭。\n\nWindows 和颜色输出\n\nWindows 不支持颜色输出，因此默认禁用。要为在 Windows 下运行的 hyperopt 获得颜色输出，请考虑使用 WSL。","type":"content","url":"/hyperopt#id-8","position":59},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"位置堆叠和禁用最大市场位置","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-9","position":60},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"位置堆叠和禁用最大市场位置","lvl2":"Hyperopt"},"content":"在某些情况下，您可能需要运行 Hyperopt（和回测）与 --eps/--enable-position-staking 参数，或者您可能需要将 max_open_trades 设置为非常高的数字以禁用对打开交易的限制。\n\n默认情况下，hyperopt 模仿 Freqtrade Live Run/Dry Run 的行为，其中仅允许每对一个打开交易。所有对的交易总数也受 max_open_trades 设置的限制。在 Hyperopt/Backtesting 期间，这可能导致潜在的交易被已打开的交易隐藏（或屏蔽）。\n\n--eps/--enable-position-stacking 参数允许模拟多次购买同一对。使用 --max-open-trades 与非常高的数字将禁用对打开交易的限制。\n\nNote\n\nDry/live runs 将 NOT 使用位置堆叠——因此也有意义也验证策略而没有它更接近现实。\n\n您还可以在配置文件中通过明确设置 \"position_stacking\"=true 来启用位置堆叠。","type":"content","url":"/hyperopt#id-9","position":61},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"内存错误","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-10","position":62},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"内存错误","lvl2":"Hyperopt"},"content":"由于 hyperopt 消耗大量内存（每次并行回测过程需要一次将完整数据加载到内存中），您可能会遇到 “内存不足” 错误。\n为了应对这些，您有多种选择：\n\n减少对数。\n\n减少使用的时间范围（--timerange <timerange>）。\n\n避免使用 --timeframe-detail（这会加载大量额外数据到内存中）。\n\n减少并行进程的数量（-j <n>）。\n\n增加机器的内存。\n\n如果您使用大量具有 .range 功能的参数，请使用 --analyze-per-epoch。","type":"content","url":"/hyperopt#id-10","position":63},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"目标已经在此点之前评估过","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-11","position":64},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"目标已经在此点之前评估过","lvl2":"Hyperopt"},"content":"如果您看到 The objective has been evaluated at this point before. - 那么这是一个信号，您的空间已经耗尽，或者接近耗尽。\n基本上空间中的所有点都已被击中（或局部最小值已被击中） - 并且 hyperopt 不再在多维空间中尝试尚未尝试的点。\nFreqtrade 尝试通过使用新的、随机化的点来解决 “局部最小值” 问题。\n\n示例：buy_ema_short = IntParameter(5, 20, default=10, space=\"buy\", optimize=True)\n# 这是买入空间中唯一的参数\n\n买入空间有 15 个可能的值（5, 6, ... 19, 20）。如果您现在运行买入空间的超参优化，hyperopt 将只有 15 个值可以尝试，然后运行完选项。\n因此，您的 epoch 应该与可能的值对齐 - 或者您应该准备好中断运行，如果您注意到很多 The objective has been evaluated at this point before. 警告。","type":"content","url":"/hyperopt#id-11","position":65},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"显示 Hyperopt 结果的详细信息","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-hyperopt-6","position":66},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"显示 Hyperopt 结果的详细信息","lvl2":"Hyperopt"},"content":"在您运行 Hyperopt 以获得所需的 epoch 数量后，您可以稍后列出所有结果进行分析，仅选择最佳或盈利一次，并显示以前评估的任何 epoch 的详细信息。这可以通过 hyperopt-list 和 hyperopt-show 子命令完成。这些子命令的使用在 \n\n实用工具子集相关 章节中描述。","type":"content","url":"/hyperopt#id-hyperopt-6","position":67},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"输出来自策略的调试消息","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-12","position":68},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"输出来自策略的调试消息","lvl2":"Hyperopt"},"content":"如果您想输出策略的调试消息，您可以使用 logging 模块。默认情况下，Freqtrade 将输出所有级别为 INFO 或更高的消息。import logging\n\nclass MyAwesomeStrategy(IStrategy):\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # 这将输出到日志文件\n        logging.info(\"计算指标\")\n        # 这将输出到日志文件\n        logging.debug(\"计算指标 - 调试级别\")\n        # 这将输出到日志文件\n        logging.warning(\"计算指标 - 警告级别\")\n        # 这将输出到日志文件\n        logging.error(\"计算指标 - 错误级别\")\n        # 这将输出到日志文件\n        logging.critical(\"计算指标 - 严重级别\")\n        return dataframe\n\nNote\n\n不推荐使用 print() 函数，因为它会干扰 hyperopt 的输出。\n建议使用 logging 模块代替。","type":"content","url":"/hyperopt#id-12","position":69},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"验证回测结果","lvl2":"Hyperopt"},"type":"lvl3","url":"/hyperopt#id-13","position":70},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl3":"验证回测结果","lvl2":"Hyperopt"},"content":"一旦优化策略实现到您的策略中，您应该回测此策略，以确保一切按预期工作。\n\n为了获得与 Hyperopt 期间相同的相同结果（交易次数、持续时间、利润等），请使用与 Hyperopt 相同的配置和参数（时间范围、时间框架、...）进行回测。","type":"content","url":"/hyperopt#id-13","position":71},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"为什么我的回测结果与我的 Hyperopt 结果不匹配？","lvl3":"验证回测结果","lvl2":"Hyperopt"},"type":"lvl4","url":"/hyperopt#id-hyperopt-7","position":72},{"hierarchy":{"lvl1":"Hyperopt 超参数优化指南","lvl4":"为什么我的回测结果与我的 Hyperopt 结果不匹配？","lvl3":"验证回测结果","lvl2":"Hyperopt"},"content":"如果结果不匹配，请检查以下因素：\n\n您可能已在 populate_indicators() 中添加了参数，这些参数仅在 所有 epoch 中计算一次。如果您是，例如，尝试优化多个 SMA 时间周期值，hyperoptable 时间周期参数应放置在 populate_entry_trend() 中，该参数在每个 epoch 中计算。请参阅 \n\nOptimizing an indicator parameter。\n\n如果您已禁用自动将 hyperopt 参数导出到 JSON 参数文件中，请双检查以确保您已将所有 hyperopted 值传输到策略中。\n\n检查日志以验证设置了哪些参数以及使用了哪些值。\n\n特别注意止损、max_open_trades 和追踪止损参数，因为这些参数通常在配置文件中设置，这些参数会覆盖对策略的更改。检查您的回测日志以确保没有参数无意中由配置设置（如 stoploss、max_open_trades 或 trailing_stop）。\n\n验证您是否没有意外的参数 JSON 文件覆盖策略参数或策略中的默认 hyperopt 设置。\n\n验证如果您在回测中启用的任何保护措施在 hyperopting 时也已启用，反之亦然。当使用 --space protection 时，保护措施自动为 hyperopting 启用。","type":"content","url":"/hyperopt#id-hyperopt-7","position":73},{"hierarchy":{"lvl1":"Freqtrade 交易机器人"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Freqtrade 交易机器人"},"content":"","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"简介"},"type":"lvl2","url":"/#id","position":2},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"简介"},"content":"Freqtrade 是一个用 Python 编写的免费开源加密货币交易机器人。\n\n它支持所有主流交易所，并可通过 Telegram 或 WebUI 控制。\n\n它包含回测、绘图和资金管理工具，以及基于机器学习的策略优化功能。\n\n免责声明\n\n本软件仅供教育用途。请勿拿你无法承受损失的资金进行风险投资。使用本软件风险自负。作者及所有相关方对你的交易结果不承担任何责任。\n\n请务必先以 Dry-run（模拟盘）模式运行交易机器人，在完全理解其工作原理及可能的盈亏预期前，不要投入真实资金。\n\n我们强烈建议你具备基本的编程技能和 Python 知识。请不要犹豫，阅读源代码，理解本机器人实现的机制、算法和技术。","type":"content","url":"/#id","position":3},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"功能特性"},"type":"lvl2","url":"/#id-1","position":4},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"功能特性"},"content":"开发你的策略\n\n用 \n\npandas 在 Python 中编写你的交易策略。\n\n可在 \n\n策略仓库 中找到示例策略以供参考。\n\n下载市场数据\n\n下载你可能想交易的交易所和市场的历史数据。\n\n回测\n\n在下载的历史数据上测试你的策略。\n\n优化\n\n通过超参数优化（采用机器学习方法）为你的策略寻找最佳参数。你可以优化买入、卖出、止盈（ROI）、止损和追踪止损等参数。\n\n选择市场\n\n创建你的静态市场列表，或基于交易量和/或价格自动选择（回测时不可用）。你也可以明确黑名单不想交易的市场。\n\n运行\n\n用模拟资金（Dry-Run 模式）测试你的策略，或用真实资金（Live-Trade 模式）部署。\n\n使用 Edge（可选模块）运行\n\n该概念是通过止损变化找到各市场的最佳历史\n\n交易期望值，然后允许/拒绝市场进行交易。交易规模基于你资金的风险百分比。\n\n控制/监控\n\n通过 Telegram 或 WebUI 控制/监控（启动/停止机器人，显示盈亏、每日总结、当前持仓结果等）。\n\n分析\n\n可对回测数据或 Freqtrade 交易历史（SQL 数据库）进行进一步分析，包括自动标准图表，以及将数据加载到\n\n交互式环境的方法。","type":"content","url":"/#id-1","position":5},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"支持的交易所"},"type":"lvl2","url":"/#id-2","position":6},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"支持的交易所"},"content":"请阅读\n\n交易所特别说明，了解每个交易所可能需要的特殊配置。\n\n\n\nBinance\n\n\n\nBingX\n\n\n\nBitmart\n\n\n\nBybit\n\n\n\nGate.io\n\n\n\nHTX\n\n\n\nHyperliquid（去中心化交易所 DEX）\n\n\n\nKraken\n\n\n\nOKX\n\n\n\nMyOKX（OKX EEA）\n\n\n\n还有许多其他,你可以通过 CCXT来参考或启用 (我们无法保证它们都能正常工作)","type":"content","url":"/#id-2","position":7},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"支持的合约交易所（实验性）","lvl2":"支持的交易所"},"type":"lvl3","url":"/#id-3","position":8},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"支持的合约交易所（实验性）","lvl2":"支持的交易所"},"content":"\n\nBinance\n\n\n\nBybit\n\n\n\nGate.io\n\n\n\nHyperliquid（去中心化交易所 DEX）\n\n\n\nOKX\n\n请务必阅读\n\n交易所特别说明以及\n\n杠杆交易文档后再深入使用。","type":"content","url":"/#id-3","position":9},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"社区测试通过","lvl2":"支持的交易所"},"type":"lvl3","url":"/#id-4","position":10},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"社区测试通过","lvl2":"支持的交易所"},"content":"由社区确认可用的交易所：\n\n\n\nBitvavo\n\n\n\nKucoin","type":"content","url":"/#id-4","position":11},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"社区展示"},"type":"lvl2","url":"/#id-5","position":12},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"社区展示"},"content":"本节展示了一些由社区成员开发的项目。这些项目展示了 Freqtrade 的灵活性和可扩展性。\n\n本节将重点介绍社区成员的一些项目。\n\n注意\n\n以下项目大部分不是由 freqtrade 维护的，因此在使用之前请自行谨慎。\n\nfreqtrade 策略示例\n\nFrequentHippo - 模拟运行/实时运行和回测的统计数据（由 hippocritical 提供）。\n\n在线对 (pairlist) 列表生成器（由 Blood4rc 提供）。\n\nFreqtrade 回测项目（由 Blood4rc 提供）。\n\nFreqtrade 分析笔记本（由 Froggleston 提供）。\n\nFreqtrade 的 TUI（由 Froggleston 提供）。\n\nBot Academy（由 stash86 提供）- 关于加密货币机器人项目的博客。","type":"content","url":"/#id-5","position":13},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"系统需求"},"type":"lvl2","url":"/#id-6","position":14},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"系统需求"},"content":"","type":"content","url":"/#id-6","position":15},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"硬件要求","lvl2":"系统需求"},"type":"lvl3","url":"/#id-7","position":16},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"硬件要求","lvl2":"系统需求"},"content":"我们建议你在 Linux 云主机上运行本机器人，最低配置为：\n\n2GB 内存\n\n1GB 磁盘空间\n\n2vCPU","type":"content","url":"/#id-7","position":17},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"软件要求","lvl2":"系统需求"},"type":"lvl3","url":"/#id-8","position":18},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"软件要求","lvl2":"系统需求"},"content":"Docker（推荐）\n\n或可选\n\nPython 3.10+\n\npip（pip3）\n\ngit\n\nTA-Lib\n\nvirtualenv（推荐）","type":"content","url":"/#id-8","position":19},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"支持"},"type":"lvl2","url":"/#id-9","position":20},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"支持"},"content":"","type":"content","url":"/#id-9","position":21},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"帮助 / Discord","lvl2":"支持"},"type":"lvl3","url":"/#id-discord","position":22},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl3":"帮助 / Discord","lvl2":"支持"},"content":"如有文档未涵盖的问题、需要进一步了解机器人，或想与志同道合者交流，欢迎加入 Freqtrade \n\nDiscord 服务器。","type":"content","url":"/#id-discord","position":23},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"准备好开始了吗？"},"type":"lvl2","url":"/#id-10","position":24},{"hierarchy":{"lvl1":"Freqtrade 交易机器人","lvl2":"准备好开始了吗？"},"content":"建议先阅读\n\nDocker 安装指南（推荐）或 \n\n非 Docker 安装指南。","type":"content","url":"/#id-10","position":25},{"hierarchy":{"lvl1":"安装 Freqtrade"},"type":"lvl1","url":"/installation","position":0},{"hierarchy":{"lvl1":"安装 Freqtrade"},"content":"","type":"content","url":"/installation","position":1},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl2":"安装"},"type":"lvl2","url":"/installation#id","position":2},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl2":"安装"},"content":"本页介绍如何为运行机器人准备环境。\n\nfreqtrade 文档描述了多种安装 freqtrade 的方式：\n\nDocker 镜像\n\n脚本安装\n\n手动安装\n\nConda 安装\n\n建议在评估 freqtrade 工作原理时，优先使用预构建的 \n\nDocker 镜像 快速开始。","type":"content","url":"/installation#id","position":3},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"信息","lvl2":"安装"},"type":"lvl3","url":"/installation#id-1","position":4},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"信息","lvl2":"安装"},"content":"Windows 安装请参考 \n\nWindows 安装指南。\n\n最简单的安装和运行 Freqtrade 的方式是克隆 Github 仓库，然后运行适用于你平台的 ./setup.sh 脚本。\n\n版本说明\n\n克隆仓库时，默认分支为 develop。该分支包含所有最新特性（由于自动化测试，可认为相对稳定）。\n\nstable 分支包含最新发布的代码（通常每月发布一次，基于 develop 分支约一周前的快照，以避免打包 bug，因此可能更稳定）。\n\n安装前提\n\n假定已安装 Python3.10 或更高版本及相应的 pip。\n\n如果未满足，安装脚本会警告并停止。还需安装 git 以克隆 Freqtrade 仓库。\n\n此外，必须有 python 头文件（python<yourversion>-dev / python<yourversion>-devel）才能顺利完成安装。\n\n时钟需同步\n\n运行机器人的系统时钟必须准确，并频繁与 NTP 服务器同步，以避免与交易所通信时出现问题。","type":"content","url":"/installation#id-1","position":5},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"依赖要求","lvl2":"安装"},"type":"lvl3","url":"/installation#requirements","position":6},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"依赖要求","lvl2":"安装"},"content":"这些依赖适用于 \n\n脚本安装 和 \n\n手动安装。\n\nARM64 系统\n\n如果你运行在 ARM64 系统（如 MacOS M1 或 Oracle VM），请使用 \n\ndocker 运行 freqtrade。\n\n虽然原生安装也可行，但目前不受支持。","type":"content","url":"/installation#requirements","position":7},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"安装指南","lvl3":"依赖要求","lvl2":"安装"},"type":"lvl4","url":"/installation#id-2","position":8},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"安装指南","lvl3":"依赖要求","lvl2":"安装"},"content":"Python >= 3.10\n\npip\n\ngit\n\nvirtualenv（推荐）","type":"content","url":"/installation#id-2","position":9},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"安装代码","lvl3":"依赖要求","lvl2":"安装"},"type":"lvl4","url":"/installation#id-3","position":10},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"安装代码","lvl3":"依赖要求","lvl2":"安装"},"content":"我们为 Ubuntu、MacOS 和 Windows 收集/整理了安装说明。这些仅供参考，其他发行版可能略有不同。\n\n操作系统相关步骤在前，通用部分适用于所有系统。\n\n务必前提\n\n假定已安装 Python3.10 或更高版本及相应 pip。\n\n","type":"content","url":"/installation#id-3","position":11},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"Linux 安装必要依赖","lvl4":"安装代码","lvl3":"依赖要求","lvl2":"安装"},"type":"lvl5","url":"/installation#linux","position":12},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"Linux 安装必要依赖","lvl4":"安装代码","lvl3":"依赖要求","lvl2":"安装"},"content":"# 更新仓库\nsudo apt-get update\n\n# 安装软件包\nsudo apt install -y python3-pip python3-venv python3-dev python3-pandas git curl\n\n","type":"content","url":"/installation#linux","position":13},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"Mac 安装必要依赖","lvl4":"安装代码","lvl3":"依赖要求","lvl2":"安装"},"type":"lvl5","url":"/installation#mac","position":14},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"Mac 安装必要依赖","lvl4":"安装代码","lvl3":"依赖要求","lvl2":"安装"},"content":"如果尚未安装 \n\nHomebrew，请先安装。# 安装软件包\nbrew install gettext libomp\n\nsetup.sh 脚本会自动为你安装这些依赖（前提是已安装 brew）。\n\n以下假定使用最新的 \n\nRaspbian Buster lite 镜像。\n该镜像自带 python3.11，便于快速部署 freqtrade。\n\n在 Raspberry Pi 3 + Raspbian Buster lite 镜像 + 所有更新下测试通过。sudo apt-get install python3-venv libatlas-base-dev cmake curl libffi-dev\n# 使用 piwheels.org 加速安装\nsudo echo \"[global]\\nextra-index-url=https://www.piwheels.org/simple\" > tee /etc/pip.conf\n\ngit clone https://github.com/freqtrade/freqtrade.git\ncd freqtrade\n\nbash setup.sh -i\n\n安装耗时\n\n取决于网络速度和树莓派型号，安装可能需要数小时。\n\n因此建议树莓派用户使用预构建的 docker 镜像，详见 \n\nDocker 快速入门文档\n\n上述方法未安装 hyperopt 依赖。如需安装，请运行 python3 -m pip install -e .[hyperopt]。\n\n不建议在树莓派上运行 hyperopt，因为该操作非常消耗资源，建议在性能更强的机器上运行。","type":"content","url":"/installation#mac","position":15},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"Freqtrade 仓库","lvl2":"安装"},"type":"lvl3","url":"/installation#freqtrade-repository","position":16},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"Freqtrade 仓库","lvl2":"安装"},"content":"Freqtrade 是一个开源加密货币交易机器人，代码托管在 github.com# 下载 freqtrade 仓库 develop 分支\ngit clone https://github.com/freqtrade/freqtrade.git\n\n# 进入下载目录\ncd freqtrade\n\n# 选项 (1)：新手用户\ngit checkout stable\n\n# 选项 (2)：高级用户\ngit checkout develop\n\n(1) 该命令将仓库切换到 stable 分支。如果你想保持在 (2) develop 分支，则无需切换。\n\n你可以随时用 git checkout stable/git checkout develop 在分支间切换。\n\n从 pypi 安装\n\n另一种安装 Freqtrade 的方式是通过 \n\npypi。但这种方式要求先正确安装 ta-lib，因此目前不推荐。pip install freqtrade","type":"content","url":"/installation#freqtrade-repository","position":17},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"脚本安装","lvl2":"安装"},"type":"lvl3","url":"/installation#script-installation","position":18},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"脚本安装","lvl2":"安装"},"content":"Freqtrade 的一种安装方式是使用提供的 Linux/MacOS ./setup.sh 脚本，该脚本会安装所有依赖并帮助你配置机器人。\n\n请确保已满足\n\n依赖要求并已下载 \n\nFreqtrade 仓库。","type":"content","url":"/installation#script-installation","position":19},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"使用 /setup.sh -install (Linux/MacOS)","lvl3":"脚本安装","lvl2":"安装"},"type":"lvl4","url":"/installation#id-setup-sh-install-linux-macos","position":20},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"使用 /setup.sh -install (Linux/MacOS)","lvl3":"脚本安装","lvl2":"安装"},"content":"在 Debian、Ubuntu 或 MacOS 上，freqtrade 提供了安装脚本。# --install，从零安装 freqtrade\n./setup.sh -i","type":"content","url":"/installation#id-setup-sh-install-linux-macos","position":21},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"激活虚拟环境","lvl3":"脚本安装","lvl2":"安装"},"type":"lvl4","url":"/installation#id-4","position":22},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"激活虚拟环境","lvl3":"脚本安装","lvl2":"安装"},"content":"每次打开新终端，都需运行 source .venv/bin/activate 激活虚拟环境。# 激活虚拟环境\nsource ./.venv/bin/activate\n\n你现在可以运行机器人了。","type":"content","url":"/installation#id-4","position":23},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"/setup.sh 脚本的其他选项","lvl3":"脚本安装","lvl2":"安装"},"type":"lvl4","url":"/installation#id-setup-sh","position":24},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"/setup.sh 脚本的其他选项","lvl3":"脚本安装","lvl2":"安装"},"content":"你还可以用 ./script.sh 更新、配置和重置机器人代码库。# --update，git pull 更新代码\n./setup.sh -u\n# --reset，强制重置 develop/stable 分支\n./setup.sh -r\n\n--install\n\n此选项会安装机器人及大部分依赖：\n\n你需要预先安装 git 和 python3.10+。\n\n必需软件如：ta-lib\n\n在 .venv/ 下设置虚拟环境\n\n此选项结合了安装任务和 --reset\n\n--update\n\n此选项会拉取当前分支最新代码并更新虚拟环境。建议定期用此选项更新机器人。\n\n--reset\n\n此选项会强制重置分支（仅限 stable 或 develop），并重建虚拟环境。","type":"content","url":"/installation#id-setup-sh","position":25},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"手动安装","lvl2":"安装"},"type":"lvl3","url":"/installation#manual-installation","position":26},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"手动安装","lvl2":"安装"},"content":"请确保已满足\n\n依赖要求并已下载 \n\nFreqtrade 仓库。","type":"content","url":"/installation#manual-installation","position":27},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"设置 Python 虚拟环境（virtualenv）","lvl3":"手动安装","lvl2":"安装"},"type":"lvl4","url":"/installation#id-python-virtualenv","position":28},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"设置 Python 虚拟环境（virtualenv）","lvl3":"手动安装","lvl2":"安装"},"content":"你将会在独立的 virtual environment 下运行 freqtrade# 在 /freqtrade/.venv 目录下创建虚拟环境\npython3 -m venv .venv\n\n# 运行虚拟环境\nsource .venv/bin/activate","type":"content","url":"/installation#id-python-virtualenv","position":29},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"安装 python 依赖","lvl3":"手动安装","lvl2":"安装"},"type":"lvl4","url":"/installation#id-python","position":30},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"安装 python 依赖","lvl3":"手动安装","lvl2":"安装"},"content":"python3 -m pip install --upgrade pip\npython3 -m pip install -r requirements.txt\n# 安装 freqtrade\npython3 -m pip install -e .\n\n你现在可以运行机器人了。","type":"content","url":"/installation#id-python","position":31},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"（可选）安装后任务","lvl3":"手动安装","lvl2":"安装"},"type":"lvl4","url":"/installation#id-5","position":32},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"（可选）安装后任务","lvl3":"手动安装","lvl2":"安装"},"content":"保持 Docker 运行\n\n如果你在服务器上运行机器人，建议使用 \n\nDocker 或终端复用器如 screen 或 \n\ntmux，以避免登出后机器人被停止。\n\n在带有 systemd 的 Linux 上，作为可选的安装后任务，你可以将机器人设置为 systemd service，或配置日志输出到 syslog/rsyslog 或 journald。详见 \n\n高级日志。","type":"content","url":"/installation#id-5","position":33},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"Conda 安装","lvl2":"安装"},"type":"lvl3","url":"/installation#installation-with-conda","position":34},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"Conda 安装","lvl2":"安装"},"content":"Freqtrade 也可通过 Miniconda 或 Anaconda 安装。\n\n推荐使用 Miniconda，因为其安装体积更小。Conda 会自动准备和管理 Freqtrade 的大量依赖库。","type":"content","url":"/installation#installation-with-conda","position":35},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"什么是 Conda？","lvl3":"Conda 安装","lvl2":"安装"},"type":"lvl4","url":"/installation#id-conda","position":36},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"什么是 Conda？","lvl3":"Conda 安装","lvl2":"安装"},"content":"Conda 是多语言的软件包、依赖和环境管理器：\n\nconda 文档","type":"content","url":"/installation#id-conda","position":37},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"type":"lvl4","url":"/installation#id-conda-1","position":38},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"content":"","type":"content","url":"/installation#id-conda-1","position":39},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"安装 Conda","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"type":"lvl5","url":"/installation#id-conda-2","position":40},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"安装 Conda","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"content":"Linux 安装方法\n\nWindows 安装方法\n\n全部问题请按提示回答。\n\n安装后，务必关闭并重新打开终端。","type":"content","url":"/installation#id-conda-2","position":41},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"下载 Freqtrade","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"type":"lvl5","url":"/installation#id-freqtrade","position":42},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"下载 Freqtrade","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"content":"下载并安装 freqtrade。# 下载 freqtrade\ngit clone https://github.com/freqtrade/freqtrade.git\n\n# 进入下载目录 'freqtrade'\ncd freqtrade      ","type":"content","url":"/installation#id-freqtrade","position":43},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"Freqtrade 安装：Conda 环境","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"type":"lvl5","url":"/installation#freqtrade-conda","position":44},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"Freqtrade 安装：Conda 环境","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"content":"conda create --name freqtrade python=3.12\n\n创建 Conda 环境\n\nconda 命令 create -n 会自动安装所选库的所有依赖，命令结构如下：# 自定义包\nconda env create -n [环境名] [python 版本] [包]","type":"content","url":"/installation#freqtrade-conda","position":45},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"进入/退出 freqtrade 环境","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"type":"lvl5","url":"/installation#id-freqtrade-1","position":46},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl5":"进入/退出 freqtrade 环境","lvl4":"用 conda 安装","lvl3":"Conda 安装","lvl2":"安装"},"content":"查看可用环境：conda env list\n\n进入已安装环境：# 进入 conda 环境\nconda activate freqtrade\n\n# 退出 conda 环境（此处无需执行）\nconda deactivate\n\n用 pip 安装最后的 python 依赖：python3 -m pip install --upgrade pip\npython3 -m pip install -r requirements.txt\npython3 -m pip install -e .\n\n你现在可以运行机器人了。","type":"content","url":"/installation#id-freqtrade-1","position":47},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"重要快捷命令","lvl3":"Conda 安装","lvl2":"安装"},"type":"lvl4","url":"/installation#id-6","position":48},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"重要快捷命令","lvl3":"Conda 安装","lvl2":"安装"},"content":"# 列出已安装 conda 环境\nconda env list\n\n# 激活 base 环境\nconda activate\n\n# 激活 freqtrade 环境\nconda activate freqtrade\n\n# 退出所有 conda 环境\nconda deactivate                              ","type":"content","url":"/installation#id-6","position":49},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"anaconda 进一步信息","lvl3":"Conda 安装","lvl2":"安装"},"type":"lvl4","url":"/installation#anaconda","position":50},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"anaconda 进一步信息","lvl3":"Conda 安装","lvl2":"安装"},"content":"安装大型 Python 包的小技巧\n\n有时新建 Conda 环境并在创建时指定所需包，比在已建环境中单独安装大型库或应用更快。\n\n在 conda 内使用 pip\n\nconda 官方文档建议不要在 conda 环境内用 pip，因为可能会有内部问题。\n\n不过这种情况很少见。\n\nAnaconda 博客\n\n因此推荐优先使用 conda-forge 源：\n\n可用库更多（更少用到 pip）\n\nconda-forge 与 pip 配合更好\n\n库版本更新更快\n\n祝你交易顺利！","type":"content","url":"/installation#anaconda","position":51},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"你已准备就绪","lvl2":"安装"},"type":"lvl3","url":"/installation#you-are-ready","position":52},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"你已准备就绪","lvl2":"安装"},"content":"你已成功安装 freqtrade。","type":"content","url":"/installation#you-are-ready","position":53},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"初始化配置","lvl3":"你已准备就绪","lvl2":"安装"},"type":"lvl4","url":"/installation#id-7","position":54},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"初始化配置","lvl3":"你已准备就绪","lvl2":"安装"},"content":"# 步骤 1 - 初始化用户文件夹\nfreqtrade create-userdir --userdir user_data\n\n# 步骤 2 - 创建新配置文件\nfreqtrade new-config --config user_data/config.json\n\n你已可以运行机器人，详见 \n\n机器人配置，请务必以 dry_run: True 开始，并确认一切正常。\n\n配置方法详见 \n\n机器人配置 文档。","type":"content","url":"/installation#id-7","position":55},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"启动机器人","lvl3":"你已准备就绪","lvl2":"安装"},"type":"lvl4","url":"/installation#id-8","position":56},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"启动机器人","lvl3":"你已准备就绪","lvl2":"安装"},"content":"freqtrade trade --config user_data/config.json --strategy SampleStrategy\n\n交易前的重要提示\n\n请务必阅读其余文档，回测你要用的策略，并在启用真实交易前用 dry-run 模式测试。","type":"content","url":"/installation#id-8","position":57},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"故障排查","lvl2":"安装"},"type":"lvl3","url":"/installation#id-9","position":58},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl3":"故障排查","lvl2":"安装"},"content":"","type":"content","url":"/installation#id-9","position":59},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"常见问题：“command not found”","lvl3":"故障排查","lvl2":"安装"},"type":"lvl4","url":"/installation#id-command-not-found","position":60},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"常见问题：“command not found”","lvl3":"故障排查","lvl2":"安装"},"content":"如果你用 (1)脚本 或 (2)手动 安装，需在虚拟环境下运行机器人。如果出现如下错误，请确保 venv 已激活。# 如果：\nbash: freqtrade: command not found\n\n# 则激活虚拟环境\nsource ./.venv/bin/activate","type":"content","url":"/installation#id-command-not-found","position":61},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"MacOS 安装错误","lvl3":"故障排查","lvl2":"安装"},"type":"lvl4","url":"/installation#macos","position":62},{"hierarchy":{"lvl1":"安装 Freqtrade","lvl4":"MacOS 安装错误","lvl3":"故障排查","lvl2":"安装"},"content":"新版 MacOS 可能会因 error: command 'g++' failed with exit status 1 安装失败。\n\n这通常需要手动安装 SDK 头文件，MacOS 10.14 可用如下命令：open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg\n\n如果该文件不存在，说明你用的是其他版本的 MacOS，请上网查找具体解决方法。","type":"content","url":"/installation#macos","position":63},{"hierarchy":{"lvl1":"使用杠杆交易"},"type":"lvl1","url":"/leverage","position":0},{"hierarchy":{"lvl1":"使用杠杆交易"},"content":"测试功能\n\n此功能仍处于测试阶段。如果您发现任何问题，请通过 Discord 或 Github Issue 告知我们。\n\n一个账户上的多个机器人\n\n您不能在同一个账户上运行两个使用杠杆的机器人。对于杠杆/保证金交易，freqtrade 假设它是账户的唯一用户，所有清算水平都是基于此假设计算的。\n\n使用杠杆交易非常危险\n\n不要使用杠杆 > 1 的策略进行交易，除非该策略在现货市场上已经显示出积极的结果。检查您的策略的止损。杠杆为 2 时，止损为 0.5（50%）太低，这些交易将在达到止损之前被清算。\n我们不承担因使用此软件或此模式而导致的任何损失的责任。\n\n请仅在您了解 freqtrade（和您的策略）如何工作时使用高级交易模式。\n此外，永远不要冒险超过您能承受的损失。\n\n如果您已经有现有的策略，请阅读 \n\n策略迁移指南 以将您的策略从 freqtrade v2 策略迁移到可以做空和交易期货的版本 3 策略。","type":"content","url":"/leverage","position":1},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"做空"},"type":"lvl2","url":"/leverage#id","position":2},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"做空"},"content":"当 \n\ntrading_mode 设置为 spot 时，无法进行做空交易。要进行做空交易，trading_mode 必须设置为 margin（目前不可用）或 \n\nfutures，并且 \n\nmargin_mode 必须设置为 cross（目前不可用）或 \n\nisolated。\n\n对于做空策略，策略类必须设置类变量 can_short = True。\n\n请阅读 \n\n策略自定义 以获取有关如何设置信号以进入和退出做空交易的说明。","type":"content","url":"/leverage#id","position":3},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"理解 trading_mode"},"type":"lvl2","url":"/leverage#id-trading-mode","position":4},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"理解 trading_mode"},"content":"可能的值是：spot（默认）、margin（目前不可用）或 futures。","type":"content","url":"/leverage#id-trading-mode","position":5},{"hierarchy":{"lvl1":"使用杠杆交易","lvl3":"现货 Spot","lvl2":"理解 trading_mode"},"type":"lvl3","url":"/leverage#id-spot","position":6},{"hierarchy":{"lvl1":"使用杠杆交易","lvl3":"现货 Spot","lvl2":"理解 trading_mode"},"content":"常规交易模式（低风险）\n\n仅做多交易（无做空交易）。\n\n无杠杆。\n\n无清算。\n\n获得的/损失的利润等于资产价值的变化（减去交易费用）。","type":"content","url":"/leverage#id-spot","position":7},{"hierarchy":{"lvl1":"使用杠杆交易","lvl3":"杠杆交易模式 Leverage","lvl2":"理解 trading_mode"},"type":"lvl3","url":"/leverage#id-leverage","position":8},{"hierarchy":{"lvl1":"使用杠杆交易","lvl3":"杠杆交易模式 Leverage","lvl2":"理解 trading_mode"},"content":"使用杠杆时，交易者从交易所借入资金。资金必须全额偿还给交易所（可能带有利息），交易者保留使用借入资金进行的任何交易的利润，或支付任何损失。\n\n由于资金必须始终偿还，交易所将在杠杆账户中资产的总价值下降到某个点（损失的总价值小于交易者在杠杆账户中实际拥有的抵押品价值）时清算（强制出售交易者的资产），以确保交易者有足够的资金将借入的资产偿还给交易所。交易所还将收取清算费用，增加交易者的损失。\n\n因此，如果您不完全了解自己在做什么，请不要使用杠杆交易。杠杆交易风险很高，可能导致您的资产价值迅速降至 0，没有机会再次增值。","type":"content","url":"/leverage#id-leverage","position":9},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"保证金 Margin（目前不可用）","lvl3":"杠杆交易模式 Leverage","lvl2":"理解 trading_mode"},"type":"lvl4","url":"/leverage#id-margin","position":10},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"保证金 Margin（目前不可用）","lvl3":"杠杆交易模式 Leverage","lvl2":"理解 trading_mode"},"content":"交易发生在现货市场，但交易所以等于所选杠杆的金额向您借出货币。您将借给您的金额连同利息偿还给交易所，您的利润/损失乘以指定的杠杆。","type":"content","url":"/leverage#id-margin","position":11},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"期货 Futures","lvl3":"杠杆交易模式 Leverage","lvl2":"理解 trading_mode"},"type":"lvl4","url":"/leverage#id-futures","position":12},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"期货 Futures","lvl3":"杠杆交易模式 Leverage","lvl2":"理解 trading_mode"},"content":"永续合约（也称为永续期货）是以与基础资产紧密相关的价格交易的合约。您不是在交易实际资产，而是在交易衍生合约。永续合约可以无限期持续，与期货或期权合约不同。\n\n除了期货合约价格变化带来的收益/损失外，交易者还交换_资金费用_，这些费用是根据期货合约与基础资产之间的价格差异得出的。期货合约与基础资产之间的价格差异因交易所而异。\n\n要在期货市场上交易，您必须将 trading_mode 设置为\"futures\"。\n您还必须选择\"保证金模式\"（如下所述）- freqtrade 目前仅支持隔离保证金。\"trading_mode\": \"futures\",\n\"margin_mode\": \"isolated\"","type":"content","url":"/leverage#id-futures","position":13},{"hierarchy":{"lvl1":"使用杠杆交易","lvl5":"对命名","lvl4":"期货 Futures","lvl3":"杠杆交易模式 Leverage","lvl2":"理解 trading_mode"},"type":"lvl5","url":"/leverage#id-1","position":14},{"hierarchy":{"lvl1":"使用杠杆交易","lvl5":"对命名","lvl4":"期货 Futures","lvl3":"杠杆交易模式 Leverage","lvl2":"理解 trading_mode"},"content":"Freqtrade 遵循 \n\nccxt 期货命名约定。\n因此，期货对的命名将为 base/quote:settle（例如 ETH/USDT:USDT）。","type":"content","url":"/leverage#id-1","position":15},{"hierarchy":{"lvl1":"使用杠杆交易","lvl3":"保证金模式","lvl2":"理解 trading_mode"},"type":"lvl3","url":"/leverage#id-2","position":16},{"hierarchy":{"lvl1":"使用杠杆交易","lvl3":"保证金模式","lvl2":"理解 trading_mode"},"content":"除了 trading_mode 之外，您还必须配置 margin_mode。\n虽然 freqtrade 目前仅支持一种保证金模式，但这将改变，通过现在配置它，您已为未来的更新做好准备。\n\n可能的值是：isolated 或 cross（目前不可用）。","type":"content","url":"/leverage#id-2","position":17},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"隔离保证金模式","lvl3":"保证金模式","lvl2":"理解 trading_mode"},"type":"lvl4","url":"/leverage#id-3","position":18},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"隔离保证金模式","lvl3":"保证金模式","lvl2":"理解 trading_mode"},"content":"每个市场（交易对）在单独的账户中保留抵押品\"margin_mode\": \"isolated\"","type":"content","url":"/leverage#id-3","position":19},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"交叉保证金模式","lvl3":"保证金模式","lvl2":"理解 trading_mode"},"type":"lvl4","url":"/leverage#id-4","position":20},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"交叉保证金模式","lvl3":"保证金模式","lvl2":"理解 trading_mode"},"content":"一个账户用于在市场（交易对）之间共享抵押品。保证金从总账户余额中提取，以避免在需要时被清算。\"margin_mode\": \"cross\"\n\n请阅读 \n\n交易所特定说明 以了解支持此模式的交易所及其差异。","type":"content","url":"/leverage#id-4","position":21},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"设置使用的杠杆"},"type":"lvl2","url":"/leverage#id-5","position":22},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"设置使用的杠杆"},"content":"不同的策略和风险状况将需要不同水平的杠杆。\n虽然您可以配置一个静态杠杆值，但 freqtrade 提供了通过 \n\n策略杠杆回调 调整此值的灵活性 - 允许您按对使用不同的杠杆，或基于其他因素使您的策略结果受益。\n\n如果未实现，杠杆默认为 1x（无杠杆）。\n\nWarning\n\n更高的杠杆也等于更高的风险 - 请确保您完全理解使用杠杆的影响！","type":"content","url":"/leverage#id-5","position":23},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"理解 liquidation_buffer"},"type":"lvl2","url":"/leverage#id-liquidation-buffer","position":24},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"理解 liquidation_buffer"},"content":"默认为 0.05\n\n一个比率，指定在清算价格和止损之间放置多大的安全网，以防止头寸达到清算价格。\n这个人工清算价格计算为：\n\nfreqtrade_liquidation_price = liquidation_price ± (abs(open_rate - liquidation_price) * liquidation_buffer)\n\n± = + 用于做多交易\n\n± = - 用于做空交易\n\n可能的值是 0.0 到 0.99 之间的任何浮点数\n\n例如： 如果交易以 10 coin/USDT 的价格进入，并且该交易的清算价格为 8 coin/USDT，则 liquidation_buffer 设置为 0.05 时，该交易的最小止损将为 8 + ((10 - 8) * 0.05) = 8 + 0.1 = 8.1\n\nliquidation_buffer 为 0.0 或低 liquidation_buffer 可能导致清算和清算费用\n\n目前 Freqtrade 能够计算清算价格，但不计算清算费用。将 liquidation_buffer 设置为 0.0 或使用低 liquidation_buffer 可能导致您的头寸被清算。Freqtrade 不跟踪清算费用，因此清算将导致您的机器人的利润/损失结果不准确。如果您使用低 liquidation_buffer，建议在您的交易所支持的情况下使用 stoploss_on_exchange。","type":"content","url":"/leverage#id-liquidation-buffer","position":25},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"不可用的资金费率"},"type":"lvl2","url":"/leverage#unavailable-funding-rates","position":26},{"hierarchy":{"lvl1":"使用杠杆交易","lvl2":"不可用的资金费率"},"content":"对于期货数据，交易所通常提供期货蜡烛、标记和资金费率。然而，通常蜡烛和标记可能可用，但资金费率不可用。这可能会影响回测时间范围，即您可能只能测试最近的时间范围，而不能测试较早的时间范围，遇到 No data found. Terminating. 错误。要解决此问题，请添加 \n\n配置 Freqtrade 中列出的 futures_funding_rate 配置选项，建议将其设置为 0，除非您知道特定对、交易所和时间范围的特定资金费率。将其设置为除 0 以外的任何值可能会对策略中的利润计算产生重大影响，例如在 custom_exit、custom_stoploss 等函数中。\n\n这将意味着您的回测不准确。\n\n这不会覆盖交易所提供的资金费率，但请记住，设置错误的资金费率将意味着在资金费率不可用的历史时间范围内，回测结果将不准确。","type":"content","url":"/leverage#unavailable-funding-rates","position":27},{"hierarchy":{"lvl1":"使用杠杆交易","lvl3":"开发者","lvl2":"不可用的资金费率"},"type":"lvl3","url":"/leverage#id-6","position":28},{"hierarchy":{"lvl1":"使用杠杆交易","lvl3":"开发者","lvl2":"不可用的资金费率"},"content":"","type":"content","url":"/leverage#id-6","position":29},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"保证金模式","lvl3":"开发者","lvl2":"不可用的资金费率"},"type":"lvl4","url":"/leverage#id-7","position":30},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"保证金模式","lvl3":"开发者","lvl2":"不可用的资金费率"},"content":"对于做空，支付 borrowed 货币利息的货币在平仓交易的同时购买（这意味着做空平仓交易中购买的金额大于做空开仓交易中出售的金额）。\n\n对于做多，支付 borrowed 利息的货币已经由用户拥有，无需购买。利息从交易的 close_value 中减去。\n\n所有费用都包含在交易期间的 current_profit 计算中。","type":"content","url":"/leverage#id-7","position":31},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"期货模式","lvl3":"开发者","lvl2":"不可用的资金费率"},"type":"lvl4","url":"/leverage#id-8","position":32},{"hierarchy":{"lvl1":"使用杠杆交易","lvl4":"期货模式","lvl3":"开发者","lvl2":"不可用的资金费率"},"content":"资金费用要么添加到交易的总金额中，要么从中减去。","type":"content","url":"/leverage#id-8","position":33},{"hierarchy":{"lvl1":"前瞻性分析指南"},"type":"lvl1","url":"/lookahead-analysis","position":0},{"hierarchy":{"lvl1":"前瞻性分析指南"},"content":"","type":"content","url":"/lookahead-analysis","position":1},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl2":"前瞻性分析"},"type":"lvl2","url":"/lookahead-analysis#id","position":2},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl2":"前瞻性分析"},"content":"本页解释了如何验证你的策略是否存在前瞻性偏差。\n\n前瞻性偏差是任何策略的祸根，因为有时很容易引入这种偏差，但可能很难发现。\n\n回测会初始化所有时间戳（将整个数据框加载到内存中）并一次性计算所有指标。\n这意味着如果你的指标或入场/出场信号查看未来的蜡烛图，这将使你的回测结果失真。\n\nlookahead-analysis 命令需要历史数据可用。\n要了解如何获取你感兴趣的交易对和交易所的数据，\n请查看文档的\n\n数据下载部分。\nlookahead-analysis 也支持 freqai 策略。\n\n该命令在内部链接回测并探测策略以触发前瞻性偏差。\n这是通过不查看策略代码本身，而是通过比较完整回测中改变的指标值和移动的入场/出场点来实现的。\n\nlookahead-analysis 可以使用\n\n回测的典型选项，但强制使用以下选项：\n\n--cache 强制设置为 “none”。\n\n--max-open-trades 强制至少等于交易对数量。\n\n--dry-run-wallet 强制设置为基本无限（10亿）。\n\n--stake-amount 强制设置为静态 10000（1万）。\n\n--enable-protections 强制关闭。\n\n这些设置是为了避免用户意外产生误报。","type":"content","url":"/lookahead-analysis#id","position":3},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"type":"lvl3","url":"/lookahead-analysis#lookahead-analysis","position":4},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"content":"用法: freqtrade lookahead-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-s NAME] [--strategy-path PATH]\n                                    [--recursive-strategy-search]\n                                    [--freqaimodel NAME]\n                                    [--freqaimodel-path PATH] [-i TIMEFRAME]\n                                    [--timerange TIMERANGE]\n                                    [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                    [--max-open-trades INT]\n                                    [--stake-amount STAKE_AMOUNT]\n                                    [--fee FLOAT] [-p PAIRS [PAIRS ...]]\n                                    [--enable-protections]\n                                    [--dry-run-wallet DRY_RUN_WALLET]\n                                    [--timeframe-detail TIMEFRAME_DETAIL]\n                                    [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                                    [--export {none,trades,signals}]\n                                    [--backtest-filename PATH]\n                                    [--backtest-directory PATH]\n                                    [--freqai-backtest-live-models]\n                                    [--minimum-trade-amount INT]\n                                    [--targeted-trade-amount INT]\n                                    [--lookahead-analysis-exportfilename LOOKAHEAD_ANALYSIS_EXPORTFILENAME]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间周期（`1m`, `5m`, `30m`, `1h`, `1d`）。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的蜡烛图（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  --max-open-trades INT\n                        覆盖配置设置中的 `max_open_trades` 值。\n  --stake-amount STAKE_AMOUNT\n                        覆盖配置设置中的 `stake_amount` 值。\n  --fee FLOAT           指定手续费比率。将在交易入场和出场时各应用一次。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅处理这些交易对。交易对以空格分隔。\n  --enable-protections, --enableprotections\n                        为回测启用保护措施。这将显著降低回测速度，但会包含已配置的保护措施。\n  --dry-run-wallet DRY_RUN_WALLET, --starting-balance DRY_RUN_WALLET\n                        起始余额，用于回测/超参数优化和模拟运行。\n  --timeframe-detail TIMEFRAME_DETAIL\n                        指定回测的详细时间周期（`1m`, `5m`, `30m`, `1h`, `1d`）。\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        提供要回测的策略列表，以空格分隔。请注意，时间周期需要在配置中或通过命令行设置。当与 `--export trades` 一起使用时，策略名称会被注入到文件名中（因此 `backtest-data.json` 变为 `backtest-data-SampleStrategy.json`）。\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或 `--export-directory` 作为基础目录。\n  --backtest-directory PATH, --export-directory PATH\n                        用于回测结果的目录。示例：\n                        `--export-directory=user_data/backtest_results/`。\n  --minimum-trade-amount INT\n                        前瞻分析的最小交易金额。\n  --targeted-trade-amount INT\n                        前瞻分析的目标交易金额。\n  --lookahead-analysis-exportfilename LOOKAHEAD_ANALYSIS_EXPORTFILENAME\n                        使用此 CSV 文件名存储前瞻分析结果。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        指定 freqaimodels 的额外查找路径。\n\nNote\n\n上述输出已简化为 lookahead-analysis 在常规回测命令之上添加的选项。","type":"content","url":"/lookahead-analysis#lookahead-analysis","position":5},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"介绍","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"type":"lvl4","url":"/lookahead-analysis#id-1","position":6},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"介绍","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"content":"许多策略在程序员不知情的情况下都陷入了前瞻性偏差的陷阱。\n这通常会使策略回测看起来有利可图，有时甚至达到极端程度，但这并不现实，因为策略通过查看在模拟或实盘模式下无法获得的数据来\"作弊\"。\n\n策略可以\"作弊\"的原因是因为 freqtrade 回测过程在开始时就会填充完整的数据框，包括所有蜡烛图时间戳。\n如果程序员不够谨慎或不了解内部工作原理\n（有时这真的很难发现），那么策略就会看到未来的数据。\n\n这个命令旨在尝试验证上述前瞻性偏差的有效性。","type":"content","url":"/lookahead-analysis#id-1","position":7},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"命令如何工作？","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"type":"lvl4","url":"/lookahead-analysis#id-2","position":8},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"命令如何工作？","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"content":"它首先会对所有交易对进行回测，为指标和入场/出场生成基准。\n在初始回测运行后，它会检查是否满足 minimum-trade-amount，如果不满足则取消该策略的前瞻性分析。\n如果发生这种情况，请使用更宽的时间范围来获取更多交易进行分析，或使用发生更多交易的时间范围。\n\n设置基准后，它将为每个入场和出场分别进行额外的回测运行。\n当这些验证回测完成后，它将比较信号蜡烛图（包括入场和出场）的指标并报告偏差。\n在所有信号都被验证或证伪后，将为用户生成一个结果表。","type":"content","url":"/lookahead-analysis#id-2","position":9},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"如何发现和消除偏差？如何挽救有偏差的策略？","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"type":"lvl4","url":"/lookahead-analysis#id-3","position":10},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"如何发现和消除偏差？如何挽救有偏差的策略？","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"content":"如果你在网上发现了一个有偏差的策略，想要获得相同的结果，只是没有偏差，\n那么在大多数情况下你会失望。\n通常策略中的偏差是\"好得难以置信\"的利润的主要驱动因素。\n移除那些因偏差而推高利润的条件或指标通常会使策略显著变差。\n如果偏差指标或条件不是策略的核心，或者\n有其他不带有偏差的入场和出场信号，你可能能够部分挽救它。","type":"content","url":"/lookahead-analysis#id-3","position":11},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"前瞻性偏差的例子","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"type":"lvl4","url":"/lookahead-analysis#id-4","position":12},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"前瞻性偏差的例子","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"content":"shift(-10) 向前看 10 个蜡烛图。\n\n在 populate_* 函数中使用 iloc[] 访问数据框中的特定行。\n\n如果不严格控制循环的数字，for 循环很容易引入前瞻性偏差。\n\n聚合函数如 .mean()、.min() 和 .max()，如果没有滚动窗口，\n将在整个数据框上计算值，因此信号蜡烛图将\"看到\"包含未来蜡烛图的值。\n一个无偏差的例子是使用 rolling() 向后看蜡烛图：\n例如 dataframe['volume_mean_12'] = dataframe['volume'].rolling(12).mean()\n\nta.MACD(dataframe, 12, 26, 1) 在信号周期为 1 时会引入偏差。","type":"content","url":"/lookahead-analysis#id-4","position":13},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"结果表中的列是什么意思？","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"type":"lvl4","url":"/lookahead-analysis#id-5","position":14},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"结果表中的列是什么意思？","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"content":"filename：检查的策略文件名\n\nstrategy：检查的策略类名\n\nhas_bias：前瞻性分析的结果。No 表示良好，Yes 表示不良。\n\ntotal_signals：检查的信号数量（默认为 20）\n\nbiased_entry_signals：发现的偏差入场信号数量\n\nbiased_exit_signals：发现的偏差出场信号数量\n\nbiased_indicators：显示在 populate_indicators 中定义的指标本身\n\n如果你有与这些出场配对的偏差入场信号，你可能会在 biased_exit_signals 中得到误报。\n然而，偏差入场通常也会导致偏差出场，\n即使出场本身不产生偏差 -\n特别是如果你的入场和出场条件使用相同的偏差指标。\n\n首先解决入场偏差，然后解决出场偏差。","type":"content","url":"/lookahead-analysis#id-5","position":15},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"注意事项","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"type":"lvl4","url":"/lookahead-analysis#id-6","position":16},{"hierarchy":{"lvl1":"前瞻性分析指南","lvl4":"注意事项","lvl3":"lookahead-analysis 命令参考","lvl2":"前瞻性分析"},"content":"lookahead-analysis 只能验证/证伪它计算和验证的交易。\n如果策略有许多不同的信号/信号类型，你需要选择适当的参数以确保所有信号至少触发一次。未触发的信号将不会被验证。\n这将导致假阴性，即策略将被报告为无偏差。\n\nlookahead-analysis 可以访问相同的回测选项，这可能会引入问题。\n请不要使用任何启用仓位堆叠等选项，因为这会扭曲检查的信号数量。\n如果你决定这样做，请确保你永远不会用完 max_open_trades 槽位，\n并且在回测钱包配置中有足够的资金。\n\n在结果表中，biased_indicators 列\n会错误地将 set_freqai_targets() 中定义的 FreqAI 目标指标标记为有偏差。\n这些不是偏差，可以安全地忽略。","type":"content","url":"/lookahead-analysis#id-6","position":17},{"hierarchy":{"lvl1":"绘图"},"type":"lvl1","url":"/plotting","position":0},{"hierarchy":{"lvl1":"绘图"},"content":"本页解释了如何绘制价格、指标和利润。\n\n已弃用\n\n本页中描述的命令（plot-dataframe、plot-profit）应被视为已弃用，并且处于维护模式。\n这主要是由于即使是中等大小的图表也可能导致的性能问题，而且从用户界面的角度来看，\"存储文件并在浏览器中打开\"并不是很直观。\n\n虽然目前没有立即计划移除它们，但它们并未积极维护，如果需要进行重大更改以保持其工作，可能会在短期内被移除。\n\n请使用 \n\nFreqUI 进行绘图需求，它不会遇到相同的性能问题。","type":"content","url":"/plotting","position":1},{"hierarchy":{"lvl1":"绘图","lvl2":"安装 / 设置"},"type":"lvl2","url":"/plotting#id","position":2},{"hierarchy":{"lvl1":"绘图","lvl2":"安装 / 设置"},"content":"绘图模块使用 Plotly 库。您可以通过运行以下命令来安装 / 升级：pip install -U -r requirements-plot.txt","type":"content","url":"/plotting#id","position":3},{"hierarchy":{"lvl1":"绘图","lvl2":"绘制价格和指标"},"type":"lvl2","url":"/plotting#id-1","position":4},{"hierarchy":{"lvl1":"绘图","lvl2":"绘制价格和指标"},"content":"freqtrade plot-dataframe 子命令显示一个交互式图表，包含三个子图：\n\n主图，带有蜡烛图和跟随价格的指标（sma/ema）\n\n成交量柱状图\n\n由 --indicators2 指定的其他指标\n\n可能的参数：\n\nusage: freqtrade plot-dataframe [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                [-c PATH] [-d PATH] [--userdir PATH] [-s NAME]\n                                [--strategy-path PATH]\n                                [--recursive-strategy-search]\n                                [--freqaimodel NAME] [--freqaimodel-path PATH]\n                                [-p PAIRS [PAIRS ...]]\n                                [--indicators1 INDICATORS1 [INDICATORS1 ...]]\n                                [--indicators2 INDICATORS2 [INDICATORS2 ...]]\n                                [--plot-limit INT] [--db-url PATH]\n                                [--trade-source {DB,file}]\n                                [--export {none,trades,signals}]\n                                [--backtest-filename PATH]\n                                [--timerange TIMERANGE] [-i TIMEFRAME]\n                                [--no-trades]\n\n选项:\n  -h, --help            显示此帮助信息并退出\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        将命令限制到这些交易对。交易对以空格分隔。\n  --indicators1 INDICATORS1 [INDICATORS1 ...]\n                        设置您想要在图表第一行显示的策略指标。以空格分隔的列表。示例：\n                        `ema3 ema5`。默认：`['sma', 'ema3', 'ema5']`。\n  --indicators2 INDICATORS2 [INDICATORS2 ...]\n                        设置您想要在图表第三行显示的策略指标。以空格分隔的列表。示例：\n                        `fastd fastk`。默认：`['macd', 'macdsignal']`。\n  --plot-limit INT      指定绘图的刻度限制。注意：值过高会导致文件巨大。默认：750。\n  --db-url PATH         覆盖交易数据库URL，这在自定义部署中很有用（默认：实时运行模式为\n                        `sqlite:///tradesv3.sqlite`，模拟运行为\n                        `sqlite:///tradesv3.dryrun.sqlite`）。\n  --trade-source {DB,file}\n                        指定交易来源（可以是DB或file（回测文件））默认：file\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-\n                        filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或\n                        `--export-directory` 作为基础目录。\n  --timerange TIMERANGE\n                        指定使用的数据时间范围。\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间框架（`1m`、`5m`、`30m`、`1h`、`1d`）。\n  --no-trades           跳过使用回测文件和数据库中的交易。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。如果您将输出重定向到文件，这可能很有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定文件。特殊值有：'syslog'、'journald'。\n                        有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或\n                        `config.json`，以存在的为准）。可以使用多个 --config 选项。\n                        可以设置为 `-` 从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        包含历史回测数据的交易所基础目录路径。要查看期货数据，\n                        请额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人将使用的策略类名称。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义 freqaimodels。\n  --freqaimodel-path PATH\n                        指定 freqaimodels 的额外查找路径。\n\n\n示例：freqtrade plot-dataframe -p BTC/ETH --strategy AwesomeStrategy\n\n-p/--pairs 参数可用于指定您想要绘制的交易对。\n\nCaution\n\nfreqtrade plot-dataframe 子命令为每个交易对生成一个绘图文件。\n\n指定自定义指标。\n\n使用 --indicators1 用于主图，--indicators2 用于下方的子图（如果值在不同于价格的范围）。freqtrade plot-dataframe --strategy AwesomeStrategy -p BTC/ETH --indicators1 sma ema --indicators2 macd","type":"content","url":"/plotting#id-1","position":5},{"hierarchy":{"lvl1":"绘图","lvl3":"进一步的使用示例","lvl2":"绘制价格和指标"},"type":"lvl3","url":"/plotting#id-2","position":6},{"hierarchy":{"lvl1":"绘图","lvl3":"进一步的使用示例","lvl2":"绘制价格和指标"},"content":"要绘制多个交易对，请用空格分隔它们：freqtrade plot-dataframe --strategy AwesomeStrategy -p BTC/ETH XRP/ETH\n\n要绘制时间范围（以放大）freqtrade plot-dataframe --strategy AwesomeStrategy -p BTC/ETH --timerange=20180801-20180805\n\n要绘制存储在数据库中的交易，请使用 --db-url 结合 --trade-source DB：freqtrade plot-dataframe --strategy AwesomeStrategy --db-url sqlite:///tradesv3.dry_run.sqlite -p BTC/ETH --trade-source DB\n\n要绘制回测结果中的交易，请使用 --export-filename <filename>freqtrade plot-dataframe --strategy AwesomeStrategy --export-filename user_data/backtest_results/backtest-result.json -p BTC/ETH","type":"content","url":"/plotting#id-2","position":7},{"hierarchy":{"lvl1":"绘图","lvl3":"绘图数据框基础","lvl2":"绘制价格和指标"},"type":"lvl3","url":"/plotting#id-3","position":8},{"hierarchy":{"lvl1":"绘图","lvl3":"绘图数据框基础","lvl2":"绘制价格和指标"},"content":"\n\nplot-dataframe 子命令需要回测数据、策略和回测结果文件或数据库，其中包含与策略相对应的交易。\n\n生成的图表将包含以下元素：\n\n绿色三角形：来自策略的买入信号。（注意：并非每个买入信号都会生成交易，请与青色圆圈进行比较。）\n\n红色三角形：来自策略的卖出信号。（同样，并非每个卖出信号都会终止交易，请与红色和绿色方块进行比较。）\n\n青色圆圈：交易入场点。\n\n红色方块：亏损或 0% 利润的交易出场点。\n\n绿色方块：盈利交易的出场点。\n\n与蜡烛图比例相对应的指标（例如 SMA/EMA），由 --indicators1 指定。\n\n成交量（主图底部的柱状图）。\n\n不同比例的指标（例如 MACD、RSI）在成交量柱状图下方，由 --indicators2 指定。\n\n布林带\n\n如果存在 bb_lowerband 和 bb_upperband 列，布林带会自动添加到图表中，并绘制为从下带到上带的浅蓝色区域。","type":"content","url":"/plotting#id-3","position":9},{"hierarchy":{"lvl1":"绘图","lvl4":"高级绘图配置","lvl3":"绘图数据框基础","lvl2":"绘制价格和指标"},"type":"lvl4","url":"/plotting#id-4","position":10},{"hierarchy":{"lvl1":"绘图","lvl4":"高级绘图配置","lvl3":"绘图数据框基础","lvl2":"绘制价格和指标"},"content":"可以在策略中的 plot_config 参数中指定高级绘图配置。\n\n使用 plot_config 时的其他功能包括：\n\n为每个指标指定颜色\n\n指定其他子图\n\n指定指标对以填充之间的区域\n\n下面的示例绘图配置为指标指定了固定颜色。否则，连续的图表可能会每次产生不同的颜色方案，使得比较变得困难。\n它还允许多个子图同时显示 MACD 和 RSI。\n\n可以使用 type 键配置绘图类型。可能的类型有：\n\nscatter 对应于 plotly.graph_objects.Scatter 类（默认）。\n\nbar 对应于 plotly.graph_objects.Bar 类。\n\n可以在 plotly 字典中指定 plotly.graph_objects.* 构造函数的额外参数。\n\n带有内联注释的示例配置，解释过程：@property\ndef plot_config(self):\n    \"\"\"\n        构建返回字典的方法有很多。\n        唯一重要的是返回值。\n        示例：\n            plot_config = {'main_plot': {}, 'subplots': {}}\n\n    \"\"\"\n    plot_config = {}\n    plot_config['main_plot'] = {\n        # 主图指标的配置。\n        # 假设指定了 2 个参数，emashort 和 emalong。\n        f'ema_{self.emashort.value}': {'color': 'red'},\n        f'ema_{self.emalong.value}': {'color': '#CCCCCC'},\n        # 省略颜色时，将随机选择颜色。\n        'sar': {},\n        # 填充 senkou_a 和 senkou_b 之间的区域\n        'senkou_a': {\n            'color': 'green', #可选\n            'fill_to': 'senkou_b',\n            'fill_label': 'Ichimoku Cloud', #可选\n            'fill_color': 'rgba(255,76,46,0.2)', #可选\n        },\n        # 也绘制 senkou_b，而不仅仅是到它的区域。\n        'senkou_b': {}\n    }\n    plot_config['subplots'] = {\n         # 创建 MACD 子图\n        \"MACD\": {\n            'macd': {'color': 'blue', 'fill_to': 'macdhist'},\n            'macdsignal': {'color': 'orange'},\n            'macdhist': {'type': 'bar', 'plotly': {'opacity': 0.9}}\n        },\n        # 额外的 RSI 子图\n        \"RSI\": {\n            'rsi': {'color': 'red'}\n        }\n    }\n\n    return plot_config\n\n作为属性（以前的方法）\n\n也可以将 plot_config 作为属性分配（这曾经是默认方式）。\n这有一个缺点，即策略参数不可用，导致某些配置无法工作。    plot_config = {\n        'main_plot': {\n            # 主图指标的配置。\n            # 指定 `ema10` 为红色，`ema50` 为灰色。\n            'ema10': {'color': 'red'},\n            'ema50': {'color': '#CCCCCC'},\n            # 省略颜色时，将随机选择颜色。\n            'sar': {},\n        # 填充 senkou_a 和 senkou_b 之间的区域\n        'senkou_a': {\n            'color': 'green', #可选\n            'fill_to': 'senkou_b',\n            'fill_label': 'Ichimoku Cloud', #可选\n            'fill_color': 'rgba(255,76,46,0.2)', #可选\n        },\n        # 也绘制 senkou_b，而不仅仅是到它的区域。\n        'senkou_b': {}\n        },\n        'subplots': {\n            # 创建 MACD 子图\n            \"MACD\": {\n                'macd': {'color': 'blue', 'fill_to': 'macdhist'},\n                'macdsignal': {'color': 'orange'},\n                'macdhist': {'type': 'bar', 'plotly': {'opacity': 0.9}}\n            },\n            # 额外的 RSI 子图\n            \"RSI\": {\n                'rsi': {'color': 'red'}\n            }\n        }\n    }\n\n\nCaution\n\n上述配置假设 ema10、ema50、senkou_a、senkou_b、macd、macdsignal、macdhist 和 rsi 是策略创建的 DataFrame 中的列。\n\nWarning\n\nplotly 参数仅在使用 plotly 库时支持，并且不会与 freq-ui 一起工作。\n\n交易位置调整\n\n如果使用 position_adjustment_enable / adjust_trade_position()，交易初始买入价格将在多个订单上平均，交易开始价格很可能会出现在蜡烛范围之外。","type":"content","url":"/plotting#id-4","position":11},{"hierarchy":{"lvl1":"绘图","lvl2":"绘制利润"},"type":"lvl2","url":"/plotting#id-5","position":12},{"hierarchy":{"lvl1":"绘图","lvl2":"绘制利润"},"content":"\n\nplot-profit 子命令显示一个交互式图表，包含三个图表：\n\n所有交易对的平均收盘价。\n\n回测产生的总利润。\n请注意，这不是实际利润，而是一个估计。\n\n每个交易对的利润。\n\n交易的并行性。\n\n水下（回撤期间）。\n\n第一个图表有助于了解整体市场的进展。\n\n第二个图表将显示您的算法是否有效。\n\n也许您希望一个算法能够稳定地产生小额利润，或者一个算法行动较少，但会产生大的波动。\n此图表还将突出显示最大回撤期间的开始（和结束）。\n\n第三个图表可以帮助发现异常值，导致利润峰值的事件。\n\n第四个图表可以帮助您分析交易并行性，显示 max_open_trades 被最大化的频率。\n\nfreqtrade plot-profit 子命令的可能选项：\n\n用法: freqtrade plot-profit [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH]\n                             [-s NAME] [--strategy-path PATH]\n                             [--recursive-strategy-search]\n                             [--freqaimodel NAME] [--freqaimodel-path PATH]\n                             [-p PAIRS [PAIRS ...]] [--timerange TIMERANGE]\n                             [--export {none,trades,signals}]\n                             [--backtest-filename PATH] [--db-url PATH]\n                             [--trade-source {DB,file}] [-i TIMEFRAME]\n                             [--auto-open]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅处理这些交易对。交易对以空格分隔。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --export {none,trades,signals}\n                        导出回测结果（默认：trades）。\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或 `--export-directory` 作为基础目录。\n  --db-url PATH         覆盖交易数据库 URL，这在自定义部署中很有用（默认：`sqlite:///tradesv3.sqlite` 用于实时运行模式，`sqlite:///tradesv3.dryrun.sqlite` 用于模拟运行）。\n  --trade-source {DB,file}\n                        指定交易的来源（可以是 DB 或文件（回测文件））。默认：file。\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间周期（`1m`, `5m`, `30m`, `1h`, `1d`）。\n  --auto-open           自动打开生成的图表。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        指定 freqaimodels 的额外查找路径。\n\n-p/--pairs 参数可用于限制此计算中考虑的交易对。\n\n示例：\n\n使用自定义回测导出文件freqtrade plot-profit  -p LTC/BTC --export-filename user_data/backtest_results/backtest-result.json\n\n使用自定义数据库freqtrade plot-profit  -p LTC/BTC --db-url sqlite:///tradesv3.sqlite --trade-source DBfreqtrade --datadir user_data/data/binance_save/ plot-profit -p LTC/BTC","type":"content","url":"/plotting#id-5","position":13},{"hierarchy":{"lvl1":"插件体系"},"type":"lvl1","url":"/plugins","position":0},{"hierarchy":{"lvl1":"插件体系"},"content":"","type":"content","url":"/plugins","position":1},{"hierarchy":{"lvl1":"插件体系","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl2","url":"/plugins#pairlists-and-pairlist-handlers","position":2},{"hierarchy":{"lvl1":"插件体系","lvl2":"交易对列表和交易对列表处理器"},"content":"交易对列表处理器定义了机器人应该交易的交易对列表。它们在配置设置的 pairlists 部分进行配置。\n\n在你的配置中，你可以使用静态交易对列表（由 \n\nStaticPairList 交易对列表处理器定义）和动态交易对列表（由 \n\nVolumePairList 和 \n\nPercentChangePairList 交易对列表处理器定义）。\n\n此外，\n\nAgeFilter、\n\nPrecisionFilter、\n\nPriceFilter、\n\nShuffleFilter、\n\nSpreadFilter 和 \n\nVolatilityFilter 作为交易对列表过滤器，用于移除某些交易对和/或调整它们在交易对列表中的位置。\n\n如果使用多个交易对列表处理器，它们会被链接起来，所有交易对列表处理器的组合形成机器人用于交易和回测的最终交易对列表。交易对列表处理器按照配置的顺序执行。你可以将 StaticPairList、VolumePairList、ProducerPairList、RemotePairList、MarketCapPairList 或 PercentChangePairList 定义为起始交易对列表处理器。\n\n非活跃市场总是会从最终交易对列表中移除。明确列入黑名单的交易对（在 pair_blacklist 配置设置中的那些）也会从最终交易对列表中移除。","type":"content","url":"/plugins#pairlists-and-pairlist-handlers","position":3},{"hierarchy":{"lvl1":"插件体系","lvl3":"交易对黑名单","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl3","url":"/plugins#id","position":4},{"hierarchy":{"lvl1":"插件体系","lvl3":"交易对黑名单","lvl2":"交易对列表和交易对列表处理器"},"content":"交易对黑名单（通过配置中的 exchange.pair_blacklist 配置）禁止交易某些交易对。\n这可以简单到排除 DOGE/BTC - 这将移除这个特定的交易对。\n\n交易对黑名单也支持通配符（以正则表达式风格）- 所以 BNB/.* 将排除所有以 BNB 开头的交易对。\n你也可以使用类似 .*DOWN/BTC 或 .*UP/BTC 来排除杠杆代币（请检查你的交易所的交易对命名约定！）","type":"content","url":"/plugins#id","position":5},{"hierarchy":{"lvl1":"插件体系","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl3","url":"/plugins#id-1","position":6},{"hierarchy":{"lvl1":"插件体系","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"StaticPairList（默认，如果未配置其他）\n\nVolumePairList\n\nPercentChangePairList\n\nProducerPairList\n\nRemotePairList\n\nMarketCapPairList\n\nAgeFilter\n\nFullTradesFilter\n\nOffsetFilter\n\nPerformanceFilter\n\nPrecisionFilter\n\nPriceFilter\n\nShuffleFilter\n\nSpreadFilter\n\nRangeStabilityFilter\n\nVolatilityFilter\n\n测试交易对列表\n\n交易对列表配置可能相当复杂。最好使用 \n\ntest-pairlist 工具子命令来快速测试你的配置。","type":"content","url":"/plugins#id-1","position":7},{"hierarchy":{"lvl1":"插件体系","lvl4":"静态交易对列表","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#id-2","position":8},{"hierarchy":{"lvl1":"插件体系","lvl4":"静态交易对列表","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"默认情况下，使用 StaticPairList 方法，它使用配置中静态定义的交易对白名单。交易对列表也支持通配符（以正则表达式风格）- 所以 .*/BTC 将包含所有以 BTC 作为计价货币的交易对。\n\n它使用 exchange.pair_whitelist 和 exchange.pair_blacklist 的配置，在下面的示例中，将交易 BTC/USDT 和 ETH/USDT - 并阻止 BNB/USDT 交易。\n\n两个 pair_*list 参数都支持正则表达式 - 所以像 .*/USDT 这样的值将启用所有不在黑名单中的交易对。\"exchange\": {\n    \"name\": \"...\",\n    // ... \n    \"pair_whitelist\": [\n        \"BTC/USDT\",\n        \"ETH/USDT\",\n        // ...\n    ],\n    \"pair_blacklist\": [\n        \"BNB/USDT\",\n        // ...\n    ]\n},\n\"pairlists\": [\n    {\"method\": \"StaticPairList\"}\n],\n\n默认情况下，只允许当前启用的交易对。要跳过对活跃市场的交易对验证，在 StaticPairList 配置中设置 \"allow_inactive\": true。这对于回测过期的交易对（如季度现货市场）很有用。\n\n当在\"后续\"位置使用时（例如在 VolumePairlist 之后），'pair_whitelist' 中的所有交易对将被添加到交易对列表的末尾。","type":"content","url":"/plugins#id-2","position":9},{"hierarchy":{"lvl1":"插件体系","lvl4":"交易量交易对列表","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#id-3","position":10},{"hierarchy":{"lvl1":"插件体系","lvl4":"交易量交易对列表","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"VolumePairList 通过交易量对交易对进行排序/过滤。它根据 sort_key（只能是 quoteVolume）选择 number_assets 个顶级交易对。\n\n当在交易对列表处理器链中的非主导位置使用时（在 StaticPairList 和其他交易对过滤器之后），VolumePairList 会考虑之前交易对列表处理器的输出，通过交易量添加其排序/选择的交易对。\n\n当在交易对列表处理器链的主导位置使用时，pair_whitelist 配置设置将被忽略。相反，VolumePairList 将从交易所上所有具有匹配计价货币的可用市场中选择顶级资产。\n\nrefresh_period 设置允许定义交易对列表刷新的周期（以秒为单位）。默认为 1800 秒（30 分钟）。\nVolumePairList 上的交易对列表缓存（refresh_period）仅适用于生成交易对列表。\n过滤实例（不在列表中的第一个位置）不会应用任何缓存（除了在高级模式下缓存蜡烛图数据），并将始终使用最新数据。\n\nVolumePairList 默认基于交易所的 ticker 数据，由 ccxt 库报告：\n\nquoteVolume 是过去 24 小时内交易的计价（质押）货币数量（买入或卖出）。\"pairlists\": [\n    {\n        \"method\": \"VolumePairList\",\n        \"number_assets\": 20,\n        \"sort_key\": \"quoteVolume\",\n        \"min_value\": 0,\n        \"max_value\": 8000000,\n        \"refresh_period\": 1800\n    }\n],\n\n你可以用 min_value 定义最小交易量 - 这将过滤掉在指定时间范围内交易量低于指定值的交易对。\n此外，你还可以用 max_value 定义最大交易量 - 这将过滤掉在指定时间范围内交易量高于指定值的交易对。","type":"content","url":"/plugins#id-3","position":11},{"hierarchy":{"lvl1":"插件体系","lvl5":"VolumePairList 高级模式","lvl4":"交易量交易对列表","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl5","url":"/plugins#volumepairlist","position":12},{"hierarchy":{"lvl1":"插件体系","lvl5":"VolumePairList 高级模式","lvl4":"交易量交易对列表","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"VolumePairList 也可以在高级模式下运行，以在指定的蜡烛图大小的时间范围内构建交易量。它利用交易所历史蜡烛图数据，构建典型价格（通过 (open+high+low)/3 计算）并将典型价格与每个蜡烛图的交易量相乘。总和就是给定范围内的 quoteVolume。这允许不同的场景，当使用较长范围和较大蜡烛图大小时可以获得更平滑的交易量，或者在使用短范围和小时蜡烛图时获得相反的效果。\n\n为了方便起见，可以指定 lookback_days，这将意味着将使用 1d 蜡烛图进行回溯。在下面的示例中，交易对列表将基于过去 7 天创建：\"pairlists\": [\n    {\n        \"method\": \"VolumePairList\",\n        \"number_assets\": 20,\n        \"sort_key\": \"quoteVolume\",\n        \"min_value\": 0,\n        \"refresh_period\": 86400,\n        \"lookback_days\": 7\n    }\n],\n\n范围回溯和刷新周期\n\n当与 lookback_days 和 lookback_timeframe 一起使用时，refresh_period 不能小于蜡烛图大小的秒数。因为这会导致对交易所 API 的不必要请求。\n\n使用回溯范围时的性能影响\n\n如果在第一个位置结合回溯使用，基于范围的交易量计算可能会消耗时间和资源，因为它会下载所有可交易对的蜡烛图数据。因此，强烈建议使用标准方法，先用 VolumeFilter 缩小交易对列表，然后再进行范围交易量计算。\n\n不支持的交易所\n\n在某些交易所（如 Gemini）上，常规的 VolumePairList 不起作用，因为 API 不原生提供 24 小时交易量。这可以通过使用蜡烛图数据来构建交易量来解决。\n要粗略模拟 24 小时交易量，你可以使用以下配置。请注意，这些交易对列表每天只会刷新一次。\"pairlists\": [\n    {\n        \"method\": \"VolumePairList\",\n        \"number_assets\": 20,\n        \"sort_key\": \"quoteVolume\",\n        \"min_value\": 0,\n        \"refresh_period\": 86400,\n        \"lookback_days\": 1\n    }\n],\n\n可以使用更复杂的方法，通过使用 lookback_timeframe 指定蜡烛图大小和 lookback_period 指定蜡烛图数量。这个示例将基于 3 天的 1 小时蜡烛图的滚动周期构建交易量交易对：\"pairlists\": [\n    {\n        \"method\": \"VolumePairList\",\n        \"number_assets\": 20,\n        \"sort_key\": \"quoteVolume\",\n        \"min_value\": 0,\n        \"refresh_period\": 3600,\n        \"lookback_timeframe\": \"1h\",\n        \"lookback_period\": 72\n    }\n],\n\nNote\n\nVolumePairList 不支持回测模式。","type":"content","url":"/plugins#volumepairlist","position":13},{"hierarchy":{"lvl1":"插件体系","lvl4":"百分比变化交易对列表","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#id-4","position":14},{"hierarchy":{"lvl1":"插件体系","lvl4":"百分比变化交易对列表","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"PercentChangePairList 根据过去 24 小时或作为高级选项一部分的任何定义时间范围内的价格百分比变化来过滤和排序交易对。这允许交易者关注那些经历了显著价格变动的资产，无论是正向还是负向。\n\n配置选项\n\nnumber_assets：指定基于 24 小时百分比变化选择的前几个交易对数量。\n\nmin_value：设置最小百分比变化阈值。百分比变化低于此值的交易对将被过滤掉。\n\nmax_value：设置最大百分比变化阈值。百分比变化高于此值的交易对将被过滤掉。\n\nsort_direction：指定基于百分比变化排序交易对的方式。接受两个值：asc 表示升序，desc 表示降序。\n\nrefresh_period：定义交易对列表刷新的间隔（以秒为单位）。默认为 1800 秒（30 分钟）。\n\nlookback_days：回溯的天数。当选择 lookback_days 时，lookback_timeframe 默认为 1 天。\n\nlookback_timeframe：用于回溯周期的时间框架。\n\nlookback_period：回溯的周期数量。\n\n当 PercentChangePairList 在其他交易对列表处理器之后使用时，它将对这些处理器的输出进行操作。如果它是主导交易对列表处理器，它将从所有具有指定计价货币的可用市场中选择交易对。\n\nPercentChangePairList 使用交易所的 ticker 数据，通过 ccxt 库提供：百分比变化计算为过去 24 小时内价格的变化。\n\n不支持的交易所\n\n在某些交易所（如 HTX）上，常规的 PercentChangePairList 不起作用，因为 API 不原生提供 24 小时价格百分比变化。这可以通过使用蜡烛图数据来计算百分比变化来解决。要粗略模拟 24 小时百分比变化，你可以使用以下配置。请注意，这些交易对列表每天只会刷新一次。\"pairlists\": [\n    {\n        \"method\": \"PercentChangePairList\",\n        \"number_assets\": 20,\n        \"min_value\": 0,\n        \"refresh_period\": 86400,\n        \"lookback_days\": 1\n    }\n],\n\n从 Ticker 读取的示例配置\"pairlists\": [\n    {\n        \"method\": \"PercentChangePairList\",\n        \"number_assets\": 15,\n        \"min_value\": -10,\n        \"max_value\": 50\n    }\n],\n\n在这个配置中：\n\n根据过去 24 小时内最高价格百分比变化选择前 15 个交易对。\n\n只考虑百分比变化在 -10% 到 50% 之间的交易对。\n\n从蜡烛图读取的示例配置\"pairlists\": [\n    {\n        \"method\": \"PercentChangePairList\",\n        \"number_assets\": 15,\n        \"sort_key\": \"percentage\",\n        \"min_value\": 0,\n        \"refresh_period\": 3600,\n        \"lookback_timeframe\": \"1h\",\n        \"lookback_period\": 72\n    }\n],\n\n这个示例通过使用 lookback_timeframe 指定蜡烛图大小和 lookback_period 指定蜡烛图数量，基于 3 天的 1 小时蜡烛图的滚动周期构建百分比变化交易对。\n\n价格百分比变化使用以下公式计算，该公式表示当前蜡烛图收盘价与前一蜡烛图收盘价之间的百分比差异，由指定的时间框架和回溯周期定义：百分比变化 = (\\frac{当前收盘价 - 前一收盘价}{前一收盘价}) * 100\n\n范围回溯和刷新周期\n\n当与 lookback_days 和 lookback_timeframe 一起使用时，refresh_period 不能小于蜡烛图大小的秒数。因为这会导致对交易所 API 的不必要请求。\n\n使用回溯范围时的性能影响\n\n如果在第一个位置结合回溯使用，基于范围的百分比变化计算可能会消耗时间和资源，因为它会下载所有可交易对的蜡烛图数据。因此，强烈建议使用标准方法，先用 PercentChangePairList 缩小交易对列表，然后再进行百分比变化计算。\n\n回测\n\nPercentChangePairList 不支持回测模式。","type":"content","url":"/plugins#id-4","position":15},{"hierarchy":{"lvl1":"插件体系","lvl4":"ProducerPairList","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#producerpairlist","position":16},{"hierarchy":{"lvl1":"插件体系","lvl4":"ProducerPairList","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"使用 ProducerPairList，你可以重用来自 \n\nProducer 的交易对列表，而无需在每个消费者上明确定义交易对列表。\n\n需要 \n\nConsumer 模式 才能使这个交易对列表工作。\n\n交易对列表将对活跃交易对进行针对当前交易所配置的检查，以避免尝试在无效市场上交易。\n\n你可以使用可选参数 number_assets 限制交易对列表的长度。使用 \"number_assets\"=0 或省略此键将导致重用所有对当前设置有效的生产者交易对。\"pairlists\": [\n    {\n        \"method\": \"ProducerPairList\",\n        \"number_assets\": 5,\n        \"producer_name\": \"default\",\n    }\n],\n\n组合交易对列表\n\n这个交易对列表可以与所有其他交易对列表和过滤器组合，以进一步减少交易对列表，也可以作为\"附加\"交易对列表，在已定义的交易对之上。\n\nProducerPairList 也可以在序列中多次使用，组合来自多个生产者的交易对。\n\n显然，在如此复杂的配置中，生产者可能不会为所有交易对提供数据，因此策略必须适合这种情况。","type":"content","url":"/plugins#producerpairlist","position":17},{"hierarchy":{"lvl1":"插件体系","lvl4":"RemotePairList","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#remotepairlist","position":18},{"hierarchy":{"lvl1":"插件体系","lvl4":"RemotePairList","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"它允许用户从远程服务器或 freqtrade 目录中本地存储的 json 文件获取交易对列表，实现交易对列表的动态更新和自定义。\n\nRemotePairList 在配置设置的 pairlists 部分中定义。它使用以下配置选项：\"pairlists\": [\n    {\n        \"method\": \"RemotePairList\",\n        \"mode\": \"whitelist\",\n        \"processing_mode\": \"filter\",\n        \"pairlist_url\": \"https://example.com/pairlist\",\n        \"number_assets\": 10,\n        \"refresh_period\": 1800,\n        \"keep_pairlist_on_failure\": true,\n        \"read_timeout\": 60,\n        \"bearer_token\": \"my-bearer-token\",\n        \"save_to_file\": \"user_data/filename.json\" \n    }\n]\n\n可选的 mode 选项指定交易对列表是否应该用作 blacklist 或 whitelist。默认值为 “whitelist”。\n\nRemotePairList 配置中的可选 processing_mode 选项决定如何处理检索到的交易对列表。它可以有两个值：“filter” 或 “append”。默认值为 “filter”。\n\n在 “filter” 模式下，检索到的交易对列表用作过滤器。只有同时存在于原始交易对列表和检索到的交易对列表中的交易对才会包含在最终交易对列表中。其他交易对被过滤掉。\n\n在 “append” 模式下，检索到的交易对列表被添加到原始交易对列表中。两个列表中的所有交易对都包含在最终交易对列表中，无需任何过滤。\n\npairlist_url 选项指定远程服务器的 URL，交易对列表位于该服务器上，或本地文件的路径（如果前面加上 file:///）。这允许用户使用远程服务器或本地文件作为交易对列表的来源。\n\n当提供有效的文件名时，save_to_file 选项将处理后的交易对列表以 JSON 格式保存到该文件中。此选项是可选的，默认情况下，交易对列表不会保存到文件中。\n\n多机器人共享交易对列表示例\n\nsave_to_file 可用于将交易对列表保存到 Bot1 的文件中：\"pairlists\": [\n    {\n        \"method\": \"RemotePairList\",\n        \"mode\": \"whitelist\",\n        \"pairlist_url\": \"https://example.com/pairlist\",\n        \"number_assets\": 10,\n        \"refresh_period\": 1800,\n        \"keep_pairlist_on_failure\": true,\n        \"read_timeout\": 60,\n        \"save_to_file\": \"user_data/filename.json\" \n    }\n]\n\n这个保存的交易对列表文件可以被 Bot2 或任何具有此配置的额外机器人加载：\"pairlists\": [\n    {\n        \"method\": \"RemotePairList\",\n        \"mode\": \"whitelist\",\n        \"pairlist_url\": \"file:///user_data/filename.json\",\n        \"number_assets\": 10,\n        \"refresh_period\": 10,\n        \"keep_pairlist_on_failure\": true,\n    }\n]\n\n用户负责提供一个服务器或本地文件，该文件返回具有以下结构的 JSON 对象：{\n    \"pairs\": [\"XRP/USDT\", \"ETH/USDT\", \"LTC/USDT\"],\n    \"refresh_period\": 1800\n}\n\npairs 属性应包含机器人要使用的交易对字符串列表。refresh_period 属性是可选的，指定交易对列表在被刷新之前应该缓存的秒数。\n\n可选的 keep_pairlist_on_failure 指定如果远程服务器无法访问或返回错误，是否应该使用之前接收到的交易对列表。默认值为 true。\n\n可选的 read_timeout 指定等待远程源响应的最长时间（以秒为单位），默认值为 60。\n\n可选的 bearer_token 将包含在请求的 Authorization Header 中。\n\nNote\n\n在服务器错误的情况下，如果 keep_pairlist_on_failure 设置为 true，将保留最后接收到的交易对列表，如果设置为 false，则返回空交易对列表。","type":"content","url":"/plugins#remotepairlist","position":19},{"hierarchy":{"lvl1":"插件体系","lvl4":"MarketCapPairList","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#marketcappairlist","position":20},{"hierarchy":{"lvl1":"插件体系","lvl4":"MarketCapPairList","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"MarketCapPairList 通过 CoinGecko 的市值排名对交易对进行排序/过滤。返回的交易对列表将根据其市值排名进行排序。\"pairlists\": [\n    {\n        \"method\": \"MarketCapPairList\",\n        \"number_assets\": 20,\n        \"max_rank\": 50,\n        \"refresh_period\": 86400,\n        \"categories\": [\"layer-1\"]\n    }\n]\n\nnumber_assets 定义交易对列表返回的最大交易对数量。max_rank 将确定用于创建/过滤交易对列表的最大排名。预计在顶级 max_rank 市值中的一些代币不会包含在最终交易对列表中，因为并非所有交易对都会在你偏好的市场/质押/交易所组合中有活跃的交易对。\n虽然支持使用大于 250 的 max_rank，但不建议这样做，因为它会导致对 CoinGecko 的多次 API 调用，这可能导致速率限制问题。\n\nrefresh_period 设置定义市值排名数据刷新的间隔（以秒为单位）。默认为 86,400 秒（1 天）。交易对列表缓存（refresh_period）适用于生成交易对列表（当在列表中的第一个位置时）和过滤实例（当不在列表中的第一个位置时）。\n\ncategories 设置指定要从哪些 \n\ncoingecko 类别 中选择代币。默认为空列表 []，表示不应用类别过滤。\n如果选择了错误的类别字符串，插件将打印 CoinGecko 的可用类别并失败。类别应该是类别的 ID，例如，对于 https://www.coingecko.com/en/categories/layer-1，类别 ID 将是 layer-1。你可以传递多个类别，如 [\"layer-1\", \"meme-token\"] 来从多个类别中选择。\n\n像 1000PEPE/USDT 或 KPEPE/USDT:USDT 这样的币种是在尽力而为的基础上检测的，使用前缀 1000 和 K 来识别它们。\n\n多个类别\n\n每个添加的类别都对应一次对 CoinGecko 的 API 调用。你添加的类别越多，交易对列表生成所需的时间就越长，可能导致速率限制问题。\n\ncoingecko 中的重复符号\n\nCoingecko 经常有重复的符号，其中相同的符号用于不同的代币。Freqtrade 将按原样使用符号并尝试在交易所上搜索它。如果符号存在 - 它将被使用。然而，Freqtrade 不会检查 预期 的符号是否是 coingecko 所指的那个。这有时会导致意外结果，特别是在低交易量代币或 meme 代币类别中。","type":"content","url":"/plugins#marketcappairlist","position":21},{"hierarchy":{"lvl1":"插件体系","lvl4":"AgeFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#agefilter","position":22},{"hierarchy":{"lvl1":"插件体系","lvl4":"AgeFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"移除在交易所上市时间少于 min_days_listed 天（默认为 10）或超过 max_days_listed 天（默认为 None 表示无限）的交易对。\n\n当交易对首次在交易所上市时，它们可能会在最初几天经历巨大的价格下跌和波动，因为交易对正在经历其价格发现期。机器人经常会在交易对完成价格下跌之前就被抓住买入。\n\n此过滤器允许 freqtrade 忽略交易对，直到它们已经上市至少 min_days_listed 天并且在 max_days_listed 之前上市。","type":"content","url":"/plugins#agefilter","position":23},{"hierarchy":{"lvl1":"插件体系","lvl4":"FullTradesFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#fulltradesfilter","position":24},{"hierarchy":{"lvl1":"插件体系","lvl4":"FullTradesFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"当交易槽位已满时（当配置中的 max_open_trades 未设置为 -1 时），将白名单缩小为仅包含交易中的交易对。\n\n当交易槽位已满时，无需计算其余交易对的指标（除了信息性交易对），因为无法开立新交易。通过将白名单缩小为仅包含交易中的交易对，你可以提高计算速度并减少 CPU 使用率。当交易槽位空闲时（要么是交易关闭，要么是配置中的 max_open_trades 值增加），白名单将恢复正常状态。\n\n当使用多个交易对列表过滤器时，建议将此过滤器放在主要交易对列表之后的第二个位置，这样当交易槽位已满时，机器人就不必为其余过滤器下载数据。\n\n回测\n\nFullTradesFilter 不支持回测模式。","type":"content","url":"/plugins#fulltradesfilter","position":25},{"hierarchy":{"lvl1":"插件体系","lvl4":"OffsetFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#offsetfilter","position":26},{"hierarchy":{"lvl1":"插件体系","lvl4":"OffsetFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"通过给定的 offset 值偏移传入的交易对列表。\n\n例如，它可以与 VolumeFilter 结合使用，以移除前 X 个交易量交易对。或者将较大的交易对列表分成两个机器人实例。\n\n示例，从交易对列表中移除前 10 个交易对，并获取接下来的 20 个（获取初始列表的第 10-30 项）：\"pairlists\": [\n    // ...\n    {\n        \"method\": \"OffsetFilter\",\n        \"offset\": 10,\n        \"number_assets\": 20\n    }\n],\n\nWarning\n\n当 OffsetFilter 用于在多个机器人之间分割较大的交易对列表，并结合 VolumeFilter 使用时，\n\n由于 VolumeFilter 的刷新间隔略有不同，不能保证交易对不会重叠。\n\nNote\n\n偏移量大于传入交易对列表总长度将导致空交易对列表。","type":"content","url":"/plugins#offsetfilter","position":27},{"hierarchy":{"lvl1":"插件体系","lvl4":"PerformanceFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#performancefilter","position":28},{"hierarchy":{"lvl1":"插件体系","lvl4":"PerformanceFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"根据过去的交易表现对交易对进行排序，如下：\n\n正向表现。\n\n尚未有已关闭的交易。\n\n负向表现。\n\n交易数量用作平局决胜。\n\n你可以使用 minutes 参数只考虑过去 X 分钟的表现（滚动窗口）。不定义此参数（或将其设置为 0）将使用所有时间表现。\n\n可选的 min_profit（作为比率 -> 设置为 0.01 对应 1%）参数定义交易对必须具有的最小利润才能被考虑。低于此水平的交易对将被过滤掉。强烈建议不要在没有 minutes 的情况下使用此参数，因为它可能导致交易对列表为空且无法恢复。\"pairlists\": [\n    // ...\n    {\n        \"method\": \"PerformanceFilter\",\n        \"minutes\": 1440,  // 滚动 24h\n        \"min_profit\": 0.01  // 最小利润 1%\n    }\n],\n\n由于此过滤器使用机器人的过去表现，它将有一个启动期 - 应该只在机器人在数据库中有几百笔交易后使用。\n\n回测\n\nPerformanceFilter 不支持回测模式。","type":"content","url":"/plugins#performancefilter","position":29},{"hierarchy":{"lvl1":"插件体系","lvl4":"PrecisionFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#precisionfilter","position":30},{"hierarchy":{"lvl1":"插件体系","lvl4":"PrecisionFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"过滤低价值代币，这些代币不允许设置止损。\n\n具体来说，如果由于交易所的精度舍入导致止损价格变化 1% 或更多，即 rounded(stop_price) <= rounded(stop_price * 0.99)，交易对将被列入黑名单。这个想法是避免价值非常接近其较低交易边界的代币，不允许设置适当的止损。\n\nPrecisionFilter 对期货交易没有意义\n\n上述内容不适用于做空。对于做多，理论上交易会先被清算。\n\n回测\n\nPrecisionFilter 不支持使用多个策略的回测模式。","type":"content","url":"/plugins#precisionfilter","position":31},{"hierarchy":{"lvl1":"插件体系","lvl4":"PriceFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#pricefilter","position":32},{"hierarchy":{"lvl1":"插件体系","lvl4":"PriceFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"PriceFilter 允许按价格过滤交易对。目前支持以下价格过滤器：\n\nmin_price\n\nmax_price\n\nmax_value\n\nlow_price_ratio\n\nmin_price 设置移除价格低于指定价格的交易对。如果你想避免交易非常低价的交易对，这很有用。此选项默认禁用，只有在设置为 > 0 时才会应用。\n\nmax_price 设置移除价格高于指定价格的交易对。如果你只想交易低价交易对，这很有用。此选项默认禁用，只有在设置为 > 0 时才会应用。\n\nmax_value 设置移除最小价值变化高于指定值的交易对。这在交易所有限制不平衡时很有用。例如，如果 step-size = 1（所以你只能买入 1、2 或 3，但不能买入 1.1 个代币）- 而价格相当高（如 20$），因为代币自上次限制调整以来急剧上涨。\n\n由于上述原因，你只能买入 20$ 或 40$ - 但不能买入 25$。在从接收货币中扣除费用的交易所（如 binance）上 - 这可能导致高价值代币/金额无法出售，因为金额略低于限制。\n\nlow_price_ratio 设置移除价格上涨 1 个价格单位（点）高于 low_price_ratio 比率的交易对。\n此选项默认禁用，只有在设置为 > 0 时才会应用。\n\n对于 PriceFilter，必须应用其 min_price、max_price 或 low_price_ratio 设置中的至少一个。\n\n计算示例：\n\nSHITCOIN/BTC 的最小价格精度为 8 位小数。如果其价格为 0.00000011 - 一个价格单位以上将是 0.00000012，这比前一个价格值高约 9%。你可以通过使用 low_price_ratio 设置为 0.09（9%）或 min_price 设置为 0.00000011 的 PriceFilter 来过滤掉这个交易对。\n\n低价交易对\n\n具有高\"1 点移动\"的低价交易对很危险，因为它们通常缺乏流动性，也可能无法放置所需的止损，这通常会导致高损失，因为价格需要四舍五入到下一个可交易价格 - 所以不是有 -5% 的止损，你可能最终有 -9% 的止损，仅仅是因为价格四舍五入。","type":"content","url":"/plugins#pricefilter","position":33},{"hierarchy":{"lvl1":"插件体系","lvl4":"ShuffleFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#shufflefilter","position":34},{"hierarchy":{"lvl1":"插件体系","lvl4":"ShuffleFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"随机化交易对列表中的交易对。当你希望所有交易对具有相同的优先级时，它可以用于防止机器人更频繁地交易某些交易对。\n\n默认情况下，ShuffleFilter 将每个蜡烛图随机化一次交易对。要在每次迭代时随机化，将 \"shuffle_frequency\" 设置为 \"iteration\" 而不是默认的 \"candle\"。    {\n        \"method\": \"ShuffleFilter\", \n        \"shuffle_frequency\": \"candle\",\n        \"seed\": 42\n    }\n\n\n获得可重现的结果\n\n你可以为此交易对列表设置 seed 值以获得可重现的结果，这对于重复的回测会话很有用。如果未设置 seed，交易对将以不可重复的随机顺序随机化。ShuffleFilter 将自动检测运行模式，并仅在回测模式下应用 seed - 如果设置了 seed 值。","type":"content","url":"/plugins#shufflefilter","position":35},{"hierarchy":{"lvl1":"插件体系","lvl4":"SpreadFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#spreadfilter","position":36},{"hierarchy":{"lvl1":"插件体系","lvl4":"SpreadFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"移除买卖价差高于指定比率 max_spread_ratio（默认为 0.005）的交易对。\n\n示例：\n\n如果 DOGE/BTC 最高买价为 0.00000026，最低卖价为 0.00000027，比率计算为：1 - bid/ask ~= 0.037，这 > 0.005，因此这个交易对将被过滤掉。","type":"content","url":"/plugins#spreadfilter","position":37},{"hierarchy":{"lvl1":"插件体系","lvl4":"RangeStabilityFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#rangestabilityfilter","position":38},{"hierarchy":{"lvl1":"插件体系","lvl4":"RangeStabilityFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"移除在 lookback_days 天内最低低点和最高高点之间的差异低于 min_rate_of_change 或高于 max_rate_of_change 的交易对。由于这是一个需要额外数据的过滤器，结果会被缓存 refresh_period 时间。\n\n在下面的示例中：\n\n如果过去 10 天的交易范围 <1% 或 >99%，从白名单中移除该交易对。\"pairlists\": [\n    {\n        \"method\": \"RangeStabilityFilter\",\n        \"lookback_days\": 10,\n        \"min_rate_of_change\": 0.01,\n        \"max_rate_of_change\": 0.99,\n        \"refresh_period\": 86400\n    }\n]\n\n添加 \"sort_direction\": \"asc\" 或 \"sort_direction\": \"desc\" 为此交易对列表启用排序。\n\n移除稳定币交易对\n\n此过滤器可用于自动移除稳定币交易对，它们具有非常低的交易范围，因此极难通过交易获利。\n\n此外，它还可以用于自动移除在给定时间内具有极高/低方差的交易对。","type":"content","url":"/plugins#rangestabilityfilter","position":39},{"hierarchy":{"lvl1":"插件体系","lvl4":"VolatilityFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl4","url":"/plugins#volatilityfilter","position":40},{"hierarchy":{"lvl1":"插件体系","lvl4":"VolatilityFilter","lvl3":"可用的交易对列表处理器","lvl2":"交易对列表和交易对列表处理器"},"content":"波动率是交易对随时间的历史变化程度，通过对数日收益的标准差来衡量。\n\n假设收益呈正态分布，尽管实际分布可能不同。在正态分布中，68% 的观察值落在一个标准差内，95% 的观察值落在两个标准差内。假设波动率为 0.05 意味着在 30 天中的 20 天，预期收益预计小于 5%（一个标准差）。\n\n波动率是预期收益偏差的正比率，可以大于 1.00。请参考维基百科对 \n\nvolatility 的定义。\n\n此过滤器移除在 lookback_days 天内平均波动率低于 min_volatility 或高于 max_volatility 的交易对。由于这是一个需要额外数据的过滤器，结果会被缓存 refresh_period 时间。\n\n此过滤器可用于将你的交易对缩小到特定波动率或避免非常波动的交易对。\n\n在下面的示例中：\n\n如果过去 10 天的波动率不在 0.05-0.50 范围内，从白名单中移除该交易对。过滤器每 24 小时应用一次。\"pairlists\": [\n    {\n        \"method\": \"VolatilityFilter\",\n        \"lookback_days\": 10,\n        \"min_volatility\": 0.05,\n        \"max_volatility\": 0.50,\n        \"refresh_period\": 86400\n    }\n]\n\n添加 \"sort_direction\": \"asc\" 或 \"sort_direction\": \"desc\" 为此交易对列表启用排序模式。","type":"content","url":"/plugins#volatilityfilter","position":41},{"hierarchy":{"lvl1":"插件体系","lvl3":"交易对列表处理器的完整示例","lvl2":"交易对列表和交易对列表处理器"},"type":"lvl3","url":"/plugins#id-5","position":42},{"hierarchy":{"lvl1":"插件体系","lvl3":"交易对列表处理器的完整示例","lvl2":"交易对列表和交易对列表处理器"},"content":"下面的示例将 BNB/BTC 列入黑名单，使用 VolumePairList 选择 20 个资产，按 quoteVolume 排序交易对，并应用 \n\nPrecisionFilter 和 \n\nPriceFilter，过滤掉所有 1 个价格单位 > 1% 的资产。然后应用 \n\nSpreadFilter 和 \n\nVolatilityFilter，最后使用随机种子设置为某个预定义值来随机化交易对。\"exchange\": {\n    \"pair_whitelist\": [],\n    \"pair_blacklist\": [\"BNB/BTC\"]\n},\n\"pairlists\": [\n    {\n        \"method\": \"VolumePairList\",\n        \"number_assets\": 20,\n        \"sort_key\": \"quoteVolume\"\n    },\n    {\"method\": \"AgeFilter\", \"min_days_listed\": 10},\n    {\"method\": \"PrecisionFilter\"},\n    {\"method\": \"PriceFilter\", \"low_price_ratio\": 0.01},\n    {\"method\": \"SpreadFilter\", \"max_spread_ratio\": 0.005},\n    {\n        \"method\": \"RangeStabilityFilter\",\n        \"lookback_days\": 10,\n        \"min_rate_of_change\": 0.01,\n        \"refresh_period\": 86400\n    },\n    {\n        \"method\": \"VolatilityFilter\",\n        \"lookback_days\": 10,\n        \"min_volatility\": 0.05,\n        \"max_volatility\": 0.50,\n        \"refresh_period\": 86400\n    },\n    {\"method\": \"ShuffleFilter\", \"seed\": 42}\n],\n\n","type":"content","url":"/plugins#id-5","position":43},{"hierarchy":{"lvl1":"插件体系","lvl2":"保护机制"},"type":"lvl2","url":"/plugins#id-6","position":44},{"hierarchy":{"lvl1":"插件体系","lvl2":"保护机制"},"content":"保护机制通过暂时停止对某个交易对或所有交易对的交易，来保护你的策略免受意外事件和市场条件的影响。\n所有保护结束时间都会向上取整到下一个蜡烛图，以避免在蜡烛图内突然、意外的买入。\n\n使用提示\n\n并非所有保护机制都适用于所有策略，需要根据你的策略调整参数以提高性能。\n\n每个保护机制都可以使用不同的参数配置多次，以允许不同级别的保护（短期/长期）。\n\n回测\n\n保护机制在回测和超参数优化中受支持，但必须通过使用 --enable-protections 标志显式启用。","type":"content","url":"/plugins#id-6","position":45},{"hierarchy":{"lvl1":"插件体系","lvl3":"可用的保护机制","lvl2":"保护机制"},"type":"lvl3","url":"/plugins#id-7","position":46},{"hierarchy":{"lvl1":"插件体系","lvl3":"可用的保护机制","lvl2":"保护机制"},"content":"StoplossGuard 如果在特定时间窗口内发生一定数量的止损，则停止交易。\n\nMaxDrawdown 如果达到最大回撤，则停止交易。\n\nLowProfitPairs 锁定低利润的交易对\n\nCooldownPeriod 在卖出交易后不要立即进入新交易。","type":"content","url":"/plugins#id-7","position":47},{"hierarchy":{"lvl1":"插件体系","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"type":"lvl3","url":"/plugins#id-8","position":48},{"hierarchy":{"lvl1":"插件体系","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"content":"参数\n\n描述\n\nmethod\n\n要使用的保护机制名称。 数据类型： 字符串，从\n\n可用保护机制中选择\n\nstop_duration_candles\n\n锁定应该持续多少个蜡烛图？ 数据类型： 正整数（以蜡烛图为单位）\n\nstop_duration\n\n保护机制应该锁定多少分钟。不能与 stop_duration_candles 一起使用。 数据类型： 浮点数（以分钟为单位）\n\nlookback_period_candles\n\n只考虑在最近 lookback_period_candles 个蜡烛图内完成的交易。某些保护机制可能会忽略此设置。 数据类型： 正整数（以蜡烛图为单位）。\n\nlookback_period\n\n只考虑在 当前时间 - lookback_period 之后完成的交易。不能与 lookback_period_candles 一起使用。某些保护机制可能会忽略此设置。 数据类型： 浮点数（以分钟为单位）\n\ntrade_limit\n\n所需的最小交易数量（并非所有保护机制都使用）。 数据类型： 正整数\n\nunlock_at\n\n定期解锁交易的时间（并非所有保护机制都使用）。 数据类型： 字符串 输入格式： “HH:MM”（24小时制）\n\n持续时间\n\n持续时间（stop_duration* 和 lookback_period*）可以用分钟或蜡烛图来定义。\n为了在测试不同时间框架时更灵活，以下所有示例都将使用\"蜡烛图\"定义。","type":"content","url":"/plugins#id-8","position":49},{"hierarchy":{"lvl1":"插件体系","lvl4":"Stoploss Guard","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"type":"lvl4","url":"/plugins#stoploss-guard","position":50},{"hierarchy":{"lvl1":"插件体系","lvl4":"Stoploss Guard","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"content":"StoplossGuard 选择在 lookback_period 分钟内（或使用 lookback_period_candles 时以蜡烛图为单位）的所有交易。\n如果有 trade_limit 或更多交易导致止损，交易将停止 stop_duration 分钟（或使用 stop_duration_candles 时以蜡烛图为单位，或使用 unlock_at 时直到设定时间）。\n\n这适用于所有交易对，除非 only_per_pair 设置为 true，这种情况下将一次只查看一个交易对。\n\n同样，此保护机制默认会查看所有交易（做多和做空）。对于期货机器人，设置 only_per_side 将使机器人只考虑一个方向，然后只锁定这个方向，例如在连续做多止损后允许继续做空。\n\nrequired_profit 将确定止损所需的相对利润（或亏损）。通常不应设置此值，默认为 0.0 - 这意味着所有亏损的止损都会触发锁定。\n\n下面的示例在最近 24 个蜡烛图内如果机器人触发 4 次止损，则在最后一次交易后停止所有交易对的交易 4 个蜡烛图。@property\ndef protections(self):\n    return [\n        {\n            \"method\": \"StoplossGuard\",\n            \"lookback_period_candles\": 24,\n            \"trade_limit\": 4,\n            \"stop_duration_candles\": 4,\n            \"required_profit\": 0.0,\n            \"only_per_pair\": False,\n            \"only_per_side\": False\n        }\n    ]\n\nNote\n\nStoplossGuard 考虑所有结果为 \"stop_loss\"、\"stoploss_on_exchange\" 和 \"trailing_stop_loss\" 且最终利润为负的交易。\n需要根据你的策略调整 trade_limit 和 lookback_period。","type":"content","url":"/plugins#stoploss-guard","position":51},{"hierarchy":{"lvl1":"插件体系","lvl4":"MaxDrawdown","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"type":"lvl4","url":"/plugins#maxdrawdown","position":52},{"hierarchy":{"lvl1":"插件体系","lvl4":"MaxDrawdown","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"content":"MaxDrawdown 使用 lookback_period 分钟内（或使用 lookback_period_candles 时以蜡烛图为单位）的所有交易来确定最大回撤。如果回撤低于 max_allowed_drawdown，交易将在最后一次交易后停止 stop_duration 分钟（或使用 stop_duration_candles 时以蜡烛图为单位）- 假设机器人需要一些时间让市场恢复。\n\n下面的示例在考虑所有交易对的情况下，如果在最近 48 个蜡烛图内至少有 trade_limit 笔交易导致最大回撤 > 20%，则停止交易 12 个蜡烛图。如果需要，可以使用 lookback_period 和/或 stop_duration。@property\ndef protections(self):\n    return  [\n        {\n            \"method\": \"MaxDrawdown\",\n            \"lookback_period_candles\": 48,\n            \"trade_limit\": 20,\n            \"stop_duration_candles\": 12,\n            \"max_allowed_drawdown\": 0.2\n        },\n    ]","type":"content","url":"/plugins#maxdrawdown","position":53},{"hierarchy":{"lvl1":"插件体系","lvl4":"Low Profit Pairs","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"type":"lvl4","url":"/plugins#low-profit-pairs","position":54},{"hierarchy":{"lvl1":"插件体系","lvl4":"Low Profit Pairs","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"content":"LowProfitPairs 使用交易对在 lookback_period 分钟内（或使用 lookback_period_candles 时以蜡烛图为单位）的所有交易来确定总体利润率。\n如果该比率低于 required_profit，该交易对将被锁定 stop_duration 分钟（或使用 stop_duration_candles 时以蜡烛图为单位，或使用 unlock_at 时直到设定时间）。\n\n对于期货机器人，设置 only_per_side 将使机器人只考虑一个方向，然后只锁定这个方向，例如在连续做多亏损后允许继续做空。\n\n下面的示例将在最近 6 个蜡烛图内如果交易对没有达到 2% 的所需利润（且至少有 2 笔交易），则停止交易该交易对 60 分钟。@property\ndef protections(self):\n    return [\n        {\n            \"method\": \"LowProfitPairs\",\n            \"lookback_period_candles\": 6,\n            \"trade_limit\": 2,\n            \"stop_duration\": 60,\n            \"required_profit\": 0.02,\n            \"only_per_pair\": False,\n        }\n    ]","type":"content","url":"/plugins#low-profit-pairs","position":55},{"hierarchy":{"lvl1":"插件体系","lvl4":"Cooldown Period","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"type":"lvl4","url":"/plugins#cooldown-period","position":56},{"hierarchy":{"lvl1":"插件体系","lvl4":"Cooldown Period","lvl3":"所有保护机制的通用设置","lvl2":"保护机制"},"content":"CooldownPeriod 在退出后锁定交易对 stop_duration 分钟（或使用 stop_duration_candles 时以蜡烛图为单位，或使用 unlock_at 时直到设定时间），避免在 stop_duration 分钟内重新进入该交易对。\n\n下面的示例将在关闭交易后停止交易该交易对 2 个蜡烛图，让该交易对\"冷却\"。@property\ndef protections(self):\n    return  [\n        {\n            \"method\": \"CooldownPeriod\",\n            \"stop_duration_candles\": 2\n        }\n    ]\n\nNote\n\n此保护机制仅适用于交易对级别，永远不会全局锁定所有交易对。\n此保护机制不考虑 lookback_period，因为它只查看最新交易。","type":"content","url":"/plugins#cooldown-period","position":57},{"hierarchy":{"lvl1":"插件体系","lvl3":"保护机制的完整示例","lvl2":"保护机制"},"type":"lvl3","url":"/plugins#id-9","position":58},{"hierarchy":{"lvl1":"插件体系","lvl3":"保护机制的完整示例","lvl2":"保护机制"},"content":"所有保护机制都可以随意组合，也可以使用不同的参数，为表现不佳的交易对创建一个递增的防护墙。\n所有保护机制都按照定义的顺序进行评估。\n\n下面的示例假设时间框架为 1 小时：\n\n在卖出后锁定每个交易对额外 5 个蜡烛图（CooldownPeriod），给其他交易对一个被成交的机会。\n\n如果在最近 2 天（48 * 1h 蜡烛图）内有 20 笔交易导致最大回撤超过 20%，则停止交易 4 小时（4 * 1h 蜡烛图）。（MaxDrawdown）。\n\n如果在 1 天（24 * 1h 蜡烛图）限制内所有交易对发生超过 4 次止损，则停止交易（StoplossGuard）。\n\n锁定在最近 6 小时（6 * 1h 蜡烛图）内有 2 笔交易且总利润率低于 0.02（<2%）的所有交易对（LowProfitPairs）。\n\n锁定在最近 24 小时（24 * 1h 蜡烛图）内利润低于 0.01（<1%）且至少有 4 笔交易的所有交易对 2 个蜡烛图。from freqtrade.strategy import IStrategy\n\nclass AwesomeStrategy(IStrategy)\n    timeframe = '1h'\n    \n    @property\n    def protections(self):\n        return [\n            {\n                \"method\": \"CooldownPeriod\",\n                \"stop_duration_candles\": 5\n            },\n            {\n                \"method\": \"MaxDrawdown\",\n                \"lookback_period_candles\": 48,\n                \"trade_limit\": 20,\n                \"stop_duration_candles\": 4,\n                \"max_allowed_drawdown\": 0.2\n            },\n            {\n                \"method\": \"StoplossGuard\",\n                \"lookback_period_candles\": 24,\n                \"trade_limit\": 4,\n                \"stop_duration_candles\": 2,\n                \"only_per_pair\": False\n            },\n            {\n                \"method\": \"LowProfitPairs\",\n                \"lookback_period_candles\": 6,\n                \"trade_limit\": 2,\n                \"stop_duration_candles\": 60,\n                \"required_profit\": 0.02\n            },\n            {\n                \"method\": \"LowProfitPairs\",\n                \"lookback_period_candles\": 24,\n                \"trade_limit\": 4,\n                \"stop_duration_candles\": 2,\n                \"required_profit\": 0.01\n            }\n        ]\n    # ...","type":"content","url":"/plugins#id-9","position":59},{"hierarchy":{"lvl1":"生产者/消费者模式"},"type":"lvl1","url":"/producer-consumer","position":0},{"hierarchy":{"lvl1":"生产者/消费者模式"},"content":"freqtrade 提供了一种机制，使一个实例（也称为 consumer）可以通过消息 websocket 监听上游 freqtrade 实例（也称为 producer）的消息。主要是 analyzed_df 和 whitelist 消息。这允许在多个机器人中重用计算出的指标（和信号），而无需多次计算它们。\n\n有关设置消息 websocket 的 api_server 配置（这将是你的生产者），请参阅 Rest API 文档中的\n\n消息 Websocket。\n\nNote\n\n我们强烈建议将 ws_token 设置为只有你自己知道的随机值，以避免未经授权访问你的机器人。","type":"content","url":"/producer-consumer","position":1},{"hierarchy":{"lvl1":"生产者/消费者模式","lvl2":"配置"},"type":"lvl2","url":"/producer-consumer#id","position":2},{"hierarchy":{"lvl1":"生产者/消费者模式","lvl2":"配置"},"content":"通过在消费者的配置文件中添加 external_message_consumer 部分来启用订阅实例。{\n    //...\n   \"external_message_consumer\": {\n        \"enabled\": true,\n        \"producers\": [\n            {\n                \"name\": \"default\", // 这可以是任何你喜欢的名称，默认为 \"default\"\n                \"host\": \"127.0.0.1\", // 来自你的生产者 api_server 配置的主机\n                \"port\": 8080, // 来自你的生产者 api_server 配置的端口\n                \"secure\": false, // 使用安全 websockets 连接，默认为 false\n                \"ws_token\": \"sercet_Ws_t0ken\" // 来自你的生产者 api_server 配置的 ws_token\n            }\n        ],\n        // 以下配置是可选的，通常不需要\n        // \"wait_timeout\": 300,\n        // \"ping_timeout\": 10,\n        // \"sleep_time\": 10,\n        // \"remove_entry_exit_signals\": false,\n        // \"message_size_limit\": 8\n    }\n    //...\n}\n\n参数\n\n描述\n\nenabled\n\n必需。 启用消费者模式。如果设置为 false，则忽略此部分中的所有其他设置。默认为 false。 数据类型： 布尔值。\n\nproducers\n\n必需。 生产者列表  数据类型： 数组。\n\nproducers.name\n\n必需。 此生产者的名称。如果使用多个生产者，此名称必须用于调用 get_producer_pairs() 和 get_producer_df()。 数据类型： 字符串\n\nproducers.host\n\n必需。 来自你的生产者的主机名或 IP 地址。 数据类型： 字符串\n\nproducers.port\n\n必需。 与上述主机匹配的端口。默认为 8080。 数据类型： 整数\n\nproducers.secure\n\n可选。 在 websockets 连接中使用 ssl。默认为 False。 数据类型： 字符串\n\nproducers.ws_token\n\n必需。 在生产者上配置的 ws_token。 数据类型： 字符串\n\n\n\n可选设置\n\nwait_timeout\n\n如果未收到消息，直到我们再次 ping 的超时时间。默认为 300。 数据类型： 整数 - 以秒为单位。\n\nping_timeout\n\nPing 超时 默认为 10。 数据类型： 整数 - 以秒为单位。\n\nsleep_time\n\n重试连接前的睡眠时间。默认为 10。 数据类型： 整数 - 以秒为单位。\n\nremove_entry_exit_signals\n\n在接收数据框时从数据框中删除信号列（将它们设置为 0）。默认为 false。 数据类型： 布尔值。\n\ninitial_candle_limit\n\n从生产者预期的初始蜡烛图数量。默认为 1500。 数据类型： 整数 - 蜡烛图数量。\n\nmessage_size_limit\n\n每条消息的大小限制默认为 8。 数据类型： 整数 - 兆字节。\n\n消费者实例不是（或除了）在 populate_indicators() 中计算指标，而是监听与生产者实例消息的连接（或在高级配置中监听多个生产者实例），并请求生产者最近为活跃白名单中的每个交易对分析的数据框。\n\n然后，消费者实例将拥有分析数据框的完整副本，而无需自己计算它们。","type":"content","url":"/producer-consumer#id","position":3},{"hierarchy":{"lvl1":"生产者/消费者模式","lvl2":"示例"},"type":"lvl2","url":"/producer-consumer#id-1","position":4},{"hierarchy":{"lvl1":"生产者/消费者模式","lvl2":"示例"},"content":"","type":"content","url":"/producer-consumer#id-1","position":5},{"hierarchy":{"lvl1":"生产者/消费者模式","lvl3":"示例 - 生产者策略","lvl2":"示例"},"type":"lvl3","url":"/producer-consumer#id-2","position":6},{"hierarchy":{"lvl1":"生产者/消费者模式","lvl3":"示例 - 生产者策略","lvl2":"示例"},"content":"一个具有多个指标的简单策略。策略本身不需要特殊考虑。class ProducerStrategy(IStrategy):\n    #...\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        以标准的 freqtrade 方式计算指标，然后可以广播到其他实例\n        \"\"\"\n        dataframe['rsi'] = ta.RSI(dataframe)\n        bollinger = qtpylib.bollinger_bands(qtpylib.typical_price(dataframe), window=20, stds=2)\n        dataframe['bb_lowerband'] = bollinger['lower']\n        dataframe['bb_middleband'] = bollinger['mid']\n        dataframe['bb_upperband'] = bollinger['upper']\n        dataframe['tema'] = ta.TEMA(dataframe, timeperiod=9)\n\n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        为给定的数据框填充入场信号\n        \"\"\"\n        dataframe.loc[\n            (\n                (qtpylib.crossed_above(dataframe['rsi'], self.buy_rsi.value)) &\n                (dataframe['tema'] <= dataframe['bb_middleband']) &\n                (dataframe['tema'] > dataframe['tema'].shift(1)) &\n                (dataframe['volume'] > 0)\n            ),\n            'enter_long'] = 1\n\n        return dataframe\n\nFreqAI\n\n你可以使用这个在功能强大的机器上设置 \n\nFreqAI，同时在树莓派等简单机器上运行消费者，这些消费者可以以不同的方式解释生产者生成的信号。","type":"content","url":"/producer-consumer#id-2","position":7},{"hierarchy":{"lvl1":"生产者/消费者模式","lvl3":"示例 - 消费者策略","lvl2":"示例"},"type":"lvl3","url":"/producer-consumer#id-3","position":8},{"hierarchy":{"lvl1":"生产者/消费者模式","lvl3":"示例 - 消费者策略","lvl2":"示例"},"content":"一个逻辑上等效的策略，它自己不计算任何指标，但将具有相同的分析数据框可用于基于生产者在生产者中计算的指标做出交易决策。在此示例中，消费者具有相同的入场标准，但这不是必需的。消费者可以使用不同的逻辑来入场/出场交易，并且只使用指定的指标。class ConsumerStrategy(IStrategy):\n    #...\n    process_only_new_candles = False # 消费者必需\n\n    _columns_to_expect = ['rsi_default', 'tema_default', 'bb_middleband_default']\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        使用 websocket api 从另一个 freqtrade 实例获取预填充的指标。\n        使用 `self.dp.get_producer_df(pair)` 获取数据框\n        \"\"\"\n        pair = metadata['pair']\n        timeframe = self.timeframe\n\n        producer_pairs = self.dp.get_producer_pairs()\n        # 你可以通过以下方式指定从哪个生产者获取交易对：\n        # self.dp.get_producer_pairs(\"my_other_producer\")\n\n        # 此函数返回分析的数据框，以及它被分析的时间\n        producer_dataframe, _ = self.dp.get_producer_df(pair)\n        # 如果生产者提供，你可以获取其他数据：\n        # self.dp.get_producer_df(\n        #   pair,\n        #   timeframe=\"1h\",\n        #   candle_type=CandleType.SPOT,\n        #   producer_name=\"my_other_producer\"\n        # )\n\n        if not producer_dataframe.empty:\n            # 如果你计划直接传递生产者的入场/出场信号，\n            # 指定 ffill=False，否则会有意外的结果\n            merged_dataframe = merge_informative_pair(dataframe, producer_dataframe,\n                                                      timeframe, timeframe,\n                                                      append_timeframe=False,\n                                                      suffix=\"default\")\n            return merged_dataframe\n        else:\n            dataframe[self._columns_to_expect] = 0\n\n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        为给定的数据框填充入场信号\n        \"\"\"\n        # 使用数据框列，就像我们自己计算它们一样\n        dataframe.loc[\n            (\n                (qtpylib.crossed_above(dataframe['rsi_default'], self.buy_rsi.value)) &\n                (dataframe['tema_default'] <= dataframe['bb_middleband_default']) &\n                (dataframe['tema_default'] > dataframe['tema_default'].shift(1)) &\n                (dataframe['volume'] > 0)\n            ),\n            'enter_long'] = 1\n\n        return dataframe\n\n使用上游信号\n\n通过设置 remove_entry_exit_signals=false，你也可以直接使用生产者的信号。它们应该可以作为 enter_long_default 使用（假设使用了 suffix=\"default\"）- 并且可以直接用作信号，或作为附加指标。","type":"content","url":"/producer-consumer#id-3","position":9},{"hierarchy":{"lvl1":"递归分析指南"},"type":"lvl1","url":"/recursive-analysis","position":0},{"hierarchy":{"lvl1":"递归分析指南"},"content":"","type":"content","url":"/recursive-analysis","position":1},{"hierarchy":{"lvl1":"递归分析指南","lvl2":"递归分析"},"type":"lvl2","url":"/recursive-analysis#id","position":2},{"hierarchy":{"lvl1":"递归分析指南","lvl2":"递归分析"},"content":"本页解释了如何验证你的策略是否存在因某些指标的递归问题导致的不准确性。\n\n递归公式定义了序列中任何项相对于其前一项（或多项）的关系。递归公式的一个例子是 an = an-1 + b。\n\n为什么这对 Freqtrade 很重要？在回测中，机器人将根据指定的时间范围获取交易对的完整数据。但在模拟/实盘运行中，机器人将受到每个交易所提供的数据量的限制。\n\n例如，要计算一个非常基础的指标 steps，第一行的值始终为 0，而后续行的值等于前一行加 1。如果我要使用最新的 1000 个蜡烛图来计算，那么第一行的 steps 值为 0，最后一个已关闭蜡烛图的 steps 值为 999。\n\n如果计算只使用最新的 500 个蜡烛图会怎样？那么最后一个已关闭蜡烛图的 steps 值将是 499，而不是 999。这种值的差异意味着你的回测结果可能与模拟/实盘运行结果不同。\n\nrecursive-analysis 命令需要历史数据可用。要了解如何获取你感兴趣的交易对和交易所的数据，\n请查看文档的\n\n数据下载部分。\n\n该命令基于准备不同长度的数据并基于这些数据计算指标。\n它不会回测策略本身，而只是计算指标。在计算完不同启动蜡烛图数量（startup_candle_count）的指标后，会比较所有指定 startup_candle_count 的最后一行值，以查看它们与基准计算相比显示了多少差异。\n\n命令设置：\n\n使用 -p 选项设置你想要分析的交易对。由于我们只关注指标值，使用多个交易对是多余的。最好使用价格相对较高且至少具有中等波动性的交易对，如 BTC 或 ETH，以避免舍入问题导致结果不准确。如果在命令中未设置交易对，则用于此分析的交易对是白名单中的第一个交易对。\n\n建议设置较长的时间范围（至少 5000 个蜡烛图），这样用作基准的初始指标计算本身具有很小或没有递归问题。例如，对于 5 分钟时间框架，5000 个蜡烛图的时间范围将等于 18 天。\n\n--cache 强制设置为 “none”，以避免自动加载之前的指标计算。\n\n除了递归公式检查外，该命令还对指标值进行简单的前瞻性偏差检查。要进行完整的前瞻性检查，请使用\n\n前瞻性分析。","type":"content","url":"/recursive-analysis#id","position":3},{"hierarchy":{"lvl1":"递归分析指南","lvl3":"recursive-analysis 命令参考","lvl2":"递归分析"},"type":"lvl3","url":"/recursive-analysis#recursive-analysis","position":4},{"hierarchy":{"lvl1":"递归分析指南","lvl3":"recursive-analysis 命令参考","lvl2":"递归分析"},"content":"用法: freqtrade recursive-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                    [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                    [-s NAME] [--strategy-path PATH]\n                                    [--recursive-strategy-search]\n                                    [--freqaimodel NAME]\n                                    [--freqaimodel-path PATH] [-i TIMEFRAME]\n                                    [--timerange TIMERANGE]\n                                    [--data-format-ohlcv {json,jsongz,feather,parquet}]\n                                    [-p PAIRS [PAIRS ...]]\n                                    [--startup-candle STARTUP_CANDLE [STARTUP_CANDLE ...]]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  -i TIMEFRAME, --timeframe TIMEFRAME\n                        指定时间周期（`1m`, `5m`, `30m`, `1h`, `1d`）。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --data-format-ohlcv {json,jsongz,feather,parquet}\n                        下载的蜡烛图（OHLCV）数据的存储格式。\n                        （默认：`feather`）。\n  -p PAIRS [PAIRS ...], --pairs PAIRS [PAIRS ...]\n                        限制命令仅处理这些交易对。交易对以空格分隔。\n  --startup-candle STARTUP_CANDLE [STARTUP_CANDLE ...]\n                        指定要检查的启动蜡烛图（`199`, `499`, `999`, `1999`）。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n策略参数:\n  -s NAME, --strategy NAME\n                        指定机器人使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归搜索策略。\n  --freqaimodel NAME    指定自定义的 freqaimodels。\n  --freqaimodel-path PATH\n                        指定 freqaimodels 的额外查找路径。","type":"content","url":"/recursive-analysis#recursive-analysis","position":5},{"hierarchy":{"lvl1":"递归分析指南","lvl4":"为什么使用奇数作为默认启动蜡烛图？","lvl3":"recursive-analysis 命令参考","lvl2":"递归分析"},"type":"lvl4","url":"/recursive-analysis#id-1","position":6},{"hierarchy":{"lvl1":"递归分析指南","lvl4":"为什么使用奇数作为默认启动蜡烛图？","lvl3":"recursive-analysis 命令参考","lvl2":"递归分析"},"content":"启动蜡烛图的默认值是奇数。当机器人从交易所的 API 获取蜡烛图数据时，最后一个蜡烛图是机器人正在检查的蜡烛图，其余数据是\"启动蜡烛图\"。\n\n例如，Binance 允许每次 API 调用获取 1000 个蜡烛图。当机器人收到 1000 个蜡烛图时，最后一个蜡烛图是\"当前蜡烛图\"，前面的 999 个蜡烛图是\"启动蜡烛图\"。通过将启动蜡烛图数量设置为 1000 而不是 999，机器人将尝试获取 1001 个蜡烛图。然后交易所 API 将以分页形式发送蜡烛图数据，即在 Binance API 的情况下，这将是两组 - 一组长度为 1000，另一组长度为 1。这导致机器人认为策略需要 1001 个蜡烛图的数据，因此它将下载 2000 个蜡烛图的数据，这意味着将有 1 个\"当前蜡烛图\"和 1999 个\"启动蜡烛图\"。\n\n此外，交易所限制连续批量 API 调用的次数，例如 Binance 允许 5 次调用。在这种情况下，在不触发 API 速率限制的情况下，只能从 Binance API 下载 5000 个蜡烛图，这意味着你可以拥有的最大 startup_candle_count 是 4999。\n\n请注意，交易所可能会在未来更改这个蜡烛图限制，恕不另行通知。","type":"content","url":"/recursive-analysis#id-1","position":7},{"hierarchy":{"lvl1":"递归分析指南","lvl4":"命令如何工作？","lvl3":"recursive-analysis 命令参考","lvl2":"递归分析"},"type":"lvl4","url":"/recursive-analysis#id-2","position":8},{"hierarchy":{"lvl1":"递归分析指南","lvl4":"命令如何工作？","lvl3":"recursive-analysis 命令参考","lvl2":"递归分析"},"content":"首先使用提供的时间范围进行初始指标计算，为指标值生成基准。\n\n设置基准后，它将为每个不同的启动蜡烛图数量值进行额外的运行。\n\n然后命令将比较最后一个蜡烛图行的指标值，并在表格中报告差异。","type":"content","url":"/recursive-analysis#id-2","position":9},{"hierarchy":{"lvl1":"递归分析指南","lvl3":"理解 recursive-analysis 输出","lvl2":"递归分析"},"type":"lvl3","url":"/recursive-analysis#id-recursive-analysis","position":10},{"hierarchy":{"lvl1":"递归分析指南","lvl3":"理解 recursive-analysis 输出","lvl2":"递归分析"},"content":"这是一个输出结果表的示例，其中至少有一个指标存在递归公式问题：| indicators   | 20      | 40      | 80     | 100    | 150     | 300     | 999    |\n|--------------+---------+---------+--------+--------+---------+---------+--------|\n| rsi_30       | nan%    | -6.025% | 0.612% | 0.828% | -0.140% | 0.000%  | 0.000% |\n| rsi_14       | 24.141% | -0.876% | 0.070% | 0.007% | -0.000% | -0.000% | -      |\n\n列标题表示分析中使用的不同 startup_candle_count。表格中的值表示计算的指标与基准值相比的差异百分比。\n\nnan% 表示由于数据不足，无法计算该指标的值。在此示例中，你无法仅用 21 个蜡烛图（1 个当前蜡烛图 + 20 个启动蜡烛图）计算长度为 30 的 RSI。\n\n用户应该按指标评估表格，以决定指定的 startup_candle_count 是否导致足够小的差异，使指标不会对入场和/或出场产生任何影响。\n\n因此，追求绝对零差异（由 - 值表示）可能不是最佳选择，因为某些指标可能要求你使用如此长的 startup_candle_count 才能实现零差异。","type":"content","url":"/recursive-analysis#id-recursive-analysis","position":11},{"hierarchy":{"lvl1":"递归分析指南","lvl3":"注意事项","lvl2":"递归分析"},"type":"lvl3","url":"/recursive-analysis#id-3","position":12},{"hierarchy":{"lvl1":"递归分析指南","lvl3":"注意事项","lvl2":"递归分析"},"content":"recursive-analysis 只会计算和比较最后一行的指标值。输出表格报告了不同启动蜡烛图数量计算与原始基准计算之间的百分比差异。它是否对你的入场和出场产生任何实际影响并不包括在内。\n\n理想情况是，尽管启动蜡烛图数量不同，指标也不会有差异（或至少非常接近 0%）。实际上，像 EMA 这样的指标使用递归公式来计算指标值，因此目标不一定是实现零百分比差异，而是使差异足够低（因此 startup_candle_count 足够高），使指标固有的递归不会对交易决策产生任何实际影响。\n\nrecursive-analysis 只会在 populate_indicators 和 @informative 装饰器上运行计算。如果你在 populate_entry_trend 或 populate_exit_trend 中放置任何指标计算，它将不会被计算。","type":"content","url":"/recursive-analysis#id-3","position":13},{"hierarchy":{"lvl1":"REST API 指南"},"type":"lvl1","url":"/rest-api","position":0},{"hierarchy":{"lvl1":"REST API 指南"},"content":"","type":"content","url":"/rest-api","position":1},{"hierarchy":{"lvl1":"REST API 指南","lvl2":"REST API"},"type":"lvl2","url":"/rest-api#rest-api","position":2},{"hierarchy":{"lvl1":"REST API 指南","lvl2":"REST API"},"content":"","type":"content","url":"/rest-api#rest-api","position":3},{"hierarchy":{"lvl1":"REST API 指南","lvl3":"FreqUI","lvl2":"REST API"},"type":"lvl3","url":"/rest-api#frequi","position":4},{"hierarchy":{"lvl1":"REST API 指南","lvl3":"FreqUI","lvl2":"REST API"},"content":"FreqUI 现在有了自己的\n\n专用文档部分 - 请参考该部分获取所有关于 FreqUI 的信息。","type":"content","url":"/rest-api#frequi","position":5},{"hierarchy":{"lvl1":"REST API 指南","lvl3":"配置","lvl2":"REST API"},"type":"lvl3","url":"/rest-api#id","position":6},{"hierarchy":{"lvl1":"REST API 指南","lvl3":"配置","lvl2":"REST API"},"content":"通过在配置中添加 api_server 部分并将 api_server.enabled 设置为 true 来启用 REST API。\n\n示例配置：    \"api_server\": {\n        \"enabled\": true,\n        \"listen_ip_address\": \"127.0.0.1\",\n        \"listen_port\": 8080,\n        \"verbosity\": \"error\",\n        \"enable_openapi\": false,\n        \"jwt_secret_key\": \"somethingrandom\",\n        \"CORS_origins\": [],\n        \"username\": \"Freqtrader\",\n        \"password\": \"SuperSecret1!\",\n        \"ws_token\": \"sercet_Ws_t0ken\"\n    },\n\n安全警告\n\n默认情况下，配置仅监听 localhost（因此无法从其他系统访问）。我们强烈建议不要将此 API 暴露到互联网，并选择一个强且唯一的密码，因为其他人可能会控制您的机器人。\n\n远程服务器上的 API/UI 访问\n\n如果您在 VPS 上运行，您应该考虑使用 ssh 隧道或设置 VPN（openVPN、wireguard）来连接到您的机器人。\n\n这将确保 freqUI 不会直接暴露在互联网上，出于安全原因不建议这样做（freqUI 默认不支持 https）。\n\n这些工具的设置不在本教程范围内，但可以在互联网上找到许多好的教程。\n\n然后，您可以通过在浏览器中访问 http://127.0.0.1:8080/api/v1/ping 来检查 API 是否正常运行。\n这应该返回响应：{\"status\":\"pong\"}\n\n所有其他端点都返回敏感信息并需要身份验证，因此无法通过 Web 浏览器访问。","type":"content","url":"/rest-api#id","position":7},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"安全","lvl3":"配置","lvl2":"REST API"},"type":"lvl4","url":"/rest-api#id-1","position":8},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"安全","lvl3":"配置","lvl2":"REST API"},"content":"要生成安全密码，最好使用密码管理器，或使用以下代码。import secrets\nsecrets.token_hex()\n\nJWT token\n\n使用相同的方法也可以生成 JWT 密钥（jwt_secret_key）。\n\n密码选择\n\n请确保选择一个非常强且唯一的密码，以保护您的机器人免受未授权访问。\n\n同时将 jwt_secret_key 更改为随机值（不需要记住它，但它将用于加密您的会话，所以最好是一个唯一的值！）。","type":"content","url":"/rest-api#id-1","position":9},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"Docker 配置","lvl3":"配置","lvl2":"REST API"},"type":"lvl4","url":"/rest-api#configuration-with-docker","position":10},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"Docker 配置","lvl3":"配置","lvl2":"REST API"},"content":"如果您使用 docker 运行机器人，您需要让机器人监听传入连接。安全由 docker 处理。    \"api_server\": {\n        \"enabled\": true,\n        \"listen_ip_address\": \"0.0.0.0\",\n        \"listen_port\": 8080,\n        \"username\": \"Freqtrader\",\n        \"password\": \"SuperSecret1!\",\n        //...\n    },\n\n确保您的 docker-compose 文件中有以下 2 行：    ports:\n      - \"127.0.0.1:8080:8080\"\n\n安全警告\n\n通过在 docker 端口映射中使用 \"8080:8080\"（或 \"0.0.0.0:8080:8080\"），API 将对连接到服务器正确端口的每个人可用，因此其他人可能能够控制您的机器人。\n\n如果您在安全环境（如家庭网络）中运行机器人，这可能是安全的，但不建议将 API 暴露到互联网。","type":"content","url":"/rest-api#configuration-with-docker","position":11},{"hierarchy":{"lvl1":"REST API 指南","lvl3":"REST API","lvl2":"REST API"},"type":"lvl3","url":"/rest-api#rest-api-1","position":12},{"hierarchy":{"lvl1":"REST API 指南","lvl3":"REST API","lvl2":"REST API"},"content":"","type":"content","url":"/rest-api#rest-api-1","position":13},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"使用 API","lvl3":"REST API","lvl2":"REST API"},"type":"lvl4","url":"/rest-api#id-api","position":14},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"使用 API","lvl3":"REST API","lvl2":"REST API"},"content":"我们建议使用支持的 freqtrade-client 包（也可作为 scripts/rest_client.py 使用）来使用 API。\n\n可以通过使用 pip install freqtrade-client 独立于任何正在运行的 freqtrade 机器人安装此命令。\n\n该模块设计为轻量级，仅依赖于 requests 和 python-rapidjson 模块，跳过了 freqtrade 所需的所有重依赖。freqtrade-client <command> [optional parameters]\n\n默认情况下，脚本假设使用 127.0.0.1（localhost）和端口 8080，但您可以指定配置文件来覆盖此行为。","type":"content","url":"/rest-api#id-api","position":15},{"hierarchy":{"lvl1":"REST API 指南","lvl5":"最小化客户端配置","lvl4":"使用 API","lvl3":"REST API","lvl2":"REST API"},"type":"lvl5","url":"/rest-api#id-2","position":16},{"hierarchy":{"lvl1":"REST API 指南","lvl5":"最小化客户端配置","lvl4":"使用 API","lvl3":"REST API","lvl2":"REST API"},"content":"{\n    \"api_server\": {\n        \"enabled\": true,\n        \"listen_ip_address\": \"0.0.0.0\",\n        \"listen_port\": 8080,\n        \"username\": \"Freqtrader\",\n        \"password\": \"SuperSecret1!\",\n        //...\n    }\n}freqtrade-client --config rest_config.json <command> [optional parameters]\n\n具有多个参数的命令可能需要关键字参数（为了清晰）- 可以按如下方式提供：freqtrade-client --config rest_config.json forceenter BTC/USDT long enter_tag=GutFeeling\n\n此方法适用于所有参数 - 使用 “show” 命令查看可用参数列表。\n\n编程使用\"\n\nfreqtrade-client 包（可独立于 freqtrade 安装）可用于您自己的脚本中以与 freqtrade API 交互。\n\n为此，请使用以下内容：from freqtrade_client import FtRestClient\n\n\nclient = FtRestClient(server_url, username, password)\n\n# 获取机器人状态\nping = client.ping()\nprint(ping)\n# ... \n\n有关可用命令的完整列表，请参阅下面的列表。\n\n可以使用 help 命令从 rest-client 脚本中列出可能的命令。freqtrade-client help可能的命令：\n\navailable_pairs\n\t返回基于时间框架/基础货币选择的可用交易对（回测数据）\n\n        :param timeframe: 仅具有此时间框架的可用交易对。\n        :param stake_currency: 仅包含此时间框架的交易对\n\nbalance\n\t获取账户余额。\n\nblacklist\n\t显示当前黑名单。\n\n        :param add: 要添加的币种列表（例如：\"BNB/BTC\"）\n\ncancel_open_order\n\t取消交易的开放订单。\n\n        :param trade_id: 取消此交易的开放订单。\n\ncount\n\t返回开放交易的数量。\n\ndaily\n\t返回每天的利润和交易数量。\n\ndelete_lock\n\t从数据库中删除（禁用）锁定。\n\n        :param lock_id: 要删除的锁定的 ID\n\ndelete_trade\n\t从数据库中删除交易。\n        尝试关闭开放订单。需要在交易所手动处理此资产。\n\n        :param trade_id: 从数据库中删除具有此 ID 的交易。\n\nedge\n\t返回有关 Edge 的信息。\n\nforcebuy\n\t购买资产。\n\n        :param pair: 要购买的交易对（ETH/BTC）\n        :param price: 可选 - 购买价格\n\nforceenter\n\t强制进入交易\n\n        :param pair: 要购买的交易对（ETH/BTC）\n        :param side: 'long' 或 'short'\n        :param price: 可选 - 购买价格\n\nforceexit\n\t强制退出交易。\n\n        :param tradeid: 交易的 ID（可以通过状态命令获取）\n        :param ordertype: 要使用的订单类型（必须是 market 或 limit）\n        :param amount: 要卖出的数量。如果未给出则全部卖出\n\nhealth\n\t提供运行机器人的快速健康检查。\n\nlock_add\n    手动锁定特定交易对\n\n        :param pair: 要锁定的交易对\n        :param until: 锁定到此日期（格式 \"2024-03-30 16:00:00Z\"）\n        :param side: 要锁定的方向（long、short、*）\n        :param reason: 锁定的原因        \n\nlocks\n\t返回当前锁定\n\nlogs\n\t显示最新日志。\n\n        :param limit: 将日志消息限制为最后 <limit> 条日志。无限制获取整个日志。\n\npair_candles\n\t返回 <pair><timeframe> 的实时数据框。\n\n        :param pair: 获取数据的交易对\n        :param timeframe: 仅具有此时间框架的可用交易对。\n        :param limit: 将结果限制为最后 n 个蜡烛图。\n\npair_history\n\t返回历史分析数据框\n\n        :param pair: 获取数据的交易对\n        :param timeframe: 仅具有此时间框架的可用交易对。\n        :param strategy: 用于分析和获取值的策略\n        :param timerange: 获取数据的时间范围（与 --timerange 端点相同的格式）\n\nperformance\n\t返回不同币种的性能。\n\nping\n\t简单 ping\n\nplot_config\n\t如果策略定义了一个，则返回绘图配置。\n\nprofit\n\t返回利润摘要。\n\nreload_config\n\t重新加载配置。\n\nshow_config\n        返回与交易操作相关的部分配置。\n\nstart\n\t如果机器人处于停止状态，则启动机器人。\n\npause\n\t如果机器人处于运行状态，则暂停机器人。如果在停止状态触发，将处理开放仓位。\n\nstats\n\t返回统计报告（持续时间、卖出原因）。\n\nstatus\n\t获取开放交易的状态。\n\nstop\n\t停止机器人。使用 `start` 重新启动。\n\nstopbuy\n\t停止买入（但优雅地处理卖出）。使用 `reload_config` 重置。\n\nstrategies\n\t列出可用策略\n\nstrategy\n\t获取策略详情\n\n        :param strategy: 策略类名\n\nsysinfo\n\t提供系统信息（CPU、RAM 使用情况）\n\ntrade\n\t返回特定交易\n\n        :param trade_id: 指定要获取的交易。\n\ntrades\n\t按 id 排序返回交易历史\n\n        :param limit: 将交易限制为最后 X 笔交易。最多 500 笔交易。\n        :param offset: 按此数量的交易偏移。\n\nlist_open_trades_custom_data\n    返回包含开放交易自定义数据的字典\n\n        :param key: str, 可选 - 自定义数据的键\n        :param limit: 将交易限制为 X 笔交易。\n        :param offset: 按此数量的交易偏移。\n\nlist_custom_data\n    返回包含指定交易自定义数据的字典\n\n        :param trade_id: int - 交易的 ID\n        :param key: str, 可选 - 自定义数据的键\n\nversion\n\t返回机器人的版本。\n\nwhitelist\n\t显示当前白名单。\n","type":"content","url":"/rest-api#id-2","position":17},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"可用端点","lvl3":"REST API","lvl2":"REST API"},"type":"lvl4","url":"/rest-api#id-3","position":18},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"可用端点","lvl3":"REST API","lvl2":"REST API"},"content":"如果您希望通过其他方式手动调用 REST API，例如直接通过 curl，下表显示了相关的 URL 端点和参数。\n下表中的所有端点都需要以 API 的基本 URL 为前缀，例如 http://127.0.0.1:8080/api/v1/ - 因此命令变为 http://127.0.0.1:8080/api/v1/<command>。\n\n端点\n\n方法\n\n描述 / 参数\n\n/ping\n\nGET\n\n测试 API 就绪性的简单命令 - 不需要身份验证。\n\n/start\n\nPOST\n\n启动交易者。\n\n/pause\n\nPOST\n\n暂停交易者。根据其规则优雅地处理开放交易。不进入新仓位。\n\n/stop\n\nPOST\n\n停止交易者。\n\n/stopbuy\n\nPOST\n\n停止交易者开仓。根据其规则优雅地关闭开放交易。\n\n/reload_config\n\nPOST\n\n重新加载配置文件。\n\n/trades\n\nGET\n\n列出最后交易。每次调用限制为 500 笔交易。\n\n/trade/<tradeid>\n\nGET\n\n获取特定交易。参数：- tradeid (int)\n\n/trades/<tradeid>\n\nDELETE\n\n从数据库中删除交易。尝试关闭开放订单。需要在交易所手动处理此交易。参数：- tradeid (int)\n\n/trades/<tradeid>/open-order\n\nDELETE\n\n取消此交易的开放订单。参数：- tradeid (int)\n\n/trades/<tradeid>/reload\n\nPOST\n\n从交易所重新加载交易。仅在实盘模式下工作，可能有助于恢复在交易所手动卖出的交易。参数：- tradeid (int)\n\n/show_config\n\nGET\n\n显示当前配置中与操作相关的部分设置。\n\n/logs\n\nGET\n\n显示最后日志消息。\n\n/status\n\nGET\n\n列出所有开放交易。\n\n/count\n\nGET\n\n显示已使用和可用的交易数量。\n\n/entries\n\nGET\n\n显示给定交易对（如果未给出交易对则为所有交易对）的每个入场标签的利润统计。交易对是可选的。参数：- pair (str)\n\n/exits\n\nGET\n\n显示给定交易对（如果未给出交易对则为所有交易对）的每个出场原因的利润统计。交易对是可选的。参数：- pair (str)\n\n/mix_tags\n\nGET\n\n显示给定交易对（如果未给出交易对则为所有交易对）的每个入场标签+出场原因组合的利润统计。交易对是可选的。参数：- pair (str)\n\n/locks\n\nGET\n\n显示当前锁定的交易对。\n\n/locks\n\nPOST\n\n将交易对锁定到 “until”。（Until 将向上取整到最近的时间框架）。Side 是可选的，是 long 或 short（默认为 long）。Reason 是可选的。参数：- <pair> (str)- <until> (datetime)- [side] (str)- [reason] (str)\n\n/locks/<lockid>\n\nDELETE\n\n通过 id 删除（禁用）锁定。参数：- lockid (int)\n\n/profit\n\nGET\n\n显示已关闭交易的盈亏摘要和一些关于您表现的统计信息。\n\n/forceexit\n\nPOST\n\n立即退出给定交易（忽略 minimum_roi），使用给定订单类型（“market” 或 “limit”，如果未指定则使用您的配置设置），以及选择的数量（如果未指定则全部卖出）。如果 all 作为 tradeid 提供，则所有当前开放交易将被强制退出。参数：- <tradeid> (int 或 str)- <ordertype> (str)- [amount] (float)\n\n/forceenter\n\nPOST\n\n立即进入给定交易对。Side 是可选的，是 long 或 short（默认为 long）。Rate 是可选的。（force_entry_enable 必须设置为 True）参数：- <pair> (str)- <side> (str)- [rate] (float)\n\n/performance\n\nGET\n\n显示按交易对分组的每个已完成交易的性能。\n\n/balance\n\nGET\n\n显示每个货币的账户余额。\n\n/daily\n\nGET\n\n显示过去 n 天（n 默认为 7）每天的盈亏。参数：- <n> (int)\n\n/weekly\n\nGET\n\n显示过去 n 天（n 默认为 4）每周的盈亏。参数：- <n> (int)\n\n/monthly\n\nGET\n\n显示过去 n 天（n 默认为 3）每月的盈亏。参数：- <n> (int)\n\n/stats\n\nGET\n\n显示盈亏原因摘要以及平均持有时间。\n\n/whitelist\n\nGET\n\n显示当前白名单。\n\n/blacklist\n\nGET\n\n显示当前黑名单。\n\n/blacklist\n\nPOST\n\n将指定交易对添加到黑名单。参数：- pair (str)\n\n/blacklist\n\nDELETE\n\n从黑名单中删除指定的交易对列表。参数：- [pair,pair] (list[str])\n\n/edge\n\nGET\n\n如果启用，显示 Edge 验证的交易对。\n\n/pair_candles\n\nGET\n\n在机器人运行时返回交易对/时间框架组合的数据框。Alpha\n\n/pair_candles\n\nPOST\n\n在机器人运行时返回交易对/时间框架组合的数据框，通过提供的列列表过滤返回。Alpha参数：- <column_list> (list[str])\n\n/pair_history\n\nGET\n\n返回给定时间范围的分析数据框，由给定策略分析。Alpha\n\n/pair_history\n\nPOST\n\n返回给定时间范围的分析数据框，由给定策略分析，通过提供的列列表过滤返回。Alpha参数：- <column_list> (list[str])\n\n/plot_config\n\nGET\n\n从策略获取绘图配置（如果未配置则返回空）。Alpha\n\n/strategies\n\nGET\n\n列出策略目录中的策略。Alpha\n\n/strategy/<strategy>\n\nGET\n\n通过策略类名获取特定策略内容。Alpha参数：- <strategy> (str)\n\n/available_pairs\n\nGET\n\n列出可用的回测数据。Alpha\n\n/version\n\nGET\n\n显示版本。\n\n/sysinfo\n\nGET\n\n显示有关系统负载的信息。\n\n/health\n\nGET\n\n显示机器人健康状态（最后机器人循环）。\n\nAlpha 状态\n\n上面标记为 Alpha 状态 的端点可能随时更改，恕不另行通知。","type":"content","url":"/rest-api#id-3","position":19},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"消息 WebSocket","lvl3":"REST API","lvl2":"REST API"},"type":"lvl4","url":"/rest-api#id-websocket","position":20},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"消息 WebSocket","lvl3":"REST API","lvl2":"REST API"},"content":"API 服务器包含一个 websocket 端点，用于订阅来自 freqtrade 机器人的 RPC 消息。\n这可用于消费来自机器人的实时数据，例如入场/出场成交消息、白名单更改、交易对的填充指标等。\n\n这也用于在 Freqtrade 中设置\n\n生产者/消费者模式。\n\n假设您的 rest API 设置为 127.0.0.1 端口 8080，端点可在 http://localhost:8080/api/v1/message/ws 访问。\n\n要访问 websocket 端点，需要在端点 URL 中将 ws_token 作为查询参数。\n\n要生成安全的 ws_token，您可以运行以下代码：>>> import secrets\n>>> secrets.token_urlsafe(25)\n'hZ-y58LXyX_HZ8O1cJzVyN6ePWrLpNQv4Q'\n\n然后，您将在 api_server 配置中的 ws_token 下添加该令牌。如下所示：\"api_server\": {\n    \"enabled\": true,\n    \"listen_ip_address\": \"127.0.0.1\",\n    \"listen_port\": 8080,\n    \"verbosity\": \"error\",\n    \"enable_openapi\": false,\n    \"jwt_secret_key\": \"somethingrandom\",\n    \"CORS_origins\": [],\n    \"username\": \"Freqtrader\",\n    \"password\": \"SuperSecret1!\",\n    \"ws_token\": \"hZ-y58LXyX_HZ8O1cJzVyN6ePWrLpNQv4Q\" // <-----\n},\n\n您现在可以连接到端点 http://localhost:8080/api/v1/message/ws?token=hZ-y58LXyX_HZ8O1cJzVyN6ePWrLpNQv4Q。\n\n重用示例令牌\n\n请不要使用上面的示例令牌。为确保安全，请生成一个全新的令牌。","type":"content","url":"/rest-api#id-websocket","position":21},{"hierarchy":{"lvl1":"REST API 指南","lvl5":"使用 WebSocket","lvl4":"消息 WebSocket","lvl3":"REST API","lvl2":"REST API"},"type":"lvl5","url":"/rest-api#id-websocket-1","position":22},{"hierarchy":{"lvl1":"REST API 指南","lvl5":"使用 WebSocket","lvl4":"消息 WebSocket","lvl3":"REST API","lvl2":"REST API"},"content":"连接到 WebSocket 后，机器人将向订阅它们的任何人广播 RPC 消息。要订阅消息列表，您必须通过 WebSocket 发送 JSON 请求，如下所示。data 键必须是消息类型字符串列表。{\n  \"type\": \"subscribe\",\n  \"data\": [\"whitelist\", \"analyzed_df\"] // 消息类型字符串列表\n}\n\n有关消息类型的列表，请参阅 freqtrade/enums/rpcmessagetype.py 中的 RPCMessageType 枚举\n\n现在，只要连接处于活动状态，每当在机器人中发送这些类型的 RPC 消息时，您都会通过 WebSocket 收到它们。它们通常采用与请求相同的形式：{\n  \"type\": \"analyzed_df\",\n  \"data\": {\n      \"key\": [\"NEO/BTC\", \"5m\", \"spot\"],\n      \"df\": {}, // 数据框\n      \"la\": \"2022-09-08 22:14:41.457786+00:00\"\n  }\n}","type":"content","url":"/rest-api#id-websocket-1","position":23},{"hierarchy":{"lvl1":"REST API 指南","lvl5":"反向代理设置","lvl4":"消息 WebSocket","lvl3":"REST API","lvl2":"REST API"},"type":"lvl5","url":"/rest-api#id-4","position":24},{"hierarchy":{"lvl1":"REST API 指南","lvl5":"反向代理设置","lvl4":"消息 WebSocket","lvl3":"REST API","lvl2":"REST API"},"content":"使用 \n\nNginx 时，WebSocket 需要以下配置（注意此配置不完整，缺少一些信息，不能直接使用）：\n\n请确保将 <freqtrade_listen_ip>（以及后续端口）替换为与您的配置/设置匹配的 IP 和端口。http {\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        '' close;\n    }\n\n    #...\n\n    server {\n        #...\n\n        location / {\n            proxy_http_version 1.1;\n            proxy_pass http://<freqtrade_listen_ip>:8080;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade;\n            proxy_set_header Host $host;\n        }\n    }\n}\n\n要正确配置您的反向代理（安全地），请查阅其文档以了解如何代理 websocket。\n\nTraefik：Traefik 默认支持 websocket，请参阅\n\n文档\n\nCaddy：Caddy v2 默认支持 websocket，请参阅\n\n文档\n\nSSL 证书\n\n您可以使用 certbot 等工具设置 ssl 证书，通过使用上述任何反向代理通过加密连接访问机器人的 UI。\n\n虽然这将保护传输中的数据，但我们不建议在您的专用网络（VPN、SSH 隧道）之外运行 freqtrade API。","type":"content","url":"/rest-api#id-4","position":25},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"OpenAPI 界面","lvl3":"REST API","lvl2":"REST API"},"type":"lvl4","url":"/rest-api#openapi","position":26},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"OpenAPI 界面","lvl3":"REST API","lvl2":"REST API"},"content":"要启用内置的 openAPI 界面（Swagger UI），请在 api_server 配置中指定 \"enable_openapi\": true。\n这将在 /docs 端点启用 Swagger UI。默认情况下，它在 \n\nhttp://​localhost:8080​/docs 运行 - 但这取决于您的设置。","type":"content","url":"/rest-api#openapi","position":27},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"使用 JWT 令牌的高级 API 使用","lvl3":"REST API","lvl2":"REST API"},"type":"lvl4","url":"/rest-api#id-jwt-api","position":28},{"hierarchy":{"lvl1":"REST API 指南","lvl4":"使用 JWT 令牌的高级 API 使用","lvl3":"REST API","lvl2":"REST API"},"content":"Note\n\n以下应该在应用程序（Freqtrade REST API 客户端，通过 API 获取信息）中完成，不打算定期使用。\n\nFreqtrade 的 REST API 还提供 JWT（JSON Web Tokens）。\n您可以使用以下命令登录，然后使用生成的 access_token。> curl -X POST --user Freqtrader http://localhost:8080/api/v1/token/login\n{\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODkxMTk2ODEsIm5iZiI6MTU4OTExOTY4MSwianRpIjoiMmEwYmY0NWUtMjhmOS00YTUzLTlmNzItMmM5ZWVlYThkNzc2IiwiZXhwIjoxNTg5MTIwNTgxLCJpZGVudGl0eSI6eyJ1IjoiRnJlcXRyYWRlciJ9LCJmcmVzaCI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.qt6MAXYIa-l556OM7arBvYJ0SDI9J8bIk3_glDujF5g\",\"refresh_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODkxMTk2ODEsIm5iZiI6MTU4OTExOTY4MSwianRpIjoiZWQ1ZWI3YjAtYjMwMy00YzAyLTg2N2MtNWViMjIxNWQ2YTMxIiwiZXhwIjoxNTkxNzExNjgxLCJpZGVudGl0eSI6eyJ1IjoiRnJlcXRyYWRlciJ9LCJ0eXBlIjoicmVmcmVzaCJ9.d1AT_jYICyTAjD0fiQAr52rkRqtxCjUGEMwlNuuzgNQ\"}\n\n> access_token=\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODkxMTk2ODEsIm5iZiI6MTU4OTExOTY4MSwianRpIjoiMmEwYmY0NWUtMjhmOS00YTUzLTlmNzItMmM5ZWVlYThkNzc2IiwiZXhwIjoxNTg5MTIwNTgxLCJpZGVudGl0eSI6eyJ1IjoiRnJlcXRyYWRlciJ9LCJmcmVzaCI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.qt6MAXYIa-l556OM7arBvYJ0SDI9J8bIk3_glDujF5g\"\n# 使用 access_token 进行身份验证\n> curl -X GET --header \"Authorization: Bearer ${access_token}\" http://localhost:8080/api/v1/count\n\n\n由于访问令牌有短超时（15 分钟）- 应该定期使用 token/refresh 请求获取新的访问令牌：> curl -X POST --header \"Authorization: Bearer ${refresh_token}\"http://localhost:8080/api/v1/token/refresh\n{\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODkxMTk5NzQsIm5iZiI6MTU4OTExOTk3NCwianRpIjoiMDBjNTlhMWUtMjBmYS00ZTk0LTliZjAtNWQwNTg2MTdiZDIyIiwiZXhwIjoxNTg5MTIwODc0LCJpZGVudGl0eSI6eyJ1IjoiRnJlcXRyYWRlciJ9LCJmcmVzaCI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.1seHlII3WprjjclY6DpRhen0rqdF4j6jbvxIhUFaSbs\"}\n\n","type":"content","url":"/rest-api#id-jwt-api","position":29},{"hierarchy":{"lvl1":"REST API 指南","lvl3":"CORS","lvl2":"REST API"},"type":"lvl3","url":"/rest-api#cors","position":30},{"hierarchy":{"lvl1":"REST API 指南","lvl3":"CORS","lvl2":"REST API"},"content":"本节内容仅在跨源情况下需要（当你有多个机器人 API 运行在 localhost:8081、localhost:8082 等端口上，并想要将它们组合到一个 FreqUI 实例中时）。\n\n技术说明\n\n所有基于 Web 的前端都受到 \n\nCORS（跨源资源共享）的限制。\n\n由于大多数对 Freqtrade API 的请求都需要认证，因此正确的 CORS 策略对于避免安全问题至关重要。\n\n此外，标准不允许对带有凭证的请求使用 * CORS 策略，因此必须适当设置此配置。\n\n用户可以通过 CORS_origins 配置设置来允许不同源 URL 访问机器人 API。\n它包含一个允许访问机器人 API 资源的 URL 列表。\n\n假设你的应用程序部署在 https://frequi.freqtrade.io/home/ - 这意味着需要以下配置：{\n    //...\n    \"jwt_secret_key\": \"somethingrandom\",\n    \"CORS_origins\": [\"https://frequi.freqtrade.io\"],\n    //...\n}\n\n在以下（相当常见的）情况下，FreqUI 可以通过 http://localhost:8080/trade 访问（这是你在导航到 freqUI 时在导航栏中看到的）。\n\n这种情况的正确配置是 http://localhost:8080 - URL 的主要部分，包括端口。{\n    //...\n    \"jwt_secret_key\": \"somethingrandom\",\n    \"CORS_origins\": [\"http://localhost:8080\"],\n    //...\n}\n\n尾部斜杠\n\nCORS_origins 配置中不允许使用尾部斜杠（例如 \"http://localhots:8080/\"）。\n\n这样的配置将不会生效，CORS 错误将继续存在。\n\n强烈建议\n\n我们强烈建议将 jwt_secret_key 设置为只有你自己知道的随机值，以避免未经授权访问你的机器人。","type":"content","url":"/rest-api#cors","position":31},{"hierarchy":{"lvl1":"SQL 助手"},"type":"lvl1","url":"/sql-cheatsheet","position":0},{"hierarchy":{"lvl1":"SQL 助手"},"content":"本页包含一些帮助，如果你想查询你的 sqlite 数据库。\n\n其他数据库系统\n\n要使用其他数据库系统，如 PostgreSQL 或 MariaDB，你可以使用相同的查询，但你需要使用相应数据库系统的客户端。\n\n点击这里了解如何使用 freqtrade 设置不同的数据库系统。\n\nWarning\n\n如果你不熟悉 SQL，在数据库上运行查询时应该非常小心。\n\n在运行任何查询之前，始终确保有数据库的备份。","type":"content","url":"/sql-cheatsheet","position":1},{"hierarchy":{"lvl1":"SQL 助手","lvl2":"安装 sqlite3"},"type":"lvl2","url":"/sql-cheatsheet#id-sqlite3","position":2},{"hierarchy":{"lvl1":"SQL 助手","lvl2":"安装 sqlite3"},"content":"Sqlite3 是一个基于终端的 sqlite 应用程序。\n如果你觉得更舒服，可以随意使用像 SqliteBrowser 这样的可视化数据库编辑器。","type":"content","url":"/sql-cheatsheet#id-sqlite3","position":3},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"Ubuntu/Debian 安装","lvl2":"安装 sqlite3"},"type":"lvl3","url":"/sql-cheatsheet#ubuntu-debian","position":4},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"Ubuntu/Debian 安装","lvl2":"安装 sqlite3"},"content":"sudo apt-get install sqlite3","type":"content","url":"/sql-cheatsheet#ubuntu-debian","position":5},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"通过 docker 使用 sqlite3","lvl2":"安装 sqlite3"},"type":"lvl3","url":"/sql-cheatsheet#id-docker-sqlite3","position":6},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"通过 docker 使用 sqlite3","lvl2":"安装 sqlite3"},"content":"freqtrade docker 镜像确实包含 sqlite3，所以你可以在不需要在主机系统上安装任何东西的情况下编辑数据库。docker compose exec freqtrade /bin/bash\nsqlite3 <database-file>.sqlite","type":"content","url":"/sql-cheatsheet#id-docker-sqlite3","position":7},{"hierarchy":{"lvl1":"SQL 助手","lvl2":"打开数据库"},"type":"lvl2","url":"/sql-cheatsheet#id","position":8},{"hierarchy":{"lvl1":"SQL 助手","lvl2":"打开数据库"},"content":"sqlite3\n.open <filepath>","type":"content","url":"/sql-cheatsheet#id","position":9},{"hierarchy":{"lvl1":"SQL 助手","lvl2":"表结构"},"type":"lvl2","url":"/sql-cheatsheet#id-1","position":10},{"hierarchy":{"lvl1":"SQL 助手","lvl2":"表结构"},"content":"","type":"content","url":"/sql-cheatsheet#id-1","position":11},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"列出表","lvl2":"表结构"},"type":"lvl3","url":"/sql-cheatsheet#id-2","position":12},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"列出表","lvl2":"表结构"},"content":".tables","type":"content","url":"/sql-cheatsheet#id-2","position":13},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"显示表结构","lvl2":"表结构"},"type":"lvl3","url":"/sql-cheatsheet#id-3","position":14},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"显示表结构","lvl2":"表结构"},"content":".schema <table_name>","type":"content","url":"/sql-cheatsheet#id-3","position":15},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"获取表中的所有交易","lvl2":"表结构"},"type":"lvl3","url":"/sql-cheatsheet#id-4","position":16},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"获取表中的所有交易","lvl2":"表结构"},"content":"SELECT * FROM trades;","type":"content","url":"/sql-cheatsheet#id-4","position":17},{"hierarchy":{"lvl1":"SQL 助手","lvl2":"破坏性查询"},"type":"lvl2","url":"/sql-cheatsheet#id-5","position":18},{"hierarchy":{"lvl1":"SQL 助手","lvl2":"破坏性查询"},"content":"写入数据库的查询。\n这些查询通常不应该需要，因为 freqtrade 试图自己处理所有数据库操作 - 或通过 API 或 telegram 命令暴露它们。\n\nWarning\n\n在运行以下任何查询之前，请确保你有数据库的备份。\n\nDanger\n\n当机器人连接到数据库时，你也应该永远不要运行任何写入查询（update、insert、delete）。\n\n这可能导致数据损坏 - 很可能无法恢复。","type":"content","url":"/sql-cheatsheet#id-5","position":19},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"修复在交易所手动出场后仍然开放的交易","lvl2":"破坏性查询"},"type":"lvl3","url":"/sql-cheatsheet#id-6","position":20},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"修复在交易所手动出场后仍然开放的交易","lvl2":"破坏性查询"},"content":"Warning\n\n在交易所手动卖出交易对不会被机器人检测到，它会尝试卖出。只要可能，应该使用 /forceexit  来完成同样的事情。\n\n强烈建议在进行任何手动更改之前备份你的数据库文件。\n\nNote\n\n在 /forceexit 之后，这应该不是必需的，因为 force_exit 订单会在下一次迭代时被机器人自动关闭。UPDATE trades\nSET is_open=0,\n  close_date=<close_date>,\n  close_rate=<close_rate>,\n  close_profit = close_rate / open_rate - 1,\n  close_profit_abs = (amount * <close_rate> * (1 - fee_close) - (amount * (open_rate * (1 - fee_open)))),\n  exit_reason=<exit_reason>\nWHERE id=<trade_ID_to_update>;","type":"content","url":"/sql-cheatsheet#id-6","position":21},{"hierarchy":{"lvl1":"SQL 助手","lvl4":"示例","lvl3":"修复在交易所手动出场后仍然开放的交易","lvl2":"破坏性查询"},"type":"lvl4","url":"/sql-cheatsheet#id-7","position":22},{"hierarchy":{"lvl1":"SQL 助手","lvl4":"示例","lvl3":"修复在交易所手动出场后仍然开放的交易","lvl2":"破坏性查询"},"content":"UPDATE trades\nSET is_open=0,\n  close_date='2020-06-20 03:08:45.103418',\n  close_rate=0.19638016,\n  close_profit=0.0496,\n  close_profit_abs = (amount * 0.19638016 * (1 - fee_close) - (amount * (open_rate * (1 - fee_open)))),\n  exit_reason='force_exit'  \nWHERE id=31;","type":"content","url":"/sql-cheatsheet#id-7","position":23},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"从数据库中删除交易","lvl2":"破坏性查询"},"type":"lvl3","url":"/sql-cheatsheet#id-8","position":24},{"hierarchy":{"lvl1":"SQL 助手","lvl3":"从数据库中删除交易","lvl2":"破坏性查询"},"content":"使用 RPC 方法删除交易\n\n考虑通过 telegram 或 rest API 使用 /delete <tradeid>。这是删除交易的推荐方式。\n\n如果你仍然想直接从数据库中删除交易，你可以使用下面的查询。\n\nDanger\n\n某些系统（Ubuntu）在其 sqlite3 包中禁用了外键。使用 sqlite 时 - 请确保通过在上面的查询之前运行 PRAGMA foreign_keys = ON 来启用外键。DELETE FROM trades WHERE id = <tradeid>;\n\nDELETE FROM trades WHERE id = 31;\n\nWarning\n\n这将从数据库中删除此交易。请确保你获得了正确的 id，并且永远不要在没有 where 子句的情况下运行此查询。","type":"content","url":"/sql-cheatsheet#id-8","position":25},{"hierarchy":{"lvl1":"止损配置指南"},"type":"lvl1","url":"/stoploss","position":0},{"hierarchy":{"lvl1":"止损配置指南"},"content":"","type":"content","url":"/stoploss","position":1},{"hierarchy":{"lvl1":"止损配置指南","lvl2":"止损"},"type":"lvl2","url":"/stoploss#id","position":2},{"hierarchy":{"lvl1":"止损配置指南","lvl2":"止损"},"content":"stoploss 配置参数是触发卖出的损失比率。\n例如，值 -0.10 将在给定交易的利润低于 -10% 时立即卖出。此参数是可选的。\n止损计算包括手续费，所以 -10% 的止损正好设置在入场点下方 10% 的位置。\n\n大多数策略文件已经包含了最优的 stoploss 值。\n\nNote\n\n本文件中提到的所有止损属性都可以在策略中或配置中设置。配置值将覆盖策略值。","type":"content","url":"/stoploss#id","position":3},{"hierarchy":{"lvl1":"止损配置指南","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"type":"lvl3","url":"/stoploss#id-freqtrade","position":4},{"hierarchy":{"lvl1":"止损配置指南","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"content":"这些止损模式可以是交易所止损或非交易所止损。\n\n这些模式可以使用以下值进行配置：    'emergency_exit': 'market',\n    'stoploss_on_exchange': False\n    'stoploss_on_exchange_interval': 60,\n    'stoploss_on_exchange_limit_ratio': 0.99\n\n交易所止损仅支持以下交易所，并非所有交易所都同时支持止损限价单和止损市价单。\n如果只提供一种模式，订单类型将被忽略。\n\n交易所\n\n止损类型\n\nBinance\n\n限价单\n\nBinance Futures\n\n市价单, 限价单\n\nBingx\n\n市价单, 限价单\n\nBitget\n\n市价单, 限价单\n\nHTX\n\n限价单\n\nkraken\n\n市价单, 限价单\n\nGate\n\n限价单\n\nOkx\n\n限价单\n\nKucoin\n\n止损限价单, 止损市价单\n\nHyperliquid (仅期货)\n\n限价单\n\n紧密止损\n\n使用交易所止损时，不要设置太低/太紧密的止损值！如果设置得太低/太紧密，您将面临更大的订单无法成交的风险，止损将无法正常工作。","type":"content","url":"/stoploss#id-freqtrade","position":5},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"stoploss_on_exchange 和 stoploss_on_exchange_limit_ratio","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"type":"lvl4","url":"/stoploss#stoploss-on-exchange-stoploss-on-exchange-limit-ratio","position":6},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"stoploss_on_exchange 和 stoploss_on_exchange_limit_ratio","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"content":"启用或禁用交易所止损。\n如果止损是交易所止损，意味着在买入订单成交后立即在交易所放置止损限价单。这将保护您免受市场突然崩盘的影响，因为订单执行完全在交易所内进行，没有潜在的网络开销。\n\n如果 stoploss_on_exchange 使用限价单，交易所需要两个价格：止损价格和限价。stoploss 定义了放置限价单的触发价格 - 而限价应该略低于这个价格。如果交易所同时支持限价和市价止损订单，则 stoploss 的值将用于确定止损类型。\n\n计算示例：我们以 100$ 买入资产。\n\n触发价格是 95$，那么限价将是 95 * 0.99 = 94.05\\$ - 所以限价单成交可能发生在 95$ 和 94.05$ 之间。\n\n例如，假设启用了交易所止损和追踪止损，且市场上涨，机器人会自动取消之前的止损订单，并放置一个新的止损值高于前一个止损订单的订单。\n\nNote\n\n如果启用了 stoploss_on_exchange 并且在交易所手动取消了止损，机器人将创建一个新的止损订单。","type":"content","url":"/stoploss#stoploss-on-exchange-stoploss-on-exchange-limit-ratio","position":7},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"stoploss_on_exchange_interval","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"type":"lvl4","url":"/stoploss#stoploss-on-exchange-interval","position":8},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"stoploss_on_exchange_interval","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"content":"在启用交易所止损的情况下，还有另一个参数叫做 stoploss_on_exchange_interval。这配置了机器人检查止损并在必要时更新的时间间隔（以秒为单位）。机器人不能每 5 秒（每次迭代）都这样做，否则会被交易所封禁。所以这个参数会告诉机器人应该多久更新一次止损订单。默认值是 60（1 分钟）。如果您意外取消了止损订单，这个逻辑也会在交易所重新应用止损订单。","type":"content","url":"/stoploss#stoploss-on-exchange-interval","position":9},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"stoploss_price_type","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"type":"lvl4","url":"/stoploss#stoploss-price-type","position":10},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"stoploss_price_type","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"content":"仅适用于期货\n\nstoploss_price_type 仅适用于期货市场（在支持的交易所上）。\nFreqtrade 将在启动时验证此设置，如果为您的交易所选择了无效设置，将无法启动。\n每个交易所支持的价格类型可能不同。请查看您的交易所支持哪些价格类型。\n\n期货市场的交易所止损可以在不同的价格类型上触发。\n这些价格在交易所术语中的命名通常不同，但通常围绕\"last\"（或\"contract price\"）、“mark\"和\"index”。\n\n此设置的可接受值为 \"last\"、\"mark\" 和 \"index\" - freqtrade 将自动转换为相应的 API 类型，并相应地放置\n\n交易所止损订单。","type":"content","url":"/stoploss#stoploss-price-type","position":11},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"force_exit","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"type":"lvl4","url":"/stoploss#force-exit","position":12},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"force_exit","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"content":"force_exit 是一个可选值，默认与 exit 相同，在从 Telegram 或 Rest API 发送 /forceexit 命令时使用。","type":"content","url":"/stoploss#force-exit","position":13},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"force_entry","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"type":"lvl4","url":"/stoploss#force-entry","position":14},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"force_entry","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"content":"force_entry 是一个可选值，默认与 entry 相同，在从 Telegram 或 Rest API 发送 /forceentry 命令时使用。","type":"content","url":"/stoploss#force-entry","position":15},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"emergency_exit","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"type":"lvl4","url":"/stoploss#emergency-exit","position":16},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"emergency_exit","lvl3":"交易所止损/Freqtrade","lvl2":"止损"},"content":"emergency_exit 是一个可选值，默认为 market，在创建交易所止损订单失败时使用。如果未在策略或配置文件中更改，则使用以下默认值。\n\n策略文件示例：order_types = {\n    \"entry\": \"limit\",\n    \"exit\": \"limit\",\n    \"emergency_exit\": \"market\",\n    \"stoploss\": \"market\",\n    \"stoploss_on_exchange\": True,\n    \"stoploss_on_exchange_interval\": 60,\n    \"stoploss_on_exchange_limit_ratio\": 0.99\n}","type":"content","url":"/stoploss#emergency-exit","position":17},{"hierarchy":{"lvl1":"止损配置指南","lvl3":"止损类型","lvl2":"止损"},"type":"lvl3","url":"/stoploss#id-1","position":18},{"hierarchy":{"lvl1":"止损配置指南","lvl3":"止损类型","lvl2":"止损"},"content":"目前机器人包含以下止损支持模式：\n\n静态止损。\n\n追踪止损。\n\n追踪止损，自定义正损失。\n\n仅在交易达到特定偏移量时追踪止损。\n\n自定义止损函数","type":"content","url":"/stoploss#id-1","position":19},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"静态止损","lvl3":"止损类型","lvl2":"止损"},"type":"lvl4","url":"/stoploss#id-2","position":20},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"静态止损","lvl3":"止损类型","lvl2":"止损"},"content":"这很简单，您定义一个止损值 x（作为价格的比率，即价格的 x * 100%）。一旦损失超过定义的损失，这将尝试卖出资产。\n\n止损示例：    stoploss = -0.10\n\n例如，简化计算：\n\n机器人以 100$ 的价格买入资产\n\n止损定义为 -10%\n\n一旦资产价格跌破 90$，止损将被触发","type":"content","url":"/stoploss#id-2","position":21},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"追踪止损","lvl3":"止损类型","lvl2":"止损"},"type":"lvl4","url":"/stoploss#trailing-stop-loss","position":22},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"追踪止损","lvl3":"止损类型","lvl2":"止损"},"content":"初始值就是 stoploss，就像您定义静态止损一样。\n要启用追踪止损：    stoploss = -0.10\n    trailing_stop = True\n\n这将激活一个算法，每当资产价格上涨时自动向上移动止损。\n\n例如，简化计算：\n\n机器人以 100$ 的价格买入资产\n\n止损定义为 -10%\n\n一旦资产价格跌破 90$，止损将被触发\n\n假设资产现在上涨到 102$\n\n止损现在将是 102$ 的 -10% = 91.8$\n\n现在资产价值下降到 101$，止损仍将是 91.8$，将在 91.8$ 触发。\n\n总结：止损将调整为始终是最高观察价格的 -10%。","type":"content","url":"/stoploss#trailing-stop-loss","position":23},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"追踪止损，不同的正损失","lvl3":"止损类型","lvl2":"止损"},"type":"lvl4","url":"/stoploss#trailing-stop-loss-different-positive-loss","position":24},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"追踪止损，不同的正损失","lvl3":"止损类型","lvl2":"止损"},"content":"您也可以在买入亏损时（买入 - 手续费）使用默认止损，但一旦达到正收益（或您定义的偏移量），系统将使用具有不同值的新止损。\n例如，您的默认止损是 -10%，但一旦达到盈利（例如 0.1%），将使用不同的追踪止损。\n\nNote\n\n如果您希望止损仅在达到盈亏平衡或盈利时改变（大多数用户想要的），请参考下一节\n\n启用偏移量。\n\n这两个值都需要将 trailing_stop 设置为 true，并设置 trailing_stop_positive 的值。    stoploss = -0.10\n    trailing_stop = True\n    trailing_stop_positive = 0.02\n    trailing_stop_positive_offset = 0.0\n    trailing_only_offset_is_reached = False  # 默认值 - 此示例不需要\n\n例如，简化计算：\n\n机器人以 100$ 的价格买入资产\n\n止损定义为 -10%\n\n一旦资产价格跌破 90$，止损将被触发\n\n假设资产现在上涨到 102$\n\n止损现在将是 102$ 的 -2% = 99.96$（99.96$ 的止损将被锁定，并随着资产价格上涨以 -2% 跟随）\n\n现在资产价值下降到 101$，止损仍将是 99.96$，将在 99.96$ 触发\n\n0.02 将转换为 -2% 的止损。\n在此之前，使用 stoploss 作为追踪止损。\n\n使用偏移量改变止损\n\n使用 trailing_stop_positive_offset 通过将 trailing_stop_positive_offset 设置得高于 trailing_stop_positive 来确保您的新追踪止损将获得利润。您的第一个新止损值将已经锁定利润。\n\n简化计算示例：    stoploss = -0.10\n    trailing_stop = True\n    trailing_stop_positive = 0.02\n    trailing_stop_positive_offset = 0.03\n\n机器人以 100$ 的价格买入资产\n\n止损定义为 -10%，所以一旦资产价格跌破 90$，止损将被触发\n\n假设资产现在上涨到 102$\n\n止损现在将在 91.8$ - 最高观察价格的 10% 下方\n\n假设资产现在上涨到 103.5$（高于配置的偏移量）\n\n止损现在将是 103.5$ 的 -2% = 101.43$\n\n现在资产价值下降到 102$，止损仍将是 101.43$，一旦价格跌破 101.43$ 将触发","type":"content","url":"/stoploss#trailing-stop-loss-different-positive-loss","position":25},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"仅在交易达到特定偏移量时追踪止损","lvl3":"止损类型","lvl2":"止损"},"type":"lvl4","url":"/stoploss#trailing-stop-loss-only-once-the-trade-has-reached-a-certain-offset","position":26},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"仅在交易达到特定偏移量时追踪止损","lvl3":"止损类型","lvl2":"止损"},"content":"您也可以保持静态止损直到达到偏移量，然后在市场转向时追踪交易以获取利润。\n\n如果 trailing_only_offset_is_reached = True，则只有在达到偏移量时才会激活追踪止损。在此之前，止损保持在配置的 stoploss 值，不会追踪。\n将此值保持为 trailing_only_offset_is_reached=False 将允许追踪止损在资产价格首次上涨超过初始入场价格时就开始追踪。\n\n此选项可以与 trailing_stop_positive 一起使用或不使用，但使用 trailing_stop_positive_offset 作为偏移量。\n\n配置（偏移量是买入价格 + 3%）：    stoploss = -0.10\n    trailing_stop = True\n    trailing_stop_positive = 0.02\n    trailing_stop_positive_offset = 0.03\n    trailing_only_offset_is_reached = True\n\n例如，简化计算：\n\n机器人以 100$ 的价格买入资产\n\n止损定义为 -10%\n\n一旦资产价格跌破 90$，止损将被触发\n\n除非资产上涨到或超过配置的偏移量，否则止损将保持在 90$\n\n假设资产现在上涨到 103$（我们配置偏移量的位置）\n\n止损现在将是 103$ 的 -2% = 100.94$\n\n现在资产价值下降到 101$，止损仍将是 100.94$，将在 100.94$ 触发\n\nTip\n\n确保此值（trailing_stop_positive_offset）低于最小 ROI，否则最小 ROI 将首先应用并卖出交易。","type":"content","url":"/stoploss#trailing-stop-loss-only-once-the-trade-has-reached-a-certain-offset","position":27},{"hierarchy":{"lvl1":"止损配置指南","lvl3":"止损和杠杆","lvl2":"止损"},"type":"lvl3","url":"/stoploss#id-3","position":28},{"hierarchy":{"lvl1":"止损配置指南","lvl3":"止损和杠杆","lvl2":"止损"},"content":"止损应该被视为\"这笔交易的风险\" - 所以在 100$ 的交易上设置 10% 的止损意味着您愿意在这笔交易上损失 10$（10%）- 如果价格下跌 10%，这将触发。\n\n使用杠杆时，应用相同的原则 - 止损定义交易的风险（您愿意损失的金额）。\n\n因此，在 10 倍杠杆交易上设置 10% 的止损将在价格移动 1% 时触发。\n如果您的投资金额（自有资金）是 100$ - 这笔交易在 10 倍杠杆下将是 1000$。\n如果价格移动 1% - 您已经损失了 10$ 的自有资金 - 因此在这种情况下止损将触发。\n\n请确保了解这一点，并避免使用太紧密的止损（在 10 倍杠杆下，10% 的风险可能太小，无法让交易有\"呼吸\"的空间）。","type":"content","url":"/stoploss#id-3","position":29},{"hierarchy":{"lvl1":"止损配置指南","lvl3":"更改开放交易的止损","lvl2":"止损"},"type":"lvl3","url":"/stoploss#id-4","position":30},{"hierarchy":{"lvl1":"止损配置指南","lvl3":"更改开放交易的止损","lvl2":"止损"},"content":"可以通过更改配置或策略中的值并使用 /reload_config 命令来更改开放交易的止损（或者，完全停止并重启机器人也可以）。\n\n新的止损值将应用于开放交易（并生成相应的日志消息）。","type":"content","url":"/stoploss#id-4","position":31},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"限制","lvl3":"更改开放交易的止损","lvl2":"止损"},"type":"lvl4","url":"/stoploss#id-5","position":32},{"hierarchy":{"lvl1":"止损配置指南","lvl4":"限制","lvl3":"更改开放交易的止损","lvl2":"止损"},"content":"如果启用了 trailing_stop 且止损已经被调整，或者如果启用了 \n\nEdge（因为 Edge 会根据当前市场情况重新计算止损），则无法更改止损值。","type":"content","url":"/stoploss#id-5","position":33},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南"},"type":"lvl1","url":"/strategy-101","position":0},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南"},"content":"","type":"content","url":"/strategy-101","position":1},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl2","url":"/strategy-101#freqtrade-101","position":2},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"本快速入门假设你已了解交易基础，并已阅读 \n\nFreqtrade 基础 页面。","type":"content","url":"/strategy-101#freqtrade-101","position":3},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"必备知识","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl3","url":"/strategy-101#id","position":4},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"必备知识","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"在 Freqtrade 中，策略是一个 Python 类，用于定义买入和卖出加密货币“资产”的逻辑。\n\n资产通过 pairs（交易对）定义，代表“币种”和“计价币”。币种是你用另一种货币作为计价币进行交易的资产。\n\n交易所提供的数据以 K线（candles）形式给出，每根 K 线包含六个值：date、open、high、low、close 和 volume。\n\n技术分析（Technical analysis）函数通过各种计算和统计公式分析 K 线数据，生成称为“指标”（indicators）的二级值。\n\n指标在交易对的 K 线上被分析，用于生成“信号”（signals）。\n\n信号会在加密货币“交易所”上转化为“订单”（orders），即“交易”（trades）。\n\n我们使用“进场”（entry）和“出场”（exit）来代替“买入”和“卖出”，因为 Freqtrade 同时支持“多头”（long）和“空头”（short）交易。\n\n多头（long）：你用计价币买入币种，例如用 USDT 买入 BTC，之后以高于买入价的价格卖出获利。多头交易的盈利来自币种相对计价币的升值。\n\n空头（short）：你从交易所借入币种，之后以更低的价格买回并归还，赚取差价。空头交易的盈利来自币种相对计价币的贬值（你以更低的价格还清借款）。\n\n虽然 Freqtrade 支持部分交易所的现货和合约市场，但为简化起见，本教程仅关注现货（多头）交易。","type":"content","url":"/strategy-101#id","position":5},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl3","url":"/strategy-101#id-1","position":6},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"","type":"content","url":"/strategy-101#id-1","position":7},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"主数据帧(dataframe)","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl4","url":"/strategy-101#id-dataframe","position":8},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"主数据帧(dataframe)","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"Freqtrade 策略使用一种带有行和列的表格数据结构，称为 数据帧(dataframe)，用于生成进出场信号。\n\n你配置的每个交易对都有自己的数据帧。\n\n数据帧以 date 列为索引，例如 2024-06-31 12:00。\n\n接下来的 5 列分别代表 open、high、low、close 和 volume（OHLCV）数据。","type":"content","url":"/strategy-101#id-dataframe","position":9},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"填充指标值(populate_indicators)","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl4","url":"/strategy-101#id-populate-indicators","position":10},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"填充指标值(populate_indicators)","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"populate_indicators 函数会向数据帧添加代表技术分析指标值的列。\n\n常见指标包括相对强弱指数（RSI）、布林带（Bollinger Bands）、资金流指数（MFI）、均线（MA）、平均真实波幅（ATR）等。\n\n通过调用技术分析函数（如 ta-lib 的 RSI 函数 ta.RSI()）并赋值给某列名（如 rsi），即可向数据帧添加指标列：dataframe['rsi'] = ta.RSI(dataframe)\n\n技术分析库\n\n不同的库生成指标值的方式不同。请查阅各自文档了解如何集成到你的策略中。你也可以参考 \n\nFreqtrade 示例策略 获取灵感。","type":"content","url":"/strategy-101#id-populate-indicators","position":11},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"填充进场信号(populate_entry_trend)","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl4","url":"/strategy-101#id-populate-entry-trend","position":12},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"填充进场信号(populate_entry_trend)","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"populate_entry_trend 函数定义进场信号的条件。\n\n数据帧会新增 enter_long 列，当该列值为 1 时，Freqtrade 视为进场信号。\n\n做空\n\n若要做空交易，请使用 enter_short 列。","type":"content","url":"/strategy-101#id-populate-entry-trend","position":13},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"填充出场信号(populate_exit_trend)","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl4","url":"/strategy-101#id-populate-exit-trend","position":14},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"填充出场信号(populate_exit_trend)","lvl3":"基础策略结构","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"populate_exit_trend 函数定义出场信号的条件。\n\n数据帧会新增 exit_long 列，当该列值为 1 时，Freqtrade 视为出场信号。\n\n做空\n\n若要做空平仓，请使用 exit_short 列。","type":"content","url":"/strategy-101#id-populate-exit-trend","position":15},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"一个简单的策略","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl3","url":"/strategy-101#id-2","position":16},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"一个简单的策略","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"下面是一个最小化的 Freqtrade 策略示例：from freqtrade.strategy import IStrategy\nfrom pandas import DataFrame\nimport talib.abstract as ta\n\nclass MyStrategy(IStrategy):\n\n    timeframe = '15m'\n\n    # 初始止损设为 -10%\n    stoploss = -0.10\n\n    # 盈利大于 1% 时随时出场\n    minimal_roi = {\"0\": 0.01}\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # 生成技术分析指标值\n        dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)\n\n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # 根据指标值生成进场信号\n        dataframe.loc[\n            (dataframe['rsi'] < 30),\n            'enter_long'] = 1\n\n        return dataframe\n\n    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # 根据指标值生成出场信号\n        dataframe.loc[\n            (dataframe['rsi'] > 70),\n            'exit_long'] = 1\n\n        return dataframe","type":"content","url":"/strategy-101#id-2","position":17},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"交易执行","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl3","url":"/strategy-101#id-3","position":18},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"交易执行","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"当检测到信号（进场或出场列为 1）时，Freqtrade 会尝试下单，即创建一个 trade 或 position。\n\n每个新交易会占用一个“槽位”（slot）。槽位代表可同时开启的新交易最大数量。\n\n槽位数量由 max_open_trades \n\n配置项 决定。\n\n但在以下情况下，生成信号未必会创建交易订单，包括：\n\n剩余计价币不足以买入资产，或钱包中无足够资产卖出（包括手续费）\n\n剩余可用槽位不足（已开仓数量等于 max_open_trades）\n\n某交易对已有持仓（Freqtrade 不支持同一对叠加持仓，但可\n\n调整已有持仓）\n\n同一根 K 线上同时出现进场和出场信号，视为\n\n信号冲突，不会下单\n\n策略通过相关 \n\nentry 或 \n\nexit 回调主动拒绝下单\n\n更多细节请阅读 \n\n策略自定义 文档。","type":"content","url":"/strategy-101#id-3","position":19},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"回测与前向测试","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl3","url":"/strategy-101#id-4","position":20},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"回测与前向测试","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"策略开发可能漫长且令人沮丧，因为将人的“直觉”转化为可运行的计算机策略（“量化”）并不总是直观的。\n\n因此，策略应经过测试以验证其是否按预期工作。\n\nFreqtrade 提供两种测试模式：\n\n回测（backtesting）：使用你\n\n从交易所下载的历史数据，回测可快速评估策略表现。但结果很容易被扭曲，使策略看起来比实际更赚钱。详见\n\n回测文档。\n\n模拟盘（dry run）：也称“前向测试”，用实时数据，但不会在交易所实际下单，只在 Freqtrade 内部跟踪信号和交易。前向测试实时运行，结果更可靠但耗时更长。\n\n通过在 \n\n配置文件 中将 dry_run 设为 true 启用模拟盘。\n\n回测结果可能极不准确\n\n回测结果与实际可能有很大差异。请查阅\n\n回测假设和\n\n常见策略错误。\n\n一些网站展示的 Freqtrade 策略回测结果很亮眼，但请勿认为这些结果可实现或真实。\n\n有用的命令\n\nFreqtrade 提供两个有用命令检查策略基本缺陷：\n\nlookahead-analysis 和 \n\nrecursive-analysis。","type":"content","url":"/strategy-101#id-4","position":21},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"评估回测与模拟盘结果","lvl3":"回测与前向测试","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl4","url":"/strategy-101#id-5","position":22},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"评估回测与模拟盘结果","lvl3":"回测与前向测试","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"回测后务必用模拟盘运行策略，比较两者结果是否足够接近。\n\n如有明显差异，请检查进出场信号在两种模式下是否一致且出现在同一根 K 线上。但 dry run 和回测之间总会有差异：\n\n回测假定所有订单都成交。dry run 下若用限价单或交易所无成交量，可能无法成交。\n\n回测在信号出现的 K 线收盘后，假定以下一根 K 线开盘价进场（除非策略有自定义定价回调）。dry run 下信号到实际下单有延迟。这是因为新 K 线到来时，Freqtrade 需分析所有交易对数据，实际下单会比 K 线开盘稍有延迟。\n\ndry run 下的进场价格可能与回测不同，导致收益计算也不同。因此 ROI、止损、追踪止损和回调出场等结果不完全一致很正常。\n\n计算机处理新 K 线和信号、下单的延迟越大，价格波动越不可控。请确保你的电脑能在合理时间内处理所有交易对数据。若数据处理延迟严重，Freqtrade 会在日志中警告。","type":"content","url":"/strategy-101#id-5","position":23},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"控制和监控运行中的机器人","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl3","url":"/strategy-101#id-6","position":24},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"控制和监控运行中的机器人","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"机器人在 dry run 或实盘模式下运行时，Freqtrade 提供六种控制和监控方式：\n\nFreqUI：最易上手的 Web 界面，可查看和控制机器人当前活动。\n\nTelegram：在移动设备上集成 Telegram，可接收机器人活动提醒并控制部分功能。\n\nFTUI：命令行界面，仅用于监控运行中的机器人。\n\nfreqtrade-client：Python 实现的 REST API 客户端，便于在 Python 应用或命令行中请求和消费机器人响应。\n\nREST API 接口：REST API 允许开发者自定义工具与 Freqtrade 机器人交互。\n\nWebhooks：Freqtrade 可通过 webhook 向其他服务（如 discord）发送信息。","type":"content","url":"/strategy-101#id-6","position":25},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"日志","lvl3":"控制和监控运行中的机器人","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl4","url":"/strategy-101#id-7","position":26},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl4":"日志","lvl3":"控制和监控运行中的机器人","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"Freqtrade 会生成详细的调试日志，帮助你了解机器人运行状况。请熟悉日志中的信息和错误消息。\n\n日志默认输出到标准输出（命令行）。如需写入文件，许多 freqtrade 命令（包括 trade）支持 --logfile 选项。\n\n示例请查阅 \n\nFAQ。","type":"content","url":"/strategy-101#id-7","position":27},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"最后的思考","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl3","url":"/strategy-101#id-8","position":28},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"最后的思考","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"量化交易很难，大多数公开策略表现并不好，因为要让策略在多种场景下持续盈利需要大量时间和精力。\n\n因此，直接用公开策略并通过回测评估表现往往问题多多。但 Freqtrade 提供了多种工具，帮助你做出决策并尽职调查。\n\n盈利的方式有很多，没有任何单一技巧或配置能让表现不佳的策略变好。\n\nFreqtrade 是一个开源平台，拥有庞大且乐于助人的社区——欢迎加入我们的 \n\ndiscord 频道 与他人交流你的策略！\n\n始终只投资你愿意失去的资金。","type":"content","url":"/strategy-101#id-8","position":29},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"总结","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"type":"lvl3","url":"/strategy-101#id-9","position":30},{"hierarchy":{"lvl1":"Freqtrade 策略开发指南","lvl3":"总结","lvl2":"Freqtrade 策略 101：策略开发快速入门"},"content":"在 Freqtrade 中开发策略，就是基于技术指标定义进出场信号。按照上述结构和方法，你可以创建并测试自己的交易策略。\n\n常见问题可在我们的 \n\nFAQ 查阅。\n\n欲深入了解，请参考更详细的 \n\nFreqtrade 策略自定义文档。","type":"content","url":"/strategy-101#id-9","position":31},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南"},"type":"lvl1","url":"/strategy-advanced","position":0},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南"},"content":"","type":"content","url":"/strategy-advanced","position":1},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl2":"高级策略"},"type":"lvl2","url":"/strategy-advanced#id","position":2},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl2":"高级策略"},"content":"本页解释了一些可用于策略的高级概念。\n如果你是初学者，请先熟悉 \n\nFreqtrade 基础 和 \n\n策略定制 中描述的方法。\n\n这里描述的方法的调用顺序在 \n\n机器人执行逻辑 中有详细说明。这些文档也有助于决定哪种方法最适合你的定制需求。\n\nNote\n\n回调方法应该只在策略使用它们时实现。\n\nTip\n\n通过运行 freqtrade new-strategy --strategy MyAwesomeStrategy --template advanced 来获取包含所有可用回调方法的策略模板","type":"content","url":"/strategy-advanced#id","position":3},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"存储信息（持久化）","lvl2":"高级策略"},"type":"lvl3","url":"/strategy-advanced#id-1","position":4},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"存储信息（持久化）","lvl2":"高级策略"},"content":"Freqtrade 允许在数据库中存储/检索与特定交易相关的用户自定义信息。\n\n使用交易对象，可以使用 trade.set_custom_data(key='my_key', value=my_value) 存储信息，使用 trade.get_custom_data(key='my_key') 检索信息。每个数据条目都与一个交易和一个用户提供的键（类型为 string）相关联。这意味着这只能在也提供交易对象的回调中使用。\n\n为了使数据能够存储在数据库中，freqtrade 必须序列化数据。这是通过将数据转换为 JSON 格式的字符串来完成的。\nFreqtrade 将在检索时尝试反转此操作，因此从策略的角度来看，这应该无关紧要。from freqtrade.persistence import Trade\nfrom datetime import timedelta\n\nclass AwesomeStrategy(IStrategy):\n\n    def bot_loop_start(self, **kwargs) -> None:\n        for trade in Trade.get_open_order_trades():\n            fills = trade.select_filled_orders(trade.entry_side)\n            if trade.pair == 'ETH/USDT':\n                trade_entry_type = trade.get_custom_data(key='entry_type')\n                if trade_entry_type is None:\n                    trade_entry_type = 'breakout' if 'entry_1' in trade.enter_tag else 'dip'\n                elif fills > 1:\n                    trade_entry_type = 'buy_up'\n                trade.set_custom_data(key='entry_type', value=trade_entry_type)\n        return super().bot_loop_start(**kwargs)\n\n    def adjust_entry_price(self, trade: Trade, order: Order | None, pair: str,\n                           current_time: datetime, proposed_rate: float, current_order_rate: float,\n                           entry_tag: str | None, side: str, **kwargs) -> float:\n        # 对于 BTC/USDT 交易对，在入场触发后的前 10 分钟内使用限价单并跟随 SMA200 作为价格目标。\n        if (\n            pair == 'BTC/USDT' \n            and entry_tag == 'long_sma200' \n            and side == 'long' \n            and (current_time - timedelta(minutes=10)) > trade.open_date_utc \n            and order.filled == 0.0\n        ):\n            dataframe, _ = self.dp.get_analyzed_dataframe(pair=pair, timeframe=self.timeframe)\n            current_candle = dataframe.iloc[-1].squeeze()\n            # 存储入场调整信息\n            existing_count = trade.get_custom_data('num_entry_adjustments', default=0)\n            if not existing_count:\n                existing_count = 1\n            else:\n                existing_count += 1\n            trade.set_custom_data(key='num_entry_adjustments', value=existing_count)\n\n            # 调整订单价格\n            return current_candle['sma_200']\n\n        # 默认：维持现有订单\n        return current_order_rate\n\n    def custom_exit(self, pair: str, trade: Trade, current_time: datetime, current_rate: float, current_profit: float, **kwargs):\n\n        entry_adjustment_count = trade.get_custom_data(key='num_entry_adjustments')\n        trade_entry_type = trade.get_custom_data(key='entry_type')\n        if entry_adjustment_count is None:\n            if current_profit > 0.01 and (current_time - timedelta(minutes=100) > trade.open_date_utc):\n                return True, 'exit_1'\n        else\n            if entry_adjustment_count > 0 and if current_profit > 0.05:\n                return True, 'exit_2'\n            if trade_entry_type == 'breakout' and current_profit > 0.1:\n                return True, 'exit_3\n\n        return False, None\n\n上面是一个简单的例子 - 有更简单的方法来检索交易数据，如入场调整。\n\nNote\n\n建议使用简单的数据类型 [bool, int, float, str] 以确保序列化需要存储的数据时不会出现问题。\n\n存储大量数据可能会导致意外的副作用，如数据库变大（因此也会变慢）。\n\n不可序列化的数据\n\n如果提供的数据无法序列化，将记录警告，并且指定 key 的条目将包含 None 作为数据。\n\n所有属性\n\n通过 Trade 对象（下面假设为 trade）可以访问以下自定义数据访问器：\n\ntrade.get_custom_data(key='something', default=0) - 返回以提供的类型给出的实际值。\n\ntrade.get_custom_data_entry(key='something') - 返回条目 - 包括元数据。可以通过 .value 属性访问值。\n\ntrade.set_custom_data(key='something', value={'some': 'value'}) - 设置或更新此交易的相应键。值必须是可序列化的 - 我们建议保持存储的数据相对较小。\n\n“value” 可以是任何类型（在设置和接收时都是）- 但必须是 json 可序列化的。","type":"content","url":"/strategy-advanced#id-1","position":5},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"存储信息（非持久化）","lvl2":"高级策略"},"type":"lvl3","url":"/strategy-advanced#id-2","position":6},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"存储信息（非持久化）","lvl2":"高级策略"},"content":"已弃用\n\n这种存储信息的方法已弃用，我们建议不要使用非持久化存储。\n请改用\n\n持久化存储。\n\n因此其内容已被折叠。\n\n存储信息\n\n可以通过在策略类中创建新字典来存储信息。\n\n变量的名称可以随意选择，但应该以 custom_ 为前缀，以避免与预定义的策略变量发生命名冲突。class AwesomeStrategy(IStrategy):\n    # 创建自定义字典\n    custom_info = {}\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # 检查条目是否已存在\n        if not metadata[\"pair\"] in self.custom_info:\n            # 为此交易对创建空条目\n            self.custom_info[metadata[\"pair\"]] = {}\n\n        if \"crosstime\" in self.custom_info[metadata[\"pair\"]]:\n            self.custom_info[metadata[\"pair\"]][\"crosstime\"] += 1\n        else:\n            self.custom_info[metadata[\"pair\"]][\"crosstime\"] = 1\n\nWarning\n\n数据在机器人重启（或配置重载）后不会持久化。此外，数据量应该保持较小（不要使用 DataFrame 等），否则机器人将开始消耗大量内存，最终耗尽内存并崩溃。\n\nNote\n\n如果数据是特定于交易对的，请确保在字典中使用交易对作为键之一。","type":"content","url":"/strategy-advanced#id-2","position":7},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"数据框访问","lvl2":"高级策略"},"type":"lvl3","url":"/strategy-advanced#id-3","position":8},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"数据框访问","lvl2":"高级策略"},"content":"你可以通过从数据提供者查询来在各种策略函数中访问数据框。from freqtrade.exchange import timeframe_to_prev_date\n\nclass AwesomeStrategy(IStrategy):\n    def confirm_trade_exit(self, pair: str, trade: 'Trade', order_type: str, amount: float,\n                           rate: float, time_in_force: str, exit_reason: str,\n                           current_time: 'datetime', **kwargs) -> bool:\n        # 获取交易对数据框。\n        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n\n        # 获取最后一个可用的蜡烛图。不要使用 current_time 查找最新的蜡烛图，因为\n        # current_time 指向当前未完成的蜡烛图，其数据不可用。\n        last_candle = dataframe.iloc[-1].squeeze()\n        # <...>\n\n        # 在模拟/实盘运行中，交易开始日期不会匹配蜡烛图开始日期，因此必须\n        # 进行四舍五入。\n        trade_date = timeframe_to_prev_date(self.timeframe, trade.open_date_utc)\n        # 查找交易蜡烛图。\n        trade_candle = dataframe.loc[dataframe['date'] == trade_date]\n        # 对于刚刚开始的交易，trade_candle 可能为空，因为它仍然未完成。\n        if not trade_candle.empty:\n            trade_candle = trade_candle.squeeze()\n            # <...>\n\n使用 .iloc[-1]\n\n你可以在这里使用 .iloc[-1]，因为 get_analyzed_dataframe() 只返回回测允许看到的蜡烛图。\n\n这在 populate_* 方法中不起作用，所以确保不要在该区域使用 .iloc[]。\n\n此外，这只能从 2021.5 版本开始工作。","type":"content","url":"/strategy-advanced#id-3","position":9},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"入场标签","lvl2":"高级策略"},"type":"lvl3","url":"/strategy-advanced#id-4","position":10},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"入场标签","lvl2":"高级策略"},"content":"当你的策略有多个买入信号时，你可以命名触发的信号。\n然后你可以在 custom_exit 中访问你的买入信号def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            (dataframe['rsi'] < 35) &\n            (dataframe['volume'] > 0)\n        ),\n        ['enter_long', 'enter_tag']] = (1, 'buy_signal_rsi')\n\n    return dataframe\n\ndef custom_exit(self, pair: str, trade: Trade, current_time: datetime, current_rate: float,\n                current_profit: float, **kwargs):\n    dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n    last_candle = dataframe.iloc[-1].squeeze()\n    if trade.enter_tag == 'buy_signal_rsi' and last_candle['rsi'] > 80:\n        return 'sell_signal_rsi'\n    return None\n\n\nNote\n\nenter_tag 限制为 100 个字符，剩余数据将被截断。\n\nWarning\n\n只有一个 enter_tag 列，用于做多和做空交易。\n\n因此，必须将此列视为\"最后写入获胜\"（毕竟它只是一个数据框列）。\n\n在复杂的情况下，当多个信号冲突（或如果信号基于不同条件再次停用）时，这可能导致奇怪的结果，错误的标签应用于入场信号。\n\n这些结果是策略覆盖先前标签的结果 - 最后一个标签将\"粘住\"，并将是 freqtrade 使用的标签。","type":"content","url":"/strategy-advanced#id-4","position":11},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"出场标签","lvl2":"高级策略"},"type":"lvl3","url":"/strategy-advanced#id-5","position":12},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"出场标签","lvl2":"高级策略"},"content":"类似于\n\n入场标签，你也可以指定出场标签。def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            (dataframe['rsi'] > 70) &\n            (dataframe['volume'] > 0)\n        ),\n        ['exit_long', 'exit_tag']] = (1, 'exit_rsi')\n\n    return dataframe\n\n提供的出场标签然后用作卖出原因 - 并在回测结果中显示为如此。\n\nNote\n\nexit_reason 限制为 100 个字符，剩余数据将被截断。","type":"content","url":"/strategy-advanced#id-5","position":13},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"策略版本","lvl2":"高级策略"},"type":"lvl3","url":"/strategy-advanced#id-6","position":14},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"策略版本","lvl2":"高级策略"},"content":"你可以通过使用 “version” 方法来实现自定义策略版本控制，并返回你希望此策略具有的版本。def version(self) -> str:\n    \"\"\"\n    返回策略的版本。\n    \"\"\"\n    return \"1.1\"\n\nNote\n\n你应该确保同时实现适当的版本控制（如 git 仓库），因为 freqtrade 不会保留你的策略的历史版本，所以由用户负责能够最终回滚到策略的先前版本。","type":"content","url":"/strategy-advanced#id-6","position":15},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"派生策略","lvl2":"高级策略"},"type":"lvl3","url":"/strategy-advanced#id-7","position":16},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"派生策略","lvl2":"高级策略"},"content":"策略可以从其他策略派生。这避免了自定义策略代码的重复。你可以使用这种技术来覆盖主策略的小部分，保持其余部分不变：class MyAwesomeStrategy(IStrategy):\n    ...\n    stoploss = 0.13\n    trailing_stop = False\n    # 所有其他属性和方法都在这里，就像\n    # 在任何自定义策略中一样...\n    ...\nfrom myawesomestrategy import MyAwesomeStrategy\nclass MyAwesomeStrategy2(MyAwesomeStrategy):\n    # 覆盖某些内容\n    stoploss = 0.08\n    trailing_stop = True\n\n属性和方法都可以被覆盖，以你需要的方式改变原始策略的行为。\n\n虽然在技术上可以在同一文件中保持子类，但这可能会导致超优化参数文件的一些问题，因此我们建议使用单独的策略文件，并如上所示导入父策略。","type":"content","url":"/strategy-advanced#id-7","position":17},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"嵌入策略","lvl2":"高级策略"},"type":"lvl3","url":"/strategy-advanced#id-8","position":18},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"嵌入策略","lvl2":"高级策略"},"content":"Freqtrade 为你提供了一种简单的方法来将策略嵌入到配置文件中。\n这是通过利用 BASE64 编码并在你选择的配置文件的策略配置字段中提供此字符串来完成的。","type":"content","url":"/strategy-advanced#id-8","position":19},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl4":"将字符串编码为 BASE64","lvl3":"嵌入策略","lvl2":"高级策略"},"type":"lvl4","url":"/strategy-advanced#id-base64","position":20},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl4":"将字符串编码为 BASE64","lvl3":"嵌入策略","lvl2":"高级策略"},"content":"这是一个快速示例，如何在 python 中生成 BASE64 字符串from base64 import urlsafe_b64encode\n\nwith open(file, 'r') as f:\n    content = f.read()\ncontent = urlsafe_b64encode(content.encode('utf-8'))\n\n变量 ‘content’ 将包含 BASE64 编码形式的策略文件。现在可以在配置文件中设置如下\"strategy\": \"NameOfStrategy:BASE64String\"\n\n请确保 ‘NameOfStrategy’ 与策略名称完全相同！","type":"content","url":"/strategy-advanced#id-base64","position":21},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"性能警告","lvl2":"高级策略"},"type":"lvl3","url":"/strategy-advanced#id-9","position":22},{"hierarchy":{"lvl1":"Freqtrade 高级策略指南","lvl3":"性能警告","lvl2":"高级策略"},"content":"在执行策略时，有时会在日志中看到以下内容\n\nPerformanceWarning: DataFrame is highly fragmented.\n\n这是来自 \n\npandas 的警告，正如警告继续说的：\n使用 pd.concat(axis=1)。\n这可能会有轻微的性能影响，通常只在超优化期间可见（在优化指标时）。\n\n例如：for val in self.buy_ema_short.range:\n    dataframe[f'ema_short_{val}'] = ta.EMA(dataframe, timeperiod=val)\n\n应该重写为frames = [dataframe]\nfor val in self.buy_ema_short.range:\n    frames.append(DataFrame({\n        f'ema_short_{val}': ta.EMA(dataframe, timeperiod=val)\n    }))\n\n# 组合所有数据框，并重新分配原始数据框列\ndataframe = pd.concat(frames, axis=1)\n\n然而，Freqtrade 通过在 populate_indicators() 方法之后立即运行 dataframe.copy() 来抵消这一点 - 因此这的性能影响应该很低或不存在。","type":"content","url":"/strategy-advanced#id-9","position":23},{"hierarchy":{"lvl1":"策略回调指南"},"type":"lvl1","url":"/strategy-callbacks","position":0},{"hierarchy":{"lvl1":"策略回调指南"},"content":"","type":"content","url":"/strategy-callbacks","position":1},{"hierarchy":{"lvl1":"策略回调指南","lvl2":"策略回调"},"type":"lvl2","url":"/strategy-callbacks#id","position":2},{"hierarchy":{"lvl1":"策略回调指南","lvl2":"策略回调"},"content":"虽然主要的策略函数（populate_indicators(), populate_entry_trend(), populate_exit_trend()) ）应以向量化方式使用，并且只会在\n\n回测时调用一次，但回调函数会在\"需要时\"被调用。\n\n因此，你应避免在回调中进行繁重的计算，以免在操作过程中造成延迟。\n\n根据所用回调的不同，它们可能在进入/退出交易时调用，或在交易期间多次调用。\n当前可用的回调有：\n\n机器人启动 bot_start()\n\n机器人循环开始 bot_loop_start()\n\n仓位大小管理 custom_stake_amount()\n\n自定义退出信号 custom_exit()\n\n自定义止损 custom_stoploss()\n\ncustom_entry_price() 和 custom_exit_price()\n\ncheck_entry_timeout() 和 check_exit_timeout()\n\nconfirm_trade_entry()\n\nconfirm_trade_exit()\n\nadjust_trade_position()\n\nadjust_entry_price()\n\nleverage()\n\norder_filled()\n\n回调调用顺序\n\n你可以在 \n\nbot-basics 中找到回调的调用顺序\n\n","type":"content","url":"/strategy-callbacks#id","position":3},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"策略所需的导入","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-1","position":4},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"策略所需的导入","lvl2":"策略回调"},"content":"在创建策略时，你需要导入必要的模块和类。以下是一个策略所需的导入：\n\n默认情况下，我们建议使用以下导入作为策略的基础：\n这将涵盖 freqtrade 功能所需的所有导入。\n当然，你可以根据需要添加更多导入。# flake8: noqa: F401\n# isort: skip_file\n# --- Do not remove these imports ---\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta, timezone\nfrom pandas import DataFrame\nfrom typing import Dict, Optional, Union, Tuple\n\nfrom freqtrade.strategy import (\n    IStrategy,\n    Trade, \n    Order,\n    PairLocks,\n    informative,  # @informative decorator\n    # Hyperopt Parameters\n    BooleanParameter,\n    CategoricalParameter,\n    DecimalParameter,\n    IntParameter,\n    RealParameter,\n    # timeframe helpers\n    timeframe_to_minutes,\n    timeframe_to_next_date,\n    timeframe_to_prev_date,\n    # Strategy helper functions\n    merge_informative_pair,\n    stoploss_from_absolute,\n    stoploss_from_open,\n)\n\n# --------------------------------\n# Add your lib to import here\nimport talib.abstract as ta\nfrom technical import qtpylib\n\n","type":"content","url":"/strategy-callbacks#id-1","position":5},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"退出逻辑比较","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-2","position":6},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"退出逻辑比较","lvl2":"策略回调"},"content":"Freqtrade 允许你的策略使用基于信号或基于回调的函数来实现不同的退出逻辑。\n本节旨在比较每个不同的函数，帮助你选择最适合你需求的方案。\n\npopulate_exit_trend() - 使用主数据框架中的指标进行向量化的基于信号的退出逻辑\n\n✅ 使用场景：基于指标或其他可以向量化计算的数据定义退出信号。\n\n🚫 不适用场景：为每个单独的交易自定义退出条件，或需要交易数据来做出退出决定时。\n\ncustom_exit() - 自定义退出逻辑，将立即完全退出交易，在每次机器人循环迭代时对每个开放交易调用，直到交易关闭。\n\n✅ 使用场景：为每个单独的交易指定退出条件（包括使用 adjust_trade_position() 的任何额外调整订单），或需要交易数据来做出退出决定时，例如使用利润数据来退出。\n\n🚫 不适用场景：当你想使用向量化的基于指标的数据退出时（改用 populate_exit_trend() 信号），或作为 custom_stoploss() 的替代，并且要注意回测中基于速率的退出可能不准确。\n\ncustom_stoploss() - 自定义追踪止损，在每次迭代时对每个开放交易调用，直到交易关闭。这里返回的值也用于\n\n交易所止损。\n\n✅ 使用场景：自定义止损逻辑，根据交易数据或其他条件设置动态止损。\n\n🚫 不适用场景：基于特定条件立即退出交易。使用 custom_exit() 来实现这个目的。\n\ncustom_roi() - 自定义 ROI，在每次迭代时对每个开放交易调用，直到交易关闭。\n\n✅ 使用场景：指定最小 ROI 阈值（“止盈”），根据利润或其他条件在交易持续时间内某个时间点以这个 ROI 水平退出交易。\n\n🚫 不适用场景：基于特定条件立即退出交易。使用 custom_exit()。\n\n🚫 不适用场景：静态 ROI。使用 minimal_roi。","type":"content","url":"/strategy-callbacks#id-2","position":7},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"机器人启动","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#bot-start","position":8},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"机器人启动","lvl2":"策略回调"},"content":"一个简单的回调，在策略加载时只调用一次。\n这可用于执行只需执行一次的操作，并在数据供应商 (dataprovider) 和钱包设置后运行。import requests\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    def bot_start(self, **kwargs) -> None:\n        \"\"\"\n        Called only once after bot instantiation.\n        :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.\n        \"\"\"\n        if self.config[\"runmode\"].value in (\"live\", \"dry_run\"):\n            # Assign this to the class by using self.*\n            # can then be used by populate_* methods\n            self.custom_remote_data = requests.get(\"https://some_remote_source.example.com\")\n\n\n在 hyperopt 时，这个回调只会在启动时运行一次。","type":"content","url":"/strategy-callbacks#bot-start","position":9},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"机器人循环开始","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#bot-loop-start","position":10},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"机器人循环开始","lvl2":"策略回调"},"content":"一个简单的回调，在每次机器人节流循环开始时调用一次（在 dry/live 模式下大约每 5 秒，除非另有配置），或在回测/hyperopt 模式下每根 K 线调用一次。\n这可用于执行与交易对无关的计算（适用于所有交易对）、加载外部数据等。# Default imports\nimport requests\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    def bot_loop_start(self, current_time: datetime, **kwargs) -> None:\n        \"\"\"\n        Called at the start of the bot iteration (one loop).\n        Might be used to perform pair-independent tasks\n        (e.g. gather some remote resource for comparison)\n        :param current_time: datetime object, containing the current datetime\n        :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.\n        \"\"\"\n        if self.config[\"runmode\"].value in (\"live\", \"dry_run\"):\n            # Assign this to the class by using self.*\n            # can then be used by populate_* methods\n            self.remote_data = requests.get(\"https://some_remote_source.example.com\")\n","type":"content","url":"/strategy-callbacks#bot-loop-start","position":11},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"仓位大小管理","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#stake-size-management","position":12},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"仓位大小管理","lvl2":"策略回调"},"content":"在进入交易前调用，使你可以在下新单时管理仓位大小。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n    def custom_stake_amount(self, pair: str, current_time: datetime, current_rate: float,\n                            proposed_stake: float, min_stake: float | None, max_stake: float,\n                            leverage: float, entry_tag: str | None, side: str,\n                            **kwargs) -> float:\n\n        dataframe, _ = self.dp.get_analyzed_dataframe(pair=pair, timeframe=self.timeframe)\n        current_candle = dataframe.iloc[-1].squeeze()\n\n        if current_candle[\"fastk_rsi_1h\"] > current_candle[\"fastd_rsi_1h\"]:\n            if self.config[\"stake_amount\"] == \"unlimited\":\n                # Use entire available wallet during favorable conditions when in compounding mode.\n                return max_stake\n            else:\n                # Compound profits during favorable conditions instead of using a static stake.\n                return self.wallets.get_total_stake_amount() / self.config[\"max_open_trades\"]\n\n        # Use default stake amount.\n        return proposed_stake\n\n如果你的代码抛出异常，Freqtrade 会回退到 proposed_stake 的值。异常本身会被记录。\n\nTip\n\n你不必确保 min_stake <= returned_value <= max_stake。交易会成功，因为返回值会被限制在支持的范围内，并且此操作会被记录。\n\nTip\n\n返回 0 或 None 会阻止下单。","type":"content","url":"/strategy-callbacks#stake-size-management","position":13},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义退出信号","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#custom-exit-signal","position":14},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义退出信号","lvl2":"策略回调"},"content":"在每次节流迭代（大约每 5 秒）时对开放交易调用，直到交易关闭。\n\n允许定义自定义退出信号，指示应关闭指定仓位（完全退出）。这在需要为每个单独的交易自定义退出条件，或者需要交易数据来做出退出决定时非常有用。\n\n例如，你可以使用 custom_exit() 实现 1:2 的风险回报比。\n\n不过，使用 custom_exit() 信号代替止损 不推荐。在这方面，它不如使用 custom_stoploss() 有效，后者还允许你在交易所保持止损。\n\nNote\n\n从此方法返回一个（非空）string 或 True 等同于在指定时间设置退出信号。如果已经设置了退出信号，或者退出信号被禁用（use_exit_signal=False），则不会调用此方法。string 的最大长度为 64 个字符。超过此限制将导致消息被截断为 64 个字符。\n\ncustom_exit() 将忽略 exit_profit_only，并且除非 use_exit_signal=False，否则始终会被调用，即使有新的进入信号。\n\n一个示例，说明如何根据当前利润使用不同的指标，并退出已开放超过一天的交易：# Default imports\n\nclass AwesomeStrategy(IStrategy):\n    def custom_exit(self, pair: str, trade: Trade, current_time: datetime, current_rate: float,\n                    current_profit: float, **kwargs):\n        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n        last_candle = dataframe.iloc[-1].squeeze()\n\n        # Above 20% profit, sell when rsi < 80\n        if current_profit > 0.2:\n            if last_candle[\"rsi\"] < 80:\n                return \"rsi_below_80\"\n\n        # Between 2% and 10%, sell if EMA-long above EMA-short\n        if 0.02 < current_profit < 0.1:\n            if last_candle[\"emalong\"] > last_candle[\"emashort\"]:\n                return \"ema_long_below_80\"\n\n        # Sell any positions at a loss if they are held for more than one day.\n        if current_profit < 0.0 and (current_time - trade.open_date_utc).days >= 1:\n            return \"unclog\"\n\n请参阅 \n\nDataframe 访问 以获取有关在策略回调中使用 dataframe 的更多信息。","type":"content","url":"/strategy-callbacks#custom-exit-signal","position":15},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#custom-stoploss","position":16},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义止损","lvl2":"策略回调"},"content":"在每次迭代（大约每 5 秒）时对开放交易调用，直到交易关闭。\n\n必须通过在策略对象上设置 use_custom_stoploss=True 来启用自定义止损方法。\n\n止损价格只能向上移动 - 如果从 custom_stoploss 返回的止损值会导致止损价格低于之前设置的价格，则会被忽略。传统的 stoploss 值作为绝对下限，并将作为初始止损（在此方法首次为交易调用之前），并且仍然是强制性的。\n\n由于自定义止损作为常规、变化的止损，其行为类似于 trailing_stop - 因此，由于此原因退出的交易将具有 \"trailing_stop_loss\" 的退出原因。\n\n该方法必须返回一个止损值（浮点数/数字），作为当前价格的百分比。\n\n例如，如果 current_rate 是 200 美元，则返回 0.02 将设置止损价格比当前价格低 2%，即 196 美元。\n\n在回测期间，current_rate（和 current_profit）是针对 K 线的高点（或空头交易的低点）提供的，而最终的止损是针对 K 线的低点（或空头交易的高点）进行评估的。\n\n返回值的绝对值被使用（符号被忽略），因此返回 0.05 或 -0.05 具有相同的结果，即止损比当前价格低 5%。\n返回 None 将被解释为\"不希望更改\"，并且是当你不想修改止损时的唯一安全返回方式。\nNaN 和 inf 值被视为无效，并将被忽略（与 None 相同）。\n\n交易所上的止损与 trailing_stop 类似，并且交易所上的止损会根据 stoploss_on_exchange_interval 进行更新（\n\n有关交易所止损的更多详细信息）。\n\n如果你在期货市场上，请注意 \n\n止损和杠杆 部分，因为从 custom_stoploss 返回的止损值是该交易的风险，而不是相对价格变动。\n\n使用日期\n\n所有基于时间的计算都应基于 current_time - 不鼓励使用 datetime.now() 或 datetime.utcnow()，因为这会影响回测支持。\n\n追踪止损\n\n在使用自定义止损值时，建议禁用 trailing_stop。两者可以协同工作，但你可能会遇到追踪止损将价格推高，而你的自定义函数不希望这种情况，导致冲突行为。","type":"content","url":"/strategy-callbacks#custom-stoploss","position":17},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"调整止损后调整仓位","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-3","position":18},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"调整止损后调整仓位","lvl3":"自定义止损","lvl2":"策略回调"},"content":"根据你的策略，你可能需要在 \n\n仓位调整 后调整止损的方向。\n为此，freqtrade 将在订单成交后额外调用 after_fill=True，这将允许策略在任意方向移动止损（也可以扩大止损与当前价格之间的差距，这在其他情况下是禁止的）。\n\n向后兼容性\n\n只有在你的 custom_stoploss 函数定义中包含 after_fill 参数时，才会进行此调用。\n\n因此，这不会影响（也不会让现有运行的策略感到意外）。","type":"content","url":"/strategy-callbacks#id-3","position":19},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-4","position":20},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"content":"下一节将展示一些使用自定义止损函数的示例。\n当然，还有更多可能性，所有示例都可以随意组合。","type":"content","url":"/strategy-callbacks#id-4","position":21},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"通过自定义止损实现追踪止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-5","position":22},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"通过自定义止损实现追踪止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"content":"要模拟 4% 的常规追踪止损（在达到的最高价格后追踪 4%），你可以使用以下非常简单的方法：# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* 方法\n\n    use_custom_stoploss = True\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool, \n                        **kwargs) -> float | None:\n        \"\"\"\n        自定义止损逻辑，返回相对于 current_rate 的新距离（作为比率）。\n        例如，返回 -0.05 将创建一个比 current_rate 低 5% 的止损。\n        自定义止损绝不能低于 self.stoploss，后者作为硬性最大损失。\n\n        完整文档请访问 https://www.freqtrade.io/en/latest/strategy-advanced/\n\n        如果策略未实现，则返回初始止损值。\n        仅在 use_custom_stoploss 设置为 True 时调用。\n\n        :param pair: 当前分析的交易对\n        :param trade: 交易对象。\n        :param current_time: 当前时间的 datetime 对象\n        :param current_rate: 基于 exit_pricing 中的定价设置计算的比率。\n        :param current_profit: 当前利润（作为比率），基于 current_rate 计算。\n        :param after_fill: 如果止损在订单成交后调用，则为 True。\n        :param **kwargs: 保持此参数，以免未来更新破坏你的策略。\n        :return float: 相对于 current_rate 的新止损值\n        \"\"\"\n        return -0.04 * trade.leverage","type":"content","url":"/strategy-callbacks#id-5","position":23},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"基于时间的追踪止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-6","position":24},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"基于时间的追踪止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"content":"在前 60 分钟内使用初始止损，之后更改为 10% 的追踪止损，并在 2 小时（120 分钟）后使用 5% 的追踪止损。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* 方法\n\n    use_custom_stoploss = True\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool, \n                        **kwargs) -> float | None:\n\n        # 确保最长的间隔在前 - 这些条件从上到下评估。\n        if current_time - timedelta(minutes=120) > trade.open_date_utc:\n            return -0.05 * trade.leverage\n        elif current_time - timedelta(minutes=60) > trade.open_date_utc:\n            return -0.10 * trade.leverage\n        return None","type":"content","url":"/strategy-callbacks#id-6","position":25},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"基于时间的追踪止损，带有成交后调整","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-7","position":26},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"基于时间的追踪止损，带有成交后调整","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"content":"在前 60 分钟内使用初始止损，之后更改为 10% 的追踪止损，并在 2 小时（120 分钟）后使用 5% 的追踪止损。\n如果额外订单成交，将止损设置为新 open_rate 下方 10%（\n\n所有入场的平均值）。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* 方法\n\n    use_custom_stoploss = True\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool, \n                        **kwargs) -> float | None:\n\n        if after_fill: \n            # 在额外订单后，从新开仓率下方 10% 的止损开始\n            return stoploss_from_open(0.10, current_profit, is_short=trade.is_short, leverage=trade.leverage)\n        # 确保最长的间隔在前 - 这些条件从上到下评估。\n        if current_time - timedelta(minutes=120) > trade.open_date_utc:\n            return -0.05 * trade.leverage\n        elif current_time - timedelta(minutes=60) > trade.open_date_utc:\n            return -0.10 * trade.leverage\n        return None","type":"content","url":"/strategy-callbacks#id-7","position":27},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"每个交易对不同的止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-8","position":28},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"每个交易对不同的止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"content":"根据交易对使用不同的止损。\n\n在此示例中，我们将为 ETH/BTC 和 XRP/BTC 使用 10% 的追踪止损，为 LTC/BTC 使用 5% 的追踪止损，并为所有其他交易对使用 15% 的追踪止损。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* 方法\n\n    use_custom_stoploss = True\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool,\n                        **kwargs) -> float | None:\n\n        if pair in (\"ETH/BTC\", \"XRP/BTC\"):\n            return -0.10 * trade.leverage\n        elif pair in (\"LTC/BTC\"):\n            return -0.05 * trade.leverage\n        return -0.15 * trade.leverage","type":"content","url":"/strategy-callbacks#id-8","position":29},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"带正偏移的追踪止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-9","position":30},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"带正偏移的追踪止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"content":"在利润超过 4% 之前使用初始止损，然后使用当前利润的 50% 作为追踪止损，最小为 2.5%，最大为 5%。\n\n请注意，止损只能增加，低于当前止损的值将被忽略。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* 方法\n\n    use_custom_stoploss = True\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool,\n                        **kwargs) -> float | None:\n\n        if current_profit < 0.04:\n            return None # 返回 None 以继续使用初始止损\n\n        # 达到所需偏移后，允许止损追踪一半的利润\n        desired_stoploss = current_profit / 2\n\n        # 使用最小 2.5% 和最大 5%\n        return max(min(desired_stoploss, 0.05), 0.025) * trade.leverage","type":"content","url":"/strategy-callbacks#id-9","position":31},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"阶梯式止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-10","position":32},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"阶梯式止损","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"content":"此示例不是连续追踪当前价格，而是根据当前利润设置固定的止损价格水平。\n\n在达到 20% 利润之前使用常规止损\n\n一旦利润 > 20% - 将止损设置为开仓价格上方 7%。\n\n一旦利润 > 25% - 将止损设置为开仓价格上方 15%。\n\n一旦利润 > 40% - 将止损设置为开仓价格上方 25%。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    use_custom_stoploss = True\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool,\n                        **kwargs) -> float | None:\n\n        # evaluate highest to lowest, so that highest possible stop is used\n        if current_profit > 0.40:\n            return stoploss_from_open(0.25, current_profit, is_short=trade.is_short, leverage=trade.leverage)\n        elif current_profit > 0.25:\n            return stoploss_from_open(0.15, current_profit, is_short=trade.is_short, leverage=trade.leverage)\n        elif current_profit > 0.20:\n            return stoploss_from_open(0.07, current_profit, is_short=trade.is_short, leverage=trade.leverage)\n\n        # return maximum stoploss value, keeping current stoploss price unchanged\n        return None","type":"content","url":"/strategy-callbacks#id-10","position":33},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"使用数据框架中的指标实现自定义止损示例","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-11","position":34},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"使用数据框架中的指标实现自定义止损示例","lvl4":"自定义止损示例","lvl3":"自定义止损","lvl2":"策略回调"},"content":"绝对止损值可以从存储在数据框架中的指标派生。此示例使用价格下方的抛物线 SAR 作为止损。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # <...>\n        dataframe[\"sar\"] = ta.SAR(dataframe)\n\n    use_custom_stoploss = True\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool,\n                        **kwargs) -> float | None:\n\n        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n        last_candle = dataframe.iloc[-1].squeeze()\n\n        # Use parabolic sar as absolute stoploss price\n        stoploss_price = last_candle[\"sar\"]\n\n        # Convert absolute price to percentage relative to current_rate\n        if stoploss_price < current_rate:\n            return stoploss_from_absolute(stoploss_price, current_rate, is_short=trade.is_short)\n\n        # return maximum stoploss value, keeping current stoploss price unchanged\n        return None\n\n有关在策略回调中使用数据框架的更多信息，请参见\n\n数据框架访问。","type":"content","url":"/strategy-callbacks#id-11","position":35},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"止损计算的常用辅助函数","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-12","position":36},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"止损计算的常用辅助函数","lvl3":"自定义止损","lvl2":"策略回调"},"content":"","type":"content","url":"/strategy-callbacks#id-12","position":37},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"相对于开仓价格的止损","lvl4":"止损计算的常用辅助函数","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-13","position":38},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"相对于开仓价格的止损","lvl4":"止损计算的常用辅助函数","lvl3":"自定义止损","lvl2":"策略回调"},"content":"从 custom_stoploss() 返回的止损值必须指定相对于 current_rate 的百分比，但有时你可能想要指定相对于_开仓_价格的止损。\nstoploss_from_open() 是一个辅助函数，用于计算可以从 custom_stoploss 返回的止损值，该值将等同于开仓点上方所需的交易利润。\n\n从自定义止损函数返回相对于开仓价格的止损\n\n假设开仓价格为 $100，current_price 为 $121（current_profit 将为 0.21）。\n\n如果我们想要在开仓价格上方 7% 设置止损价格，我们可以调用 stoploss_from_open(0.07, current_profit, False)，它将返回 0.1157024793。$121 下方 11.57% 是 $107，这与 $100 上方 7% 相同。\n\n此函数会考虑杠杆 - 所以在 10 倍杠杆下，实际止损将是 $100 上方 0.7%（0.7% * 10x = 7%）。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    use_custom_stoploss = True\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool,\n                        **kwargs) -> float | None:\n\n        # once the profit has risen above 10%, keep the stoploss at 7% above the open price\n        if current_profit > 0.10:\n            return stoploss_from_open(0.07, current_profit, is_short=trade.is_short, leverage=trade.leverage)\n\n        return 1\n\n\n完整示例可以在文档的\n\n自定义止损部分找到。\n\nNote\n\n向 stoploss_from_open() 提供无效输入可能会产生\"CustomStoploss 函数未返回有效止损\"警告。\n如果 current_profit 参数低于指定的 open_relative_stop，这种情况可能会发生。当交易关闭被 confirm_trade_exit() 方法阻止时，可能会出现这种情况。可以通过在 confirm_trade_exit() 中检查 exit_reason 来永不阻止止损卖出，或者使用 return stoploss_from_open(...) or 1 惯用法来解决警告，这将在 current_profit < open_relative_stop 时请求不更改止损。","type":"content","url":"/strategy-callbacks#id-13","position":39},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"从绝对价格计算止损百分比","lvl4":"止损计算的常用辅助函数","lvl3":"自定义止损","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-14","position":40},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"从绝对价格计算止损百分比","lvl4":"止损计算的常用辅助函数","lvl3":"自定义止损","lvl2":"策略回调"},"content":"从 custom_stoploss() 返回的止损值始终指定相对于 current_rate 的百分比。为了在指定的绝对价格水平设置止损，我们需要使用 stop_rate 来计算相对于 current_rate 的百分比，这将给出与从开仓价格指定百分比相同的结果。\n\n辅助函数 stoploss_from_absolute() 可用于将绝对价格转换为可以从 custom_stoploss() 返回的当前价格相对止损。\n\n从自定义止损函数返回使用绝对价格的止损\n\n如果我们想要在当前价格下方 2xATR 追踪止损价格，我们可以调用 stoploss_from_absolute(current_rate + (side * candle[\"atr\"] * 2), current_rate=current_rate, is_short=trade.is_short, leverage=trade.leverage)。\n对于期货，我们需要调整方向（向上或向下）以及调整杠杆，因为 \n\ncustom_stoploss 回调返回的是\n\n\"此交易的风险\" - 而不是相对价格变动。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    use_custom_stoploss = True\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        dataframe[\"atr\"] = ta.ATR(dataframe, timeperiod=14)\n        return dataframe\n\n    def custom_stoploss(self, pair: str, trade: Trade, current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool,\n                        **kwargs) -> float | None:\n        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n        trade_date = timeframe_to_prev_date(self.timeframe, trade.open_date_utc)\n        candle = dataframe.iloc[-1].squeeze()\n        side = 1 if trade.is_short else -1\n        return stoploss_from_absolute(current_rate + (side * candle[\"atr\"] * 2), \n                                        current_rate=current_rate, \n                                        is_short=trade.is_short,\n                                        leverage=trade.leverage)\n","type":"content","url":"/strategy-callbacks#id-14","position":41},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义 ROI","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-roi","position":42},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义 ROI","lvl2":"策略回调"},"content":"对开放交易每次迭代（大约每 5 秒）调用，直到交易关闭。\n\n必须通过在策略对象上设置 use_custom_roi=True 来启用自定义 ROI 方法的使用。\n\n此方法允许你定义退出交易的自定义最小 ROI 阈值，以比率表示（例如，0.05 表示 5% 利润）。如果同时定义了 minimal_roi 和 custom_roi，则较低的阈值将触发退出。例如，如果 minimal_roi 设置为 {\"0\": 0.10}（0 分钟时为 10%）且 custom_roi 返回 0.05，则当利润达到 5% 时交易将退出。同样，如果 custom_roi 返回 0.10 且 minimal_roi 设置为 {\"0\": 0.05}（0 分钟时为 5%），则当利润达到 5% 时交易将关闭。\n\n该方法必须返回一个表示新 ROI 阈值的浮点数比率，或返回 None 以回退到 minimal_roi 逻辑。返回 NaN 或 inf 值被视为无效，将被视为 None，导致机器人使用 minimal_roi 配置。","type":"content","url":"/strategy-callbacks#id-roi","position":43},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-roi-1","position":44},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"content":"以下示例说明如何使用 custom_roi 函数实现不同的 ROI 逻辑。","type":"content","url":"/strategy-callbacks#id-roi-1","position":45},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"按交易方向自定义 ROI","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-roi-2","position":46},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"按交易方向自定义 ROI","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"content":"根据 side 使用不同的 ROI 阈值。在此示例中，多头入场为 5%，空头入场为 2%。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    use_custom_roi = True\n\n    # ... populate_* methods\n\n    def custom_roi(self, pair: str, trade: Trade, current_time: datetime, trade_duration: int,\n                   entry_tag: str | None, side: str, **kwargs) -> float | None:\n        \"\"\"\n        自定义 ROI 逻辑，返回新的最小 ROI 阈值（以比率表示，例如 0.05 表示 +5%）。\n        仅在 use_custom_roi 设置为 True 时调用。\n\n        如果与 minimal_roi 同时使用，当达到较低的阈值时将触发退出。\n        示例：如果 minimal_roi = {\"0\": 0.01} 且 custom_roi 返回 0.05，\n        当利润达到 5% 时将触发退出。\n\n        :param pair: 当前分析的交易对。\n        :param trade: 交易对象。\n        :param current_time: datetime 对象，包含当前日期时间。\n        :param trade_duration: 当前交易持续时间（分钟）。\n        :param entry_tag: 如果买入信号提供了可选的 entry_tag（buy_tag）。\n        :param side: 'long' 或 'short' - 表示当前交易的方向。\n        :param **kwargs: 确保保留此参数，以便更新不会破坏你的策略。\n        :return float: 新的 ROI 值（比率），或 None 以回退到 minimal_roi 逻辑。\n        \"\"\"\n        return 0.05 if side == \"long\" else 0.02","type":"content","url":"/strategy-callbacks#id-roi-2","position":47},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"按交易对自定义 ROI","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-roi-3","position":48},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"按交易对自定义 ROI","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"content":"根据 pair 使用不同的 ROI 阈值。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    use_custom_roi = True\n\n    # ... populate_* methods\n\n    def custom_roi(self, pair: str, trade: Trade, current_time: datetime, trade_duration: int,\n                   entry_tag: str | None, side: str, **kwargs) -> float | None:\n\n        stake = trade.stake_currency\n        roi_map = {\n            f\"BTC/{stake}\": 0.02, # BTC 为 2%\n            f\"ETH/{stake}\": 0.03, # ETH 为 3%\n            f\"XRP/{stake}\": 0.04, # XRP 为 4%\n        }\n\n        return roi_map.get(pair, 0.01) # 其他交易对为 1%","type":"content","url":"/strategy-callbacks#id-roi-3","position":49},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"按入场标签自定义 ROI","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-roi-4","position":50},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"按入场标签自定义 ROI","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"content":"根据买入信号提供的 entry_tag 使用不同的 ROI 阈值。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    use_custom_roi = True\n\n    # ... populate_* methods\n\n    def custom_roi(self, pair: str, trade: Trade, current_time: datetime, trade_duration: int,\n                   entry_tag: str | None, side: str, **kwargs) -> float | None:\n\n        roi_by_tag = {\n            \"breakout\": 0.08,       # 如果标签是 \"breakout\" 则为 8%\n            \"rsi_overbought\": 0.05, # 如果标签是 \"rsi_overbought\" 则为 5%\n            \"mean_reversion\": 0.03, # 如果标签是 \"mean_reversion\" 则为 3%\n        }\n\n        return roi_by_tag.get(entry_tag, 0.01)  # 如果标签未知则为 1%","type":"content","url":"/strategy-callbacks#id-roi-4","position":51},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"基于 ATR 的自定义 ROI","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"type":"lvl5","url":"/strategy-callbacks#id-atr-roi","position":52},{"hierarchy":{"lvl1":"策略回调指南","lvl5":"基于 ATR 的自定义 ROI","lvl4":"自定义 ROI 示例","lvl3":"自定义 ROI","lvl2":"策略回调"},"content":"ROI 值可以从存储在数据框架中的指标派生。此示例使用 ATR 比率作为 ROI。# Default imports\n# <...>\nimport talib.abstract as ta\n\nclass AwesomeStrategy(IStrategy):\n\n    use_custom_roi = True\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        # <...>\n        dataframe[\"atr\"] = ta.ATR(dataframe, timeperiod=10)\n\n    def custom_roi(self, pair: str, trade: Trade, current_time: datetime, trade_duration: int,\n                   entry_tag: str | None, side: str, **kwargs) -> float | None:\n\n        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n        last_candle = dataframe.iloc[-1].squeeze()\n        atr_ratio = last_candle[\"atr\"] / last_candle[\"close\"]\n\n        return atr_ratio # 返回 ATR 值作为比率","type":"content","url":"/strategy-callbacks#id-atr-roi","position":53},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义订单价格规则","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-15","position":54},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义订单价格规则","lvl2":"策略回调"},"content":"默认情况下，freqtrade 使用订单簿自动设置订单价格（\n\n相关文档），你也可以选择基于你的策略创建自定义订单价格。\n\n你可以通过在策略文件中创建 custom_entry_price() 函数自定义入场价格，以及 custom_exit_price() 函数自定义出场价格。\n\n每个方法都会在向交易所下单前被调用。\n\nTip\n\n如果你的自定义定价函数返回 None 或无效值，价格将回退到 proposed_rate，即基于常规定价配置的价格。\n\n使用 custom_entry_price 时，Trade 对象会在与该交易相关的第一个入场订单创建时可用，对于第一次入场，trade 参数值为 None。","type":"content","url":"/strategy-callbacks#id-15","position":55},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义订单入场和出场价格示例","lvl3":"自定义订单价格规则","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-16","position":56},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义订单入场和出场价格示例","lvl3":"自定义订单价格规则","lvl2":"策略回调"},"content":"# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    def custom_entry_price(self, pair: str, trade: Trade | None, current_time: datetime, proposed_rate: float,\n                           entry_tag: str | None, side: str, **kwargs) -> float:\n\n        dataframe, last_updated = self.dp.get_analyzed_dataframe(pair=pair,\n                                                                timeframe=self.timeframe)\n        new_entryprice = dataframe[\"bollinger_10_lowerband\"].iat[-1]\n\n        return new_entryprice\n\n    def custom_exit_price(self, pair: str, trade: Trade,\n                          current_time: datetime, proposed_rate: float,\n                          current_profit: float, exit_tag: str | None, **kwargs) -> float:\n\n        dataframe, last_updated = self.dp.get_analyzed_dataframe(pair=pair,\n                                                                timeframe=self.timeframe)\n        new_exitprice = dataframe[\"bollinger_10_upperband\"].iat[-1]\n\n        return new_exitprice\n\n\nWarning\n\n修改入场和出场价格仅适用于限价单。根据选择的价格，这可能导致大量未成交订单。默认情况下，当前价格与自定义价格之间的最大允许距离为 2%，该值可通过配置中的 custom_price_max_distance_ratio 参数更改。\n\n示例：\n\n如果 new_entryprice 是 97，proposed_rate 是 100，custom_price_max_distance_ratio 设置为 2%，则保留的有效自定义入场价格将是 98，比当前（建议）价格低 2%。\n\n回测\n\n自定义价格在回测中受支持（自 2021.12 起），如果价格落在 K 线的最高/最低范围内，订单将会成交。\n\n未能立即成交的订单将受到常规超时处理，这会在每根（详细）K 线发生一次。\n\ncustom_exit_price() 仅针对类型为 exit_signal、自定义退出和部分退出的卖出调用。所有其他退出类型将使用常规回测价格。","type":"content","url":"/strategy-callbacks#id-16","position":57},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义订单超时规则","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-17","position":58},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"自定义订单超时规则","lvl2":"策略回调"},"content":"简单的、基于时间的订单超时可以通过策略或在配置的 unfilledtimeout 部分进行配置。\n\n然而，freqtrade 还为两种订单类型提供了自定义回调，允许你基于自定义标准决定订单是否超时。\n\nNote\n\n回测会在订单价格落在 K 线的最高/最低范围内时成交订单。\n\n以下回调将针对不会立即成交的订单（使用自定义定价）在每个（详细）K 线调用一次。","type":"content","url":"/strategy-callbacks#id-17","position":59},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义订单超时示例","lvl3":"自定义订单超时规则","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-18","position":60},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义订单超时示例","lvl3":"自定义订单超时规则","lvl2":"策略回调"},"content":"对每个未成交订单调用，直到订单成交或取消。\n\ncheck_entry_timeout() 用于交易入场，而 check_exit_timeout() 用于交易出场订单。\n\n下面是一个简单的示例，它根据资产价格应用不同的未成交超时。\n\n它对高价资产应用较短的超时，而对低价币种允许更长的成交时间。\n\n函数必须返回 True（取消订单）或 False（保持订单活跃）。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    # 设置 unfilledtimeout 为 25 小时，因为下面的最大超时是 24 小时。\n    unfilledtimeout = {\n        \"entry\": 60 * 25,\n        \"exit\": 60 * 25\n    }\n\n    def check_entry_timeout(self, pair: str, trade: Trade, order: Order,\n                            current_time: datetime, **kwargs) -> bool:\n        if trade.open_rate > 100 and trade.open_date_utc < current_time - timedelta(minutes=5):\n            return True\n        elif trade.open_rate > 10 and trade.open_date_utc < current_time - timedelta(minutes=3):\n            return True\n        elif trade.open_rate < 1 and trade.open_date_utc < current_time - timedelta(hours=24):\n           return True\n        return False\n\n\n    def check_exit_timeout(self, pair: str, trade: Trade, order: Order,\n                           current_time: datetime, **kwargs) -> bool:\n        if trade.open_rate > 100 and trade.open_date_utc < current_time - timedelta(minutes=5):\n            return True\n        elif trade.open_rate > 10 and trade.open_date_utc < current_time - timedelta(minutes=3):\n            return True\n        elif trade.open_rate < 1 and trade.open_date_utc < current_time - timedelta(hours=24):\n           return True\n        return False\n\nWarning\n\n对于上面的示例，unfilledtimeout 必须设置为大于 24 小时的值，否则该类型的超时将首先应用。","type":"content","url":"/strategy-callbacks#id-18","position":61},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义订单超时示例（使用额外数据）","lvl3":"自定义订单超时规则","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-19","position":62},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"自定义订单超时示例（使用额外数据）","lvl3":"自定义订单超时规则","lvl2":"策略回调"},"content":"# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    # 设置 unfilledtimeout 为 25 小时，因为下面的最大超时是 24 小时。\n    unfilledtimeout = {\n        \"entry\": 60 * 25,\n        \"exit\": 60 * 25\n    }\n\n    def check_entry_timeout(self, pair: str, trade: Trade, order: Order,\n                            current_time: datetime, **kwargs) -> bool:\n        ob = self.dp.orderbook(pair, 1)\n        current_price = ob[\"bids\"][0][0]\n        # 如果价格比订单价格高出 2% 以上，取消买单。\n        if current_price > order.price * 1.02:\n            return True\n        return False\n\n\n    def check_exit_timeout(self, pair: str, trade: Trade, order: Order,\n                           current_time: datetime, **kwargs) -> bool:\n        ob = self.dp.orderbook(pair, 1)\n        current_price = ob[\"asks\"][0][0]\n        # 如果价格比订单价格低 2% 以上，取消卖单。\n        if current_price < order.price * 0.98:\n            return True\n        return False","type":"content","url":"/strategy-callbacks#id-19","position":63},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"机器人订单确认","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-20","position":64},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"机器人订单确认","lvl2":"策略回调"},"content":"确认交易入场/出场。\n这些是在订单下单之前最后调用的方法。","type":"content","url":"/strategy-callbacks#id-20","position":65},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"交易入场（买单）确认","lvl3":"机器人订单确认","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-21","position":66},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"交易入场（买单）确认","lvl3":"机器人订单确认","lvl2":"策略回调"},"content":"confirm_trade_entry() 可用于在最后一刻中止交易入场（可能是因为价格不符合预期）。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    def confirm_trade_entry(self, pair: str, order_type: str, amount: float, rate: float,\n                            time_in_force: str, current_time: datetime, entry_tag: str | None,\n                            side: str, **kwargs) -> bool:\n        \"\"\"\n        Called right before placing a entry order.\n        Timing for this function is critical, so avoid doing heavy computations or\n        network requests in this method.\n\n        For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/\n\n        When not implemented by a strategy, returns True (always confirming).\n\n        :param pair: Pair that's about to be bought/shorted.\n        :param order_type: Order type (as configured in order_types). usually limit or market.\n        :param amount: Amount in target (base) currency that's going to be traded.\n        :param rate: Rate that's going to be used when using limit orders \n                     or current rate for market orders.\n        :param time_in_force: Time in force. Defaults to GTC (Good-til-cancelled).\n        :param current_time: datetime object, containing the current datetime\n        :param entry_tag: Optional entry_tag (buy_tag) if provided with the buy signal.\n        :param side: \"long\" or \"short\" - indicating the direction of the proposed trade\n        :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.\n        :return bool: When True is returned, then the buy-order is placed on the exchange.\n            False aborts the process\n        \"\"\"\n        return True\n","type":"content","url":"/strategy-callbacks#id-21","position":67},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"交易出场（卖单）确认","lvl3":"机器人订单确认","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-22","position":68},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"交易出场（卖单）确认","lvl3":"机器人订单确认","lvl2":"策略回调"},"content":"confirm_trade_exit() 可用于在最后一刻中止交易出场（可能是因为价格不符合预期）。\n\nconfirm_trade_exit() 可能会在同一迭代中多次调用同一交易，如果适用不同的退出原因。\n退出原因（如果适用）将按以下顺序排列：\n\nexit_signal / custom_exit\n\nstop_loss\n\nroi\n\ntrailing_stop_loss# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    def confirm_trade_exit(self, pair: str, trade: Trade, order_type: str, amount: float,\n                           rate: float, time_in_force: str, exit_reason: str,\n                           current_time: datetime, **kwargs) -> bool:\n        \"\"\"\n        Called right before placing a regular exit order.\n        Timing for this function is critical, so avoid doing heavy computations or\n        network requests in this method.\n\n        For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/\n\n        When not implemented by a strategy, returns True (always confirming).\n\n        :param pair: Pair for trade that's about to be exited.\n        :param trade: trade object.\n        :param order_type: Order type (as configured in order_types). usually limit or market.\n        :param amount: Amount in base currency.\n        :param rate: Rate that's going to be used when using limit orders\n                     or current rate for market orders.\n        :param time_in_force: Time in force. Defaults to GTC (Good-til-cancelled).\n        :param exit_reason: Exit reason.\n            Can be any of [\"roi\", \"stop_loss\", \"stoploss_on_exchange\", \"trailing_stop_loss\",\n                           \"exit_signal\", \"force_exit\", \"emergency_exit\"]\n        :param current_time: datetime object, containing the current datetime\n        :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.\n        :return bool: When True, then the exit-order is placed on the exchange.\n            False aborts the process\n        \"\"\"\n        if exit_reason == \"force_exit\" and trade.calc_profit_ratio(rate) < 0:\n            # Reject force-sells with negative profit\n            # This is just a sample, please adjust to your needs\n            # (this does not necessarily make sense, assuming you know when you're force-selling)\n            return False\n        return True\n\n\nWarning\n\nconfirm_trade_exit() 可以阻止止损退出，导致重大损失，因为这将忽略止损退出。\n\nconfirm_trade_exit() 不会为清算调用 - 因为清算是由交易所强制执行的，因此无法拒绝。","type":"content","url":"/strategy-callbacks#id-22","position":69},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"调整交易仓位","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#adjust-trade-position","position":70},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"调整交易仓位","lvl2":"策略回调"},"content":"position_adjustment_enable 策略属性启用了策略中 adjust_trade_position() 回调的使用。\n出于性能原因，默认情况下它是禁用的，如果启用，freqtrade 将在启动时显示警告消息。\nadjust_trade_position() 可用于执行额外的订单，例如使用 DCA（美元成本平均）管理风险或增加或减少仓位。\n\n额外订单也会导致额外费用，并且这些订单不计入 max_open_trades。\n\n当有未成交订单（买单或卖单）等待执行时，也会调用此回调 - 如果数量、价格或方向不同，将取消现有的未成交订单以放置新订单。部分成交的订单也将被取消，并将被回调返回的新数量替换。\n\nadjust_trade_position() 在交易期间非常频繁地被调用，因此你必须尽可能保持实现的性能。\n\n仓位调整将始终应用于交易的方向，因此正值将始终增加你的仓位（负值将减少你的仓位），无论它是多头还是空头交易。\n调整订单可以通过返回一个 2 元素元组来分配标签，第一个元素是调整数量，第二个元素是标签（例如 return 250, \"increase_favorable_conditions\"）。\n\n无法修改杠杆，返回的仓位金额假定为应用杠杆之前。\n\n当前分配给仓位的组合仓位金额保存在 trade.stake_amount 中。因此，trade.stake_amount 将在每次通过 adjust_trade_position() 进行额外入场和部分出场时更新。\n\n松散逻辑\n\n在模拟和实盘运行中，此函数将每 throttle_process_secs（默认为 5 秒）调用一次。如果你有松散的逻辑（例如，如果最后一根 K 线的 RSI 低于 30，则增加仓位），你的机器人将每 5 秒进行一次额外重新入场，直到你用完资金，达到 max_position_adjustment 限制，或者出现 RSI 大于 30 的新 K 线。\n\n部分出场也可能发生同样的情况。\n\n因此，请确保有严格的逻辑和/或检查最后成交的订单以及是否已有未成交订单。\n\n多次仓位调整的性能\n\n仓位调整可以是增加策略输出的好方法 - 但如果广泛使用此功能，也可能有缺点。\n\n每个订单将在交易期间附加到交易对象 - 因此增加内存使用。\n\n因此，不建议使用长时间持续和 10 次甚至 100 次仓位调整的交易，应该定期关闭以避免影响性能。\n\n回测\n\n在回测期间，此回调在 timeframe 或 timeframe_detail 中的每根 K 线调用一次，因此运行时性能将受到影响。\n\n这也可能导致实盘和回测之间的结果不同，因为回测只能在每根 K 线调整一次交易，而实盘可以在每根 K 线多次调整交易。","type":"content","url":"/strategy-callbacks#adjust-trade-position","position":71},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"增加仓位","lvl3":"调整交易仓位","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-23","position":72},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"增加仓位","lvl3":"调整交易仓位","lvl2":"策略回调"},"content":"当需要进行额外入场订单时（即增加仓位——多头为买单，空头为卖单），策略应返回一个介于 min_stake 和 max_stake 之间的正数 stake_amount（以仓位货币计价）。\n\n如果钱包中没有足够的资金（返回值高于 max_stake），则该信号会被忽略。\nmax_entry_position_adjustment 属性用于限制机器人每笔交易（在首次入场订单之外）可执行的额外入场次数。默认值为 -1，表示机器人对调整入场次数没有限制。\n\n一旦达到你在 max_entry_position_adjustment 上设置的最大额外入场次数，额外入场将被忽略，但回调仍会被调用以寻找部分出场机会。\n\n关于仓位大小\n\n使用固定仓位大小意味着首次订单将使用该金额，就像没有仓位调整一样。\n\n如果你希望通过 DCA 进行额外买入，请确保钱包中留有足够的资金。\n\n对 DCA 订单使用 “unlimited” 仓位金额时，需要你实现 custom_stake_amount() 回调，以避免初始订单占用全部资金。","type":"content","url":"/strategy-callbacks#id-23","position":73},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"减少仓位","lvl3":"调整交易仓位","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-24","position":74},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"减少仓位","lvl3":"调整交易仓位","lvl2":"策略回调"},"content":"策略应返回一个负的 stake_amount（以仓位货币计价）用于部分出场。\n\n返回当前持有的全部仓位（-trade.stake_amount）将导致完全出场。\n\n返回超过上述值（即剩余 stake_amount 变为负数）将导致机器人忽略该信号。\n\n对于部分出场，重要的是要知道用于计算部分出场订单币种数量的公式是 部分出场数量 = negative_stake_amount * trade.amount / trade.stake_amount，其中 negative_stake_amount 是 adjust_trade_position 函数返回的值。正如公式所示，该公式与当前仓位盈亏无关，只与 trade.amount 和 trade.stake_amount 有关，这两个值不会受到价格波动影响。\n\n例如，假设你以 50 的开盘价买入 2 个 SHITCOIN/USDT，意味着该交易的仓位金额为 100 USDT。现在价格涨到 200，你想卖出一半。这时你需要返回 trade.stake_amount 的 -50%（0.5 * 100 USDT），即 -50。机器人会计算需要卖出的数量，即 50 * 2 / 100，等于 1 个 SHITCOIN/USDT。如果你返回 -200（2 * 200 的 50%），机器人会忽略，因为 trade.stake_amount 只有 100 USDT，而你要求卖出 200 USDT，相当于卖出 4 个 SHITCOIN/USDT。\n\n回到上面的例子，当前价格为 200，你的交易当前 USDT 价值为 400 USDT。假设你想部分卖出 100 USDT，以取回初始投资并将利润留在交易中，希望价格继续上涨。这时你需要先计算要卖出的确切数量。由于你想按当前价格卖出价值 100 USDT 的币，部分卖出的确切数量为 100 * 2 / 400，等于 0.5 个 SHITCOIN/USDT。既然知道了要卖出的数量（0.5），你在 adjust_trade_position 函数中需要返回的值是 -部分出场数量 * trade.stake_amount / trade.amount，即 -25。机器人会卖出 0.5 个 SHITCOIN/USDT，交易中保留 1.5 个。你将从部分出场中获得 100 USDT。\n\n止损计算\n\n止损仍然以初始开仓价为基准计算，而不是均价。\n\n常规止损规则仍然适用（不能下移止损）。\n\n虽然 /stopentry 命令会阻止机器人进入新交易，但仓位调整功能会继续在已有交易上买入新订单。# Default imports\n\nclass DigDeeperStrategy(IStrategy):\n\n    position_adjustment_enable = True\n\n    # Attempts to handle large drops with DCA. High stoploss is required.\n    stoploss = -0.30\n\n    # ... populate_* methods\n\n    # Example specific variables\n    max_entry_position_adjustment = 3\n    # This number is explained a bit further down\n    max_dca_multiplier = 5.5\n\n    # This is called when placing the initial order (opening trade)\n    def custom_stake_amount(self, pair: str, current_time: datetime, current_rate: float,\n                            proposed_stake: float, min_stake: float | None, max_stake: float,\n                            leverage: float, entry_tag: str | None, side: str,\n                            **kwargs) -> float:\n\n        # We need to leave most of the funds for possible further DCA orders\n        # This also applies to fixed stakes\n        return proposed_stake / self.max_dca_multiplier\n\n    def adjust_trade_position(self, trade: Trade, current_time: datetime,\n                              current_rate: float, current_profit: float,\n                              min_stake: float | None, max_stake: float,\n                              current_entry_rate: float, current_exit_rate: float,\n                              current_entry_profit: float, current_exit_profit: float,\n                              **kwargs\n                              ) -> float | None | tuple[float | None, str | None]:\n        \"\"\"\n        Custom trade adjustment logic, returning the stake amount that a trade should be\n        increased or decreased.\n        This means extra entry or exit orders with additional fees.\n        Only called when `position_adjustment_enable` is set to True.\n\n        For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/\n\n        When not implemented by a strategy, returns None\n\n        :param trade: trade object.\n        :param current_time: datetime object, containing the current datetime\n        :param current_rate: Current entry rate (same as current_entry_profit)\n        :param current_profit: Current profit (as ratio), calculated based on current_rate \n                               (same as current_entry_profit).\n        :param min_stake: Minimal stake size allowed by exchange (for both entries and exits)\n        :param max_stake: Maximum stake allowed (either through balance, or by exchange limits).\n        :param current_entry_rate: Current rate using entry pricing.\n        :param current_exit_rate: Current rate using exit pricing.\n        :param current_entry_profit: Current profit using entry pricing.\n        :param current_exit_profit: Current profit using exit pricing.\n        :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.\n        :return float: Stake amount to adjust your trade,\n                       Positive values to increase position, Negative values to decrease position.\n                       Return None for no action.\n                       Optionally, return a tuple with a 2nd element with an order reason\n        \"\"\"\n        if trade.has_open_orders:\n            # Only act if no orders are open\n            return\n\n        if current_profit > 0.05 and trade.nr_of_successful_exits == 0:\n            # Take half of the profit at +5%\n            return -(trade.stake_amount / 2), \"half_profit_5%\"\n\n        if current_profit > -0.05:\n            return None\n\n        # Obtain pair dataframe (just to show how to access it)\n        dataframe, _ = self.dp.get_analyzed_dataframe(trade.pair, self.timeframe)\n        # Only buy when not actively falling price.\n        last_candle = dataframe.iloc[-1].squeeze()\n        previous_candle = dataframe.iloc[-2].squeeze()\n        if last_candle[\"close\"] < previous_candle[\"close\"]:\n            return None\n\n        filled_entries = trade.select_filled_orders(trade.entry_side)\n        count_of_entries = trade.nr_of_successful_entries\n        # Allow up to 3 additional increasingly larger buys (4 in total)\n        # Initial buy is 1x\n        # If that falls to -5% profit, we buy 1.25x more, average profit should increase to roughly -2.2%\n        # If that falls down to -5% again, we buy 1.5x more\n        # If that falls once again down to -5%, we buy 1.75x more\n        # Total stake for this trade would be 1 + 1.25 + 1.5 + 1.75 = 5.5x of the initial allowed stake.\n        # That is why max_dca_multiplier is 5.5\n        # Hope you have a deep wallet!\n        try:\n            # This returns first order stake size\n            stake_amount = filled_entries[0].stake_amount_filled\n            # This then calculates current safety order size\n            stake_amount = stake_amount * (1 + (count_of_entries * 0.25))\n            return stake_amount, \"1/3rd_increase\"\n        except Exception as exception:\n            return None\n\n        return None\n","type":"content","url":"/strategy-callbacks#id-24","position":75},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"仓位调整计算","lvl3":"调整交易仓位","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-25","position":76},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"仓位调整计算","lvl3":"调整交易仓位","lvl2":"策略回调"},"content":"入场价格使用加权平均计算。\n\n出场不会影响平均入场价格。\n\n部分出场的相对利润是相对于此时的平均入场价格。\n\n最终出场的相对利润是基于总投资资本计算的。（见下面的例子）\n\n计算示例\n\n此示例假设零手续费，且为一个虚拟币的多头仓位。\n\n买入 100@8$\n\n买入 100@9$ -> 平均价格：8.5$\n\n卖出 100@10$ -> 平均价格：8.5$，已实现利润 150$，17.65%\n\n买入 150@11$ -> 平均价格：10$，已实现利润 150$，17.65%\n\n卖出 100@12$ -> 平均价格：10$，总已实现利润 350$，20%\n\n卖出 150@14$ -> 平均价格：10$，总已实现利润 950$，40%  <- 这将是最后的\"出场\"消息\n\n这笔交易的总利润是 950$，总投资为 3350$（100@8$ + 100@9$ + 150@11$）。因此，最终相对利润为 28.35%（950 / 3350）。","type":"content","url":"/strategy-callbacks#id-25","position":77},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"调整订单价格","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-26","position":78},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"调整订单价格","lvl2":"策略回调"},"content":"策略开发者可以使用 adjust_order_price() 回调在新K线到达时刷新/替换限价订单。\n\n除非订单在当前K线内已被（重新）放置，否则此回调在每次迭代时都会被调用一次 - 限制每个订单的最大（重新）放置次数为每根K线一次。\n\n这也意味着第一次调用将在初始订单放置后的下一根K线开始时进行。\n\n请注意，custom_entry_price()/custom_exit_price() 仍然是在信号发出时决定初始限价订单价格目标的方法。\n\n可以通过返回 None 来取消此回调中的订单。\n\n返回 current_order_rate 将保持订单在交易所\"原样\"。\n\n返回任何其他价格将取消现有订单，并替换为新订单。\n\n如果原始订单的取消失败，则不会替换订单 - 尽管订单很可能已在交易所被取消。如果这种情况发生在初始入场时，将导致订单被删除，而在仓位调整订单中，将导致交易规模保持不变。如果订单已部分成交，则不会替换订单。但是，如果需要/希望，你可以使用 \n\nadjust_trade_position() 来调整交易规模到预期的仓位大小。\n\n常规超时\n\n入场 unfilledtimeout 机制（以及 check_entry_timeout()/check_exit_timeout()）优先于此回调。\n\n通过上述方法取消的订单不会调用此回调。请确保更新超时值以符合你的预期。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n\n    # ... populate_* methods\n\n    def adjust_order_price(\n        self,\n        trade: Trade,\n        order: Order | None,\n        pair: str,\n        current_time: datetime,\n        proposed_rate: float,\n        current_order_rate: float,\n        entry_tag: str | None,\n        side: str,\n        is_entry: bool,\n        **kwargs,\n    ) -> float | None:\n        \"\"\"\n        Exit and entry order price re-adjustment logic, returning the user desired limit price.\n        This only executes when a order was already placed, still open (unfilled fully or partially)\n        and not timed out on subsequent candles after entry trigger.\n\n        For full documentation please go to https://www.freqtrade.io/en/latest/strategy-callbacks/\n\n        When not implemented by a strategy, returns current_order_rate as default.\n        If current_order_rate is returned then the existing order is maintained.\n        If None is returned then order gets canceled but not replaced by a new one.\n\n        :param pair: Pair that's currently analyzed\n        :param trade: Trade object.\n        :param order: Order object\n        :param current_time: datetime object, containing the current datetime\n        :param proposed_rate: Rate, calculated based on pricing settings in entry_pricing.\n        :param current_order_rate: Rate of the existing order in place.\n        :param entry_tag: Optional entry_tag (buy_tag) if provided with the buy signal.\n        :param side: 'long' or 'short' - indicating the direction of the proposed trade\n        :param is_entry: True if the order is an entry order, False if it's an exit order.\n        :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.\n        :return float or None: New entry price value if provided\n        \"\"\"\n\n        # Limit entry orders to use and follow SMA200 as price target for the first 10 minutes since entry trigger for BTC/USDT pair.\n        if (\n            is_entry\n            and pair == \"BTC/USDT\" \n            and entry_tag == \"long_sma200\" \n            and side == \"long\" \n            and (current_time - timedelta(minutes=10)) <= trade.open_date_utc\n        ):\n            # just cancel the order if it has been filled more than half of the amount\n            if order.filled > order.remaining:\n                return None\n            else:\n                dataframe, _ = self.dp.get_analyzed_dataframe(pair=pair, timeframe=self.timeframe)\n                current_candle = dataframe.iloc[-1].squeeze()\n                # desired price\n                return current_candle[\"sma_200\"]\n        # default: maintain existing order\n        return current_order_rate\n\n与 adjust_*_price() 的不兼容性\n\n如果你同时实现了 adjust_order_price() 和 adjust_entry_price()/adjust_exit_price()，则只会使用 adjust_order_price()。\n\n如果你需要调整入场/出场价格，你可以选择在 adjust_order_price() 中实现逻辑，或者使用分开的 adjust_entry_price() / adjust_exit_price() 回调，但不能同时使用两者。\n\n混合使用这些功能是不支持的，会在机器人启动时引发错误。","type":"content","url":"/strategy-callbacks#id-26","position":79},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"调整入场价格","lvl3":"调整订单价格","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-27","position":80},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"调整入场价格","lvl3":"调整订单价格","lvl2":"策略回调"},"content":"策略开发者可以使用 adjust_entry_price() 回调在新K线到达时刷新/替换入场限价订单。\n\n这是 adjust_order_price() 的一个子集，仅用于入场订单。\n\n其余所有行为与 adjust_order_price() 相同。\n\n交易开始日期（trade.open_date_utc）将保持在第一个订单放置的时间。\n\n请确保注意这一点 - 并相应地调整其他回调中的逻辑，使用第一个成交订单的日期。","type":"content","url":"/strategy-callbacks#id-27","position":81},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"调整出场价格","lvl3":"调整订单价格","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-28","position":82},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"调整出场价格","lvl3":"调整订单价格","lvl2":"策略回调"},"content":"策略开发者可以使用 adjust_exit_price() 回调在新K线到达时刷新/替换出场限价订单。\n\n这是 adjust_order_price() 的一个子集，仅用于出场订单。\n\n其余所有行为与 adjust_order_price() 相同。","type":"content","url":"/strategy-callbacks#id-28","position":83},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"杠杆回调","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-29","position":84},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"杠杆回调","lvl2":"策略回调"},"content":"在允许杠杆交易的市场中，此方法必须返回所需的杠杆倍数（默认为 1 -> 无杠杆）。\n\n假设资金为 500USDT，杠杆倍数为 3 的交易将产生 500 x 3 = 1500 USDT 的仓位。\n\n超过 max_leverage 的值将被调整为 max_leverage。\n对于不支持杠杆的市场/交易所，此方法将被忽略。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n    def leverage(self, pair: str, current_time: datetime, current_rate: float,\n                 proposed_leverage: float, max_leverage: float, entry_tag: str | None, side: str,\n                 **kwargs) -> float:\n        \"\"\"\n        Customize leverage for each new trade. This method is only called in futures mode.\n\n        :param pair: Pair that's currently analyzed\n        :param current_time: datetime object, containing the current datetime\n        :param current_rate: Rate, calculated based on pricing settings in exit_pricing.\n        :param proposed_leverage: A leverage proposed by the bot.\n        :param max_leverage: Max leverage allowed on this pair\n        :param entry_tag: Optional entry_tag (buy_tag) if provided with the buy signal.\n        :param side: \"long\" or \"short\" - indicating the direction of the proposed trade\n        :return: A leverage amount, which is between 1.0 and max_leverage.\n        \"\"\"\n        return 1.0\n\n所有利润计算都包含杠杆。止损和 ROI 的计算也包含杠杆。\n\n在 10 倍杠杆下设置 10% 的止损，将在价格下跌 1% 时触发止损。","type":"content","url":"/strategy-callbacks#id-29","position":85},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"订单成交回调","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-30","position":86},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"订单成交回调","lvl2":"策略回调"},"content":"order_filled() 回调可用于在订单成交后根据当前交易状态执行特定操作。\n\n它将独立于订单类型（入场、出场、止损或仓位调整）被调用。\n\n假设你的策略需要在开仓时存储该 K 线的最高价，可以通过如下示例所示的回调实现这一点。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n    def order_filled(self, pair: str, trade: Trade, order: Order, current_time: datetime, **kwargs) -> None:\n        \"\"\"\n        Called right after an order fills. \n        Will be called for all order types (entry, exit, stoploss, position adjustment).\n        :param pair: Pair for trade\n        :param trade: trade object.\n        :param order: Order object.\n        :param current_time: datetime object, containing the current datetime\n        :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.\n        \"\"\"\n        # Obtain pair dataframe (just to show how to access it)\n        dataframe, _ = self.dp.get_analyzed_dataframe(trade.pair, self.timeframe)\n        last_candle = dataframe.iloc[-1].squeeze()\n        \n        if (trade.nr_of_successful_entries == 1) and (order.ft_order_side == trade.entry_side):\n            trade.set_custom_data(key=\"entry_candle_high\", value=last_candle[\"high\"])\n\n        return None\n","type":"content","url":"/strategy-callbacks#id-30","position":87},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"图表注释回调","lvl2":"策略回调"},"type":"lvl3","url":"/strategy-callbacks#id-31","position":88},{"hierarchy":{"lvl1":"策略回调指南","lvl3":"图表注释回调","lvl2":"策略回调"},"content":"每当 freqUI 请求显示图表数据时，都会调用图表注释回调。\n此回调在交易周期中没有实际意义，仅用于图表展示。\n\n策略可以返回一个 AnnotationType 对象列表，这些对象会显示在图表上。\n根据返回内容，图表可以显示水平区域、垂直区域或框选区域。\n\n完整对象如下所示：{\n    \"type\": \"area\", // Type of the annotation, currently only \"area\" is supported\n    \"start\": \"2024-01-01 15:00:00\", // Start date of the area\n    \"end\": \"2024-01-01 16:00:00\",  // End date of the area\n    \"y_start\": 94000.2,  // Price / y axis value\n    \"y_end\": 98000, // Price / y axis value\n    \"color\": \"\",\n    \"label\": \"some label\"\n}\n\n下面的示例将在图表上标记第 8 小时和第 15 小时的区域，使用灰色突出显示市场开盘和收盘时间。\n这显然是一个非常基础的示例。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n    def plot_annotations(\n        self, pair: str, start_date: datetime, end_date: datetime, dataframe: DataFrame, **kwargs\n    ) -> list[AnnotationType]:\n        \"\"\"\n        Retrieve area annotations for a chart.\n        Must be returned as array, with type, label, color, start, end, y_start, y_end.\n        All settings except for type are optional - though it usually makes sense to include either\n        \"start and end\" or \"y_start and y_end\" for either horizontal or vertical plots\n        (or all 4 for boxes).\n        :param pair: Pair that's currently analyzed\n        :param start_date: Start date of the chart data being requested\n        :param end_date: End date of the chart data being requested\n        :param dataframe: DataFrame with the analyzed data for the chart\n        :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.\n        :return: List of AnnotationType objects\n        \"\"\"\n        annotations = []\n        while start_dt < end_date:\n            start_dt += timedelta(hours=1)\n            if start_dt.hour in (8, 15):\n                annotations.append(\n                    {\n                        \"type\": \"area\",\n                        \"label\": \"Trade open and close hours\",\n                        \"start\": start_dt,\n                        \"end\": start_dt + timedelta(hours=1),\n                        # Omitting y_start and y_end will result in a vertical area spanning the whole height of the main Chart\n                        \"color\": \"rgba(133, 133, 133, 0.4)\",\n                    }\n                )\n\n        return annotations\n\n\n所有条目都将被验证，如果不符合预期的模式，将不会被传递给 UI，并且会记录错误。\n\n过多图片注释\n\n使用过多注释可能导致 UI 卡顿，特别是在绘制大量历史数据时。\n\n请谨慎使用注释功能。","type":"content","url":"/strategy-callbacks#id-31","position":89},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"图表注释示例","lvl3":"图表注释回调","lvl2":"策略回调"},"type":"lvl4","url":"/strategy-callbacks#id-32","position":90},{"hierarchy":{"lvl1":"策略回调指南","lvl4":"图表注释示例","lvl3":"图表注释回调","lvl2":"策略回调"},"content":"\n\n\n上图使用的代码\n\n这是一个示例代码，仅供参考。# Default imports\n\nclass AwesomeStrategy(IStrategy):\n    def plot_annotations(\n        self, pair: str, start_date: datetime, end_date: datetime, dataframe: DataFrame, **kwargs\n    ) -> list[AnnotationType]:\n        annotations = []\n        while start_dt < end_date:\n            start_dt += timedelta(hours=1)\n            if (start_dt.hour % 4) == 0:\n                mark_areas.append(\n                    {\n                        \"type\": \"area\",\n                        \"label\": \"4h\",\n                        \"start\": start_dt,\n                        \"end\": start_dt + timedelta(hours=1),\n                        \"color\": \"rgba(133, 133, 133, 0.4)\",\n                    }\n                )\n            elif (start_dt.hour % 2) == 0:\n            price = dataframe.loc[dataframe[\"date\"] == start_dt, [\"close\"]].mean()\n                mark_areas.append(\n                    {\n                        \"type\": \"area\",\n                        \"label\": \"2h\",\n                        \"start\": start_dt,\n                        \"end\": start_dt + timedelta(hours=1),\n                        \"y_end\": price * 1.01,\n                        \"y_start\": price * 0.99,\n                        \"color\": \"rgba(0, 255, 0, 0.4)\",\n                    }\n                )\n\n        return annotations\n","type":"content","url":"/strategy-callbacks#id-32","position":91},{"hierarchy":{"lvl1":"策略自定义指南"},"type":"lvl1","url":"/strategy-customization","position":0},{"hierarchy":{"lvl1":"策略自定义指南"},"content":"","type":"content","url":"/strategy-customization","position":1},{"hierarchy":{"lvl1":"策略自定义指南","lvl2":"策略自定义"},"type":"lvl2","url":"/strategy-customization#id","position":2},{"hierarchy":{"lvl1":"策略自定义指南","lvl2":"策略自定义"},"content":"本页将介绍如何自定义你的策略、添加新指标以及设置交易规则。\n\n如果你还没有了解过，建议先阅读：\n\nFreqtrade 策略 101，快速入门策略开发\n\nFreqtrade 机器人基础，了解机器人整体运行机制","type":"content","url":"/strategy-customization#id","position":3},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"开发你自己的策略","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-1","position":4},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"开发你自己的策略","lvl2":"策略自定义"},"content":"机器人自带了一个默认策略文件。\n\n此外，\n\n策略仓库中还提供了其他策略。\n\n不过你很可能有自己的策略想法。\n\n本文档旨在帮助你将想法转化为可运行的策略。","type":"content","url":"/strategy-customization#id-1","position":5},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"生成策略模板","lvl3":"开发你自己的策略","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-2","position":6},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"生成策略模板","lvl3":"开发你自己的策略","lvl2":"策略自定义"},"content":"你可以通过以下命令快速开始：freqtrade new-strategy --strategy AwesomeStrategy\n\n这会基于模板创建一个名为 AwesomeStrategy 的新策略，文件路径为 user_data/strategies/AwesomeStrategy.py。\n\nWarning\n\n策略的名称和文件名是有区别的。大多数命令中，Freqtrade 使用的是策略类名，而不是文件名。\n\nnew-strategy 命令生成的示例策略并不会直接盈利。\n\n不同模板级别\n\nfreqtrade new-strategy 有一个额外参数 --template，可控制生成策略的复杂程度。用 --template minimal 可获得一个空白策略，无任何指标示例；用 --template advanced 可获得包含更多复杂特性的模板。","type":"content","url":"/strategy-customization#id-2","position":7},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"策略结构剖析","lvl3":"开发你自己的策略","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-3","position":8},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"策略结构剖析","lvl3":"开发你自己的策略","lvl2":"策略自定义"},"content":"一个策略文件包含构建策略逻辑所需的全部信息：\n\nK线数据（OHLCV 格式）\n\n各类指标\n\n入场逻辑\n\n信号\n\n出场逻辑\n\n信号\n\n最小收益率（ROI）\n\n回调函数（自定义函数）\n\n止损\n\n固定/绝对止损\n\n跟踪止损\n\n回调函数（自定义函数）\n\n定价（可选）\n\n持仓调整（可选）\n\n机器人自带一个名为 SampleStrategy 的示例策略，可作为参考：user_data/strategies/sample_strategy.py。\n你可以用参数 --strategy SampleStrategy 进行测试。注意这里用的是策略类名，而不是文件名。\n\n此外，还有一个名为 INTERFACE_VERSION 的属性，用于定义策略接口的版本。当前版本为 3，如果未在策略中显式设置，则默认为 3。\n\n你可能会看到旧策略设置为接口版本 2，未来版本会要求升级到 v3。\n\n用 trade 命令即可启动机器人进入 dry 或 live 模式：freqtrade trade --strategy AwesomeStrategy","type":"content","url":"/strategy-customization#id-3","position":9},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"机器人运行模式","lvl3":"开发你自己的策略","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-4","position":10},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"机器人运行模式","lvl3":"开发你自己的策略","lvl2":"策略自定义"},"content":"Freqtrade 策略可在 5 种主要模式下被机器人处理：\n\n回测（backtesting）\n\n超参优化（hyperopting）\n\n模拟盘（dry/forward testing）\n\n实盘（live）\n\nFreqAI（本页不涉及）\n\n关于如何设置 dry 或 live 模式，请查阅\n\n配置文档。\n\n测试时请始终使用 dry 模式，这样可以在不冒资金风险的情况下了解策略实际表现。","type":"content","url":"/strategy-customization#id-4","position":11},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-5","position":12},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"以下内容将以 \n\nuser​_data​/strategies​/sample​_strategy​.py 为参考。\n\n策略与回测\n\n为避免回测与 dry/live 模式下出现问题和意外差异，请注意回测时 populate_*() 方法会一次性传入完整时间区间。\n\n因此建议使用向量化操作（针对整个 dataframe，而非循环），避免用 df.iloc[-1]，而应用 df.shift() 获取前一根K线。\n\n警惕未来数据\n\n回测时 populate_*() 方法会传入完整时间区间，策略作者需确保不使用未来数据。\n\n常见错误模式见文档后面的\n\n常见错误章节。\n\n前视与递归分析\n\nFreqtrade 提供了两条命令帮助检测常见的前视（未来数据）和递归偏差（指标值方差）问题。在 dry/live 前，建议先用 \n\nlookahead 和 \n\nrecursive 工具分析。","type":"content","url":"/strategy-customization#id-5","position":13},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"DataFrame","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#dataframe","position":14},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"DataFrame","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"Freqtrade 使用 \n\npandas 存储/提供 K 线（OHLCV）数据。\nPandas 是处理表格数据的强大库。\n\nDataFrame 的每一行对应一根K线，最新的完整K线总是排在最后（按日期排序）。\n\n用 pandas 的 head() 查看前几行：> dataframe.head()\n                       date      open      high       low     close     volume\n0 2021-11-09 23:25:00+00:00  67279.67  67321.84  67255.01  67300.97   44.62253\n1 2021-11-09 23:30:00+00:00  67300.97  67301.34  67183.03  67187.01   61.38076\n2 2021-11-09 23:35:00+00:00  67187.02  67187.02  67031.93  67123.81  113.42728\n3 2021-11-09 23:40:00+00:00  67123.80  67222.40  67080.33  67160.48   78.96008\n4 2021-11-09 23:45:00+00:00  67160.48  67160.48  66901.26  66943.37  111.39292\n\nDataFrame 是一个表格，列不是单一值，而是一组数据。因此，像下面这样直接用 Python 比较会报错：    if dataframe['rsi'] > 30:\n        dataframe['enter_long'] = 1\n\n上述写法会报错：The truth value of a Series is ambiguous [...]。\n\n应改为 pandas 向量化写法，对整个 dataframe 执行操作：    dataframe.loc[\n        (dataframe['rsi'] > 30)\n    , 'enter_long'] = 1\n\n这样会在 RSI 大于 30 时，为新列 enter_long 赋值 1。\n\nFreqtrade 会用这个新列作为入场信号，假定下一根K线开盘时开仓。\n\nPandas 支持高效的向量化计算，建议尽量避免循环，直接用向量化方法。\n\n向量化操作会对整列数据进行计算，比逐行循环快得多。\n\n信号 vs 交易\n\n信号由指标在K线收盘时生成，表示有意愿开仓。\n\n交易是在实际下单（实盘时在交易所），会尽量在下一根K线开盘时成交。\n\n交易下单假设\n\n回测时，信号在K线收盘时生成，交易在下一根K线开盘时执行。\n\ndry/live 模式下，因需先分析所有交易对 dataframe，再处理下单，可能有延迟。建议减少交易对数量，并用高主频 CPU。","type":"content","url":"/strategy-customization#dataframe","position":15},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"为什么看不到\"实时\"K线数据？","lvl4":"DataFrame","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl5","url":"/strategy-customization#id-k","position":16},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"为什么看不到\"实时\"K线数据？","lvl4":"DataFrame","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"Freqtrade 不会在 dataframe 中存储未完成/未收盘的K线。\n\n用未完成数据做决策叫\"重绘\"，有些平台允许，但 Freqtrade 不支持。只有完整K线数据可用。","type":"content","url":"/strategy-customization#id-k","position":17},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"自定义指标","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-6","position":18},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"自定义指标","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"入场和出场信号需要用到指标。你可以在策略文件的 populate_indicators() 方法中添加更多指标。\n\n只应添加在 populate_entry_trend()、populate_exit_trend() 或用于生成其他指标的指标，否则会影响性能。\n\n务必返回 dataframe，且不要删除/修改 “open”, “high”, “low”, “close”, “volume” 这几列，否则会导致异常。\n\n示例：def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    \"\"\"\n    为给定 DataFrame 添加多种技术指标\n\n    性能提示：为获得最佳性能，请只用你策略或超参优化用到的指标，否则会浪费内存和 CPU。\n    :param dataframe: 交易所数据 DataFrame\n    :param metadata: 额外信息，如当前交易对\n    :return: 包含所有策略所需指标的 DataFrame\n    \"\"\"\n    dataframe['sar'] = ta.SAR(dataframe)\n    dataframe['adx'] = ta.ADX(dataframe)\n    stoch = ta.STOCHF(dataframe)\n    dataframe['fastd'] = stoch['fastd']\n    dataframe['fastk'] = stoch['fastk']\n    dataframe['bb_lower'] = ta.BBANDS(dataframe, nbdevup=2, nbdevdn=2)['lowerband']\n    dataframe['sma'] = ta.SMA(dataframe, timeperiod=40)\n    dataframe['tema'] = ta.TEMA(dataframe, timeperiod=9)\n    dataframe['mfi'] = ta.MFI(dataframe)\n    dataframe['rsi'] = ta.RSI(dataframe)\n    dataframe['ema5'] = ta.EMA(dataframe, timeperiod=5)\n    dataframe['ema10'] = ta.EMA(dataframe, timeperiod=10)\n    dataframe['ema50'] = ta.EMA(dataframe, timeperiod=50)\n    dataframe['ema100'] = ta.EMA(dataframe, timeperiod=100)\n    dataframe['ao'] = awesome_oscillator(dataframe)\n    macd = ta.MACD(dataframe)\n    dataframe['macd'] = macd['macd']\n    dataframe['macdsignal'] = macd['macdsignal']\n    dataframe['macdhist'] = macd['macdhist']\n    hilbert = ta.HT_SINE(dataframe)\n    dataframe['htsine'] = hilbert['sine']\n    dataframe['htleadsine'] = hilbert['leadsine']\n    dataframe['plus_dm'] = ta.PLUS_DM(dataframe)\n    dataframe['plus_di'] = ta.PLUS_DI(dataframe)\n    dataframe['minus_dm'] = ta.MINUS_DM(dataframe)\n    dataframe['minus_di'] = ta.MINUS_DI(dataframe)\n\n    # 记得始终返回 dataframe\n    return dataframe\n\n想要更多指标示例？\n\n请参考 \n\nuser​_data​/strategies​/sample​_strategy​.py，取消注释你需要的指标。","type":"content","url":"/strategy-customization#id-6","position":19},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"指标库","lvl4":"自定义指标","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl5","url":"/strategy-customization#id-7","position":20},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"指标库","lvl4":"自定义指标","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"Freqtrade 默认安装了以下技术指标库：\n\nta-lib\n\npandas-ta\n\ntechnical\n\n如有需要可安装其他技术指标库，或自行编写自定义指标。","type":"content","url":"/strategy-customization#id-7","position":21},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"策略启动期","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-8","position":22},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"策略启动期","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"部分指标在启动初期因数据不足会出现 NaN 或计算不准确。Freqtrade 无法自动判断不稳定期长度，会直接用 dataframe 中的指标值。\n\n为此，策略可设置 startup_candle_count 属性。\n\n该值应设为策略中所有指标所需的最大历史K线数。若用到高阶时间周期 informative pair，startup_candle_count 也无需改变，只需用最大周期。\n\n可用 \n\nrecursive-analysis 检查合适的 startup_candle_count。当递归分析显示方差为 0% 时，说明历史数据已足够。\n\n如本例策略用到 ema100，则应设为 400（startup_candle_count = 400），以保证 ema100 计算准确。    dataframe['ema100'] = ta.EMA(dataframe, timeperiod=100)\n\n告知机器人所需历史长度后，回测和超参优化可从指定时间点开始。\n\n多次获取 OHLCV 的警告\n\n若收到 WARNING - Using 3 calls to get OHLCV...，请考虑是否真的需要这么多历史数据。过多会导致多次网络请求，拖慢机器人刷新速度。\n\n最多允许 5 次请求，避免过载。\n\nWarning\n\nstartup_candle_count 应小于 ohlcv_candle_limit * 5（大多数交易所为 500 * 5），Dry-Run/Live 模式下只会有这么多K线。","type":"content","url":"/strategy-customization#id-8","position":23},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"示例","lvl4":"策略启动期","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl5","url":"/strategy-customization#id-9","position":24},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"示例","lvl4":"策略启动期","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"假设用 EMA100 策略回测 2019 年 1 月的 5m K 线：freqtrade backtesting --timerange 20190101-20190201 --timeframe 5m\n\n若 startup_candle_count 设为 400，回测会自动加载 400 根K线的历史数据，即从 20190101 - (400 * 5m)，约等于 2018-12-30 11:40:00。\n\n若有该数据，指标会用扩展时间段计算，启动期（到 2019-01-01 00:00:00）会被剔除。\n\n启动期数据不可用\n\n若历史数据不足，回测会自动调整起始时间。例如本例会从 2019-01-02 09:20:00 开始。","type":"content","url":"/strategy-customization#id-9","position":25},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"入场信号规则","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-10","position":26},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"入场信号规则","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"编辑策略文件中的 populate_entry_trend() 方法，更新入场逻辑。\n\n务必返回 dataframe，且不要删除/修改 “open”, “high”, “low”, “close”, “volume” 这几列，否则会导致异常。\n\n该方法还需定义新列 enter_long（做空为 enter_short），入场时为 1，无操作为 0。即使只做空也必须设置 enter_long。\n\n可用 enter_tag 列为信号命名，便于后续调试和分析。\n\n示例（来自 sample_strategy.py）：def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    \"\"\"\n    基于技术指标，为给定 dataframe 生成买入信号\n    :param dataframe: 已填充指标的 DataFrame\n    :param metadata: 额外信息，如当前交易对\n    :return: 包含买入信号的 DataFrame\n    \"\"\"\n    dataframe.loc[\n        (\n            (qtpylib.crossed_above(dataframe['rsi'], 30)) &  # RSI 上穿 30\n            (dataframe['tema'] <= dataframe['bb_middleband']) &  # 条件\n            (dataframe['tema'] > dataframe['tema'].shift(1)) &  # 条件\n            (dataframe['volume'] > 0)  # 确保有成交量\n        ),\n        ['enter_long', 'enter_tag']] = (1, 'rsi_cross')\n\n    return dataframe\n\n做空信号\n\n做空可通过设置 enter_short（对应多头的 enter_long）实现。\nenter_tag 列用法相同。\n做空需交易所和市场支持！如需做空，务必设置 \n\ncan_short 为 True。# 支持多空\ncan_short = True\n\ndef populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            (qtpylib.crossed_above(dataframe['rsi'], 30)) &\n            (dataframe['tema'] <= dataframe['bb_middleband']) &\n            (dataframe['tema'] > dataframe['tema'].shift(1)) &\n            (dataframe['volume'] > 0)\n        ),\n        ['enter_long', 'enter_tag']] = (1, 'rsi_cross')\n\n    dataframe.loc[\n        (\n            (qtpylib.crossed_below(dataframe['rsi'], 70)) &\n            (dataframe['tema'] > dataframe['bb_middleband']) &\n            (dataframe['tema'] < dataframe['tema'].shift(1)) &\n            (dataframe['volume'] > 0)\n        ),\n        ['enter_short', 'enter_tag']] = (1, 'rsi_cross')\n\n    return dataframe\n\nTip\n\n买入需要有卖方，因此需 dataframe['volume'] > 0，避免在无成交量时买入/卖出。","type":"content","url":"/strategy-customization#id-10","position":27},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"出场信号规则","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-11","position":28},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"出场信号规则","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"编辑策略文件中的 populate_exit_trend() 方法，更新出场逻辑。\n\n可通过在配置或策略中设置 use_exit_signal 为 false 禁用出场信号。\n\nuse_exit_signal 不影响\n\n信号冲突规则，后者仍然生效，可能阻止入场。\n\n务必返回 dataframe，且不要删除/修改 “open”, “high”, “low”, “close”, “volume” 这几列，否则会导致异常。\n\n该方法还需定义新列 exit_long（做空为 exit_short），出场时为 1，无操作为 0。\n\n可用 exit_tag 列为信号命名，便于后续调试和分析。\n\n示例（来自 sample_strategy.py）：def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    \"\"\"\n    基于技术指标，为给定 dataframe 生成卖出信号\n    :param dataframe: 已填充指标的 DataFrame\n    :param metadata: 额外信息，如当前交易对\n    :return: 包含卖出信号的 DataFrame\n    \"\"\"\n    dataframe.loc[\n        (\n            (qtpylib.crossed_above(dataframe['rsi'], 70)) &  # RSI 上穿 70\n            (dataframe['tema'] > dataframe['bb_middleband']) &  # 条件\n            (dataframe['tema'] < dataframe['tema'].shift(1)) &  # 条件\n            (dataframe['volume'] > 0)  # 确保有成交量\n        ),\n        ['exit_long', 'exit_tag']] = (1, 'rsi_too_high')\n    return dataframe\n\n做空平仓\n\n做空平仓可通过设置 exit_short（对应多头的 exit_long）实现。\n\nexit_tag 列用法相同。\n\n做空需交易所和市场支持！如需做空，务必设置 \n\ncan_short 为 True。    # 支持多空\n    can_short = True\n\n    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        dataframe.loc[\n            (\n                (qtpylib.crossed_above(dataframe['rsi'], 70)) &\n                (dataframe['tema'] > dataframe['bb_middleband']) &\n                (dataframe['tema'] < dataframe['tema'].shift(1)) &\n                (dataframe['volume'] > 0)\n            ),\n            ['exit_long', 'exit_tag']] = (1, 'rsi_too_high')\n        dataframe.loc[\n            (\n                (qtpylib.crossed_below(dataframe['rsi'], 30)) &\n                (dataframe['tema'] < dataframe['bb_middleband']) &\n                (dataframe['tema'] > dataframe['tema'].shift(1)) &\n                (dataframe['volume'] > 0)\n            ),\n            ['exit_short', 'exit_tag']] = (1, 'rsi_too_low')\n        return dataframe","type":"content","url":"/strategy-customization#id-11","position":29},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"最小收益率（ROI）","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-roi","position":30},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"最小收益率（ROI）","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"minimal_roi 策略变量定义了交易在退出前应达到的最小收益率，与出场信号无关。\n\n格式如下，是一个 python 字典，键为开仓后经过的分钟数，值为百分比：minimal_roi = {\n    \"40\": 0.0,\n    \"30\": 0.01,\n    \"20\": 0.02,\n    \"0\": 0.04\n}\n\n上述配置含义：\n\n达到 4% 盈利时退出\n\n20 分钟后达到 2% 盈利时退出\n\n30 分钟后达到 1% 盈利时退出\n\n40 分钟后只要不亏损就退出\n\n计算时包含手续费。","type":"content","url":"/strategy-customization#id-roi","position":31},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"禁用最小 ROI","lvl4":"最小收益率（ROI）","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl5","url":"/strategy-customization#id-roi-1","position":32},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"禁用最小 ROI","lvl4":"最小收益率（ROI）","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"如需完全禁用 ROI，将其设为空字典：minimal_roi = {}","type":"content","url":"/strategy-customization#id-roi-1","position":33},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"ROI 中用计算表达式","lvl4":"最小收益率（ROI）","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl5","url":"/strategy-customization#roi","position":34},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"ROI 中用计算表达式","lvl4":"最小收益率（ROI）","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"如需按K线周期（timeframe）设置时间，可用如下写法：from freqtrade.exchange import timeframe_to_minutes\n\nclass AwesomeStrategy(IStrategy):\n\n    timeframe = \"1d\"\n    timeframe_mins = timeframe_to_minutes(timeframe)\n    minimal_roi = {\n        \"0\": 0.05,                      # 前 3 根 K 线 5%\n        str(timeframe_mins * 3): 0.02,  # 3 根 K 线后 2%\n        str(timeframe_mins * 6): 0.01,  # 6 根 K 线后 1%\n    }\n\n未立即成交的订单\n\nminimal_roi 以 trade.open_date 为基准，即首次下单时间。\n\n对于未立即成交的限价单（如用 custom_entry_price()），或用 adjust_entry_price() 调整价格的情况，时间仍以首次下单为准。","type":"content","url":"/strategy-customization#roi","position":35},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"止损","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-12","position":36},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"止损","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"强烈建议设置止损，以保护资金免受极端行情影响。\n\n如设置 10% 止损：stoploss = -0.10\n\n更多止损功能详见\n\n止损专页。","type":"content","url":"/strategy-customization#id-12","position":37},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"时间周期（Timeframe）","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-timeframe","position":38},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"时间周期（Timeframe）","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"即策略用的K线周期。\n\n常见值有 “1m”、“5m”、“15m”、“1h”，也可用交易所支持的其他周期。\n\n同一入场/出场信号在不同周期下效果可能完全不同。\n\n在策略方法中可通过 self.timeframe 访问。","type":"content","url":"/strategy-customization#id-timeframe","position":39},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"是否支持做空","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-13","position":40},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"是否支持做空","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"如需在合约市场做空，需设置 can_short = True。\n\n启用后，策略在现货市场会加载失败。\n\n如 enter_short 列有 1，但 can_short = False（默认），则即使配置了合约市场也不会做空。","type":"content","url":"/strategy-customization#id-13","position":41},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"Metadata 字典","lvl3":"深入剖析","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#metadata","position":42},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"Metadata 字典","lvl3":"深入剖析","lvl2":"策略自定义"},"content":"metadata 字典（populate_entry_trend、populate_exit_trend、populate_indicators 可用）包含额外信息。\n目前有 pair，可通过 metadata['pair'] 获取，如 XRP/BTC（合约市场为 XRP/BTC:BTC）。\n\nmetadata 不应被修改，也不会在策略函数间持久化。\n\n如需持久化信息，请查阅\n\n信息存储。\n\n","type":"content","url":"/strategy-customization#metadata","position":43},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"策略所需的导入","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-14","position":44},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"策略所需的导入","lvl2":"策略自定义"},"content":"在创建策略时，你需要导入必要的模块和类。以下是一个策略所需的导入：\n\n默认情况下，我们建议使用以下导入作为策略的基础：\n这将涵盖 freqtrade 功能所需的所有导入。\n当然，你可以根据需要添加更多导入。# flake8: noqa: F401\n# isort: skip_file\n# --- Do not remove these imports ---\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta, timezone\nfrom pandas import DataFrame\nfrom typing import Dict, Optional, Union, Tuple\n\nfrom freqtrade.strategy import (\n    IStrategy,\n    Trade, \n    Order,\n    PairLocks,\n    informative,  # @informative decorator\n    # Hyperopt Parameters\n    BooleanParameter,\n    CategoricalParameter,\n    DecimalParameter,\n    IntParameter,\n    RealParameter,\n    # timeframe helpers\n    timeframe_to_minutes,\n    timeframe_to_next_date,\n    timeframe_to_prev_date,\n    # Strategy helper functions\n    merge_informative_pair,\n    stoploss_from_absolute,\n    stoploss_from_open,\n)\n\n# --------------------------------\n# Add your lib to import here\nimport talib.abstract as ta\nfrom technical import qtpylib","type":"content","url":"/strategy-customization#id-14","position":45},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"策略文件加载","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-15","position":46},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"策略文件加载","lvl2":"策略自定义"},"content":"默认情况下，freqtrade 会尝试从 userdir（默认 user_data/strategies）下所有 .py 文件加载策略。\n\n假设你的策略叫 AwesomeStrategy，文件为 user_data/strategies/AwesomeStrategy.py，可用如下命令 dry（或 live，视配置而定）运行：freqtrade trade --strategy AwesomeStrategy\n\n注意这里用的是类名，不是文件名。\n\n用 freqtrade list-strategies 可查看所有可加载的策略（正确目录下的所有策略）。会有\"状态\"字段，提示潜在问题。\n\n自定义策略目录\n\n可用 --strategy-path user_data/otherPath 指定其他目录。所有需用策略的命令均支持此参数。","type":"content","url":"/strategy-customization#id-15","position":47},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"辅助交易对（Informative Pairs）","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-informative-pairs","position":48},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"辅助交易对（Informative Pairs）","lvl2":"策略自定义"},"content":"","type":"content","url":"/strategy-customization#id-informative-pairs","position":49},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"获取非交易对的数据","lvl3":"辅助交易对（Informative Pairs）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#get-data-for-non-tradeable-pairs","position":50},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"获取非交易对的数据","lvl3":"辅助交易对（Informative Pairs）","lvl2":"策略自定义"},"content":"有些策略需要参考更大周期的其他交易对数据。\n\n这些辅助对的 OHLCV 数据会在常规白名单刷新时一并下载，可通过 DataProvider 获取。\n\n这些对不会被交易，除非也在白名单或被动态白名单（如 VolumePairlist）选中。\n\n需用元组指定，格式为 (\"pair\", \"timeframe\")，第一个为交易对，第二个为周期。\n\n示例：def informative_pairs(self):\n    return [(\"ETH/USDT\", \"5m\"),\n            (\"BTC/TUSD\", \"15m\"),\n            ]\n\n完整示例见\n\nDataProvider 部分。\n\nWarning\n\n这些对会随白名单刷新，建议列表不要太长。\n\n只要交易所支持，所有周期和对都可用。\n\n但建议尽量用重采样方式获取大周期，避免请求过多被封。\n\n其他K线类型\n\ninformative_pairs 还可加第三个元素，显式指定K线类型。\n\n可用性取决于交易模式和交易所。一般现货对不能用于合约市场，反之亦然。\n\n详情见交易所文档。    def informative_pairs(self):\n        return [\n            (\"ETH/USDT\", \"5m\", \"\"),   # 默认 K 线类型，随 trading_mode 变化（推荐）\n            (\"ETH/USDT\", \"5m\", \"spot\"),   # 强制用现货 K 线（仅现货机器人）\n            (\"BTC/TUSD\", \"15m\", \"futures\"),  # 用合约 K 线（仅合约机器人）\n            (\"BTC/TUSD\", \"15m\", \"mark\"),  # 用标记 K 线（仅合约机器人）\n        ]","type":"content","url":"/strategy-customization#get-data-for-non-tradeable-pairs","position":51},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"Informative pairs 装饰器（@informative()）","lvl3":"辅助交易对（Informative Pairs）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#informative-pairs-informative","position":52},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"Informative pairs 装饰器（@informative()）","lvl3":"辅助交易对（Informative Pairs）","lvl2":"策略自定义"},"content":"可用 @informative 装饰器快速定义 informative pair。所有被装饰的 populate_indicators_* 方法独立运行，不能访问其他 informative pair 的数据。但所有 informative dataframe 会合并传递给主 populate_indicators()。\n\nCaution\n\n若需用一个 informative pair 的数据生成另一个 informative pair，请勿用 @informative 装饰器，而应手动定义 informative pair，见\n\nDataProvider 部分。\n\n超参优化时，hyperoptable 参数不支持 .value，请用 .range。见\n\n优化指标参数。\n\n完整文档    def informative(\n        timeframe: str,\n        asset: str = \"\",\n        fmt: str | Callable[[Any], str] | None = None,\n        *,\n        candle_type: CandleType | str | None = None,\n        ffill: bool = True,\n    ) -> Callable[[PopulateIndicators], PopulateIndicators]:\n        \"\"\"\n        用于 populate_indicators_Nn(self, dataframe, metadata) 的装饰器，定义 informative 指标。\n        \n        用法示例：\n\n            @informative('1h')\n            def populate_indicators_1h(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n                dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)\n                return dataframe\n\n        :param timeframe: 辅助K线周期，必须大于等于主策略周期。\n        :param asset: 辅助资产，如 BTC、BTC/USDT、ETH/BTC。不指定则用当前对。支持格式化字符串。\n        :param fmt: 列名格式（str）或格式化函数。默认：\n        * {base}_{quote}_{column}_{timeframe}（指定 asset 时）\n        * {column}_{timeframe}（未指定 asset 时）\n        支持变量：{base}、{BASE}、{quote}、{QUOTE}、{asset}、{column}、{timeframe}\n        :param ffill: informative pair 合并后是否前向填充。\n        :param candle_type: '', mark, index, premiumIndex, funding_rate\n        \"\"\"\n\n快速定义 informative pair\n\n大多数情况下无需用 merge_informative_pair()，可直接用装饰器：\n    from datetime import datetime\n    from freqtrade.persistence import Trade\n    from freqtrade.strategy import IStrategy, informative\n\n    class AwesomeStrategy(IStrategy):\n        \n        # 可省略 informative_pairs 方法\n\n        # 为每个对定义高阶周期 informative pair。可叠加装饰器。\n        @informative('30m')\n        @informative('1h')\n        def populate_indicators_1h(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n            dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)\n            return dataframe\n\n        # 定义 BTC/STAKE informative pair。可用 {stake} 占位符。最终列名如 'btc_usdt_rsi_1h'。\n        @informative('1h', 'BTC/{stake}')\n        def populate_indicators_btc_1h(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n            dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)\n            return dataframe\n\n        # 定义 BTC/ETH informative pair。需指定 quote。最终列名如 'eth_btc_rsi_1h'。\n        @informative('1h', 'ETH/BTC')\n        def populate_indicators_eth_btc_1h(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n            dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)\n            return dataframe\n    \n        # 可自定义列名格式\n        @informative('1h', 'BTC/{stake}', '{column}_{timeframe}')\n        def populate_indicators_btc_1h_2(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n            dataframe['rsi_upper'] = ta.RSI(dataframe, timeperiod=14)\n            return dataframe\n    \n        def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n            dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)\n            dataframe['rsi_less'] = dataframe['rsi'] < dataframe['rsi_1h']\n            return dataframe\n\nAttention\n\n访问其他对的 informative dataframe 时建议用字符串格式化，便于后续更换 stake 货币。    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        stake = self.config['stake_currency']\n        dataframe.loc[\n            (\n                (dataframe[f'btc_{stake}_rsi_1h'] < 35)\n                &\n                (dataframe['volume'] > 0)\n            ),\n            ['enter_long', 'enter_tag']] = (1, 'buy_signal_rsi')\n    \n        return dataframe\n\n或用列重命名去除 stake 货币：@informative('1h', 'BTC/{stake}', fmt='{base}_{column}_{timeframe}')。\n\n方法名重复\n\n被 @informative() 装饰的方法名必须唯一！重复会覆盖前面的定义且无报错，导致部分指标不可用。请仔细检查方法名。","type":"content","url":"/strategy-customization#informative-pairs-informative","position":53},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"merge_informative_pair()","lvl3":"辅助交易对（Informative Pairs）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#merge-informative-pair","position":54},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"merge_informative_pair()","lvl3":"辅助交易对（Informative Pairs）","lvl2":"策略自定义"},"content":"该方法可安全、无前视偏差地将 informative pair 合并到主 dataframe。\n\n功能：\n\n列重命名，避免冲突\n\n无前视偏差合并\n\n可选前向填充\n\n完整示例见\n\n完整数据提供者示例。\n\n所有 informative dataframe 列会以新名字出现在主 dataframe：\n\n列重命名\n\n假设 inf_tf = '1d'，合并后列名如下：    'date', 'open', 'high', 'low', 'close', 'rsi'                     # 原 dataframe\n    'date_1d', 'open_1d', 'high_1d', 'low_1d', 'close_1d', 'rsi_1d'   # informative dataframe\n\n1h 列重命名\n\n假设 inf_tf = '1h'，合并后列名如下：    'date', 'open', 'high', 'low', 'close', 'rsi'                     # 原 dataframe\n    'date_1h', 'open_1h', 'high_1h', 'low_1h', 'close_1h', 'rsi_1h'   # informative dataframe\n\n自定义实现\n\n可自定义实现如下：    # 日期右移 1 根K线\n    # This is necessary since the data is always the \"open date\"\n    # and a 15m candle starting at 12:15 should not know the close of the 1h candle from 12:00 to 13:00\n    minutes = timeframe_to_minutes(inf_tf)\n    # Only do this if the timeframes are different:\n    informative['date_merge'] = informative[\"date\"] + pd.to_timedelta(minutes, 'm')\n\n    # Rename columns to be unique\n    informative.columns = [f\"{col}_{inf_tf}\" for col in informative.columns]\n    # Assuming inf_tf = '1d' - then the columns will now be:\n    # date_1d, open_1d, high_1d, low_1d, close_1d, rsi_1d\n\n    # Combine the 2 dataframes\n    # all indicators on the informative sample MUST be calculated before this point\n    dataframe = pd.merge(dataframe, informative, left_on='date', right_on=f'date_merge_{inf_tf}', how='left')\n    # FFill to have the 1d value available in every row throughout the day.\n    # Without this, comparisons would only work once per day.\n    dataframe = dataframe.ffill()\n\ninformative 周期 < 主周期\n\n用本方法时，不建议 informative 周期小于主 dataframe 周期，否则无法利用更多细节。若需用更细粒度信息，需用更高级方法（超出本文档范围）。","type":"content","url":"/strategy-customization#merge-informative-pair","position":55},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-dataprovider","position":56},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"策略可通过 DataProvider 获取更多数据。\n\n所有方法失败时返回 None，不抛异常。\n\n请根据运行模式选择合适方法（见下文示例）。\n\n超参优化限制\n\nDataProvider 在超参优化时可用，但仅限于策略内的 populate_indicators()，不可用于超参优化类文件。\n\n也不可用于 populate_entry_trend() 和 populate_exit_trend()。","type":"content","url":"/strategy-customization#id-dataprovider","position":57},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"DataProvider 可用方法","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#dataprovider","position":58},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"DataProvider 可用方法","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"available_pairs - 返回缓存的所有对及其周期（pair, timeframe）元组\n\ncurrent_whitelist() - 返回当前白名单对列表，适合动态白名单（如 VolumePairlist）\n\nget_pair_dataframe(pair, timeframe) - 通用方法，回测时返回历史数据，dry/live 时返回缓存数据\n\nget_analyzed_dataframe(pair, timeframe) - 返回分析后的 dataframe 及最新分析时间\n\nhistoric_ohlcv(pair, timeframe) - 返回磁盘上的历史数据\n\nmarket(pair) - 返回交易对市场数据（手续费、限额、精度、活跃标志等）\n\nohlcv(pair, timeframe) - 返回当前缓存的K线数据\n\norderbook(pair, maximum) - 返回最新 orderbook 数据（bids/asks）\n\nticker(pair) - 返回当前 ticker 数据\n\nrunmode - 当前运行模式","type":"content","url":"/strategy-customization#dataprovider","position":59},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"示例用法","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-16","position":60},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"示例用法","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"","type":"content","url":"/strategy-customization#id-16","position":61},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"available_pairs","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#available-pairs","position":62},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"available_pairs","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"for pair, timeframe in self.dp.available_pairs:\n    print(f\"available {pair}, {timeframe}\")","type":"content","url":"/strategy-customization#available-pairs","position":63},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"current_whitelist()","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#current-whitelist","position":64},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"current_whitelist()","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"假设你开发了一个用 5m 周期、用 1d 周期信号的策略，且用 VolumePairList 动态选前 10 个交易对。\n\n策略逻辑如下：\n\n每 5 分钟扫描前 10 个交易对，用 14 日 RSI 生成信号。\n\n因数据有限，无法用 5m K 线重采样成日线。大多数交易所只给 500-1000 根K线，约等于 1.74 天。我们需要至少 14 天！\n\n因此需用 informative pair，且因白名单动态变化，不知用哪些对！\n\n此时可用 self.dp.current_whitelist() 获取当前白名单对。    def informative_pairs(self):\n\n        # 获取白名单所有对\n        pairs = self.dp.current_whitelist()\n        # 为每个对分配周期\n        informative_pairs = [(pair, '1d') for pair in pairs]\n        return informative_pairs\n\ncurrent_whitelist 用于绘图\n\ncurrent_whitelist 不支持 plot-dataframe，也不支持 FreqUI 可视化（webserver 模式），因 webserver 配置无需白名单。","type":"content","url":"/strategy-customization#current-whitelist","position":65},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"get_pair_dataframe(pair, timeframe)","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#get-pair-dataframe-pair-timeframe","position":66},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"get_pair_dataframe(pair, timeframe)","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"# 获取第一个 informative pair 的K线数据\ninf_pair, inf_timeframe = self.informative_pairs()[0]\ninformative = self.dp.get_pair_dataframe(pair=inf_pair,\n                                         timeframe=inf_timeframe)\n\n回测注意\n\n回测时，dp.get_pair_dataframe() 在 populate_*() 方法中返回完整时间区间。请勿\"看未来\"，否则 dry/live 时会有意外。\n\n在 \n\n回调函数 中，则只返回当前（模拟）K线前的数据。","type":"content","url":"/strategy-customization#get-pair-dataframe-pair-timeframe","position":67},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"get_analyzed_dataframe(pair, timeframe)","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#get-analyzed-dataframe-pair-timeframe","position":68},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"get_analyzed_dataframe(pair, timeframe)","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"该方法供 freqtrade 内部用来判断最后信号，也可在特定回调中用来获取触发操作的信号（见\n\n高级策略文档）。# 获取当前 dataframe\ndataframe, last_updated = self.dp.get_analyzed_dataframe(pair=metadata['pair'],\n                                                         timeframe=self.timeframe)\n\n无数据\n\n若请求的对未缓存，返回空 dataframe。可用 if dataframe.empty: 检查。","type":"content","url":"/strategy-customization#get-analyzed-dataframe-pair-timeframe","position":69},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"orderbook(pair, maximum)","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#orderbook-pair-maximum","position":70},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"orderbook(pair, maximum)","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"if self.dp.runmode.value in ('live', 'dry_run'):\n    ob = self.dp.orderbook(metadata['pair'], 1)\n    dataframe['best_bid'] = ob['bids'][0][0]\n    dataframe['best_ask'] = ob['asks'][0][0]\n\norderbook 结构与 \n\nccxt 一致：{\n    'bids': [\n        [ price, amount ],\n        ...\n    ],\n    'asks': [\n        [ price, amount ],\n        ...\n    ],\n}\n\n用 ob['bids'][0][0] 可取最优买价，ob['bids'][0][1] 为该价位数量。\n\n回测注意\n\n订单簿不是历史数据的一部分，这意味着如果使用此方法，回测和超参数优化将无法正常工作，因为该方法将返回最新值。","type":"content","url":"/strategy-customization#orderbook-pair-maximum","position":71},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"ticker(pair)","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#ticker-pair","position":72},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"ticker(pair)","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"if self.dp.runmode.value in ('live', 'dry_run'):\n    ticker = self.dp.ticker(metadata['pair'])\n    dataframe['last_price'] = ticker['last']\n    dataframe['volume24h'] = ticker['quoteVolume']\n    dataframe['vwap'] = ticker['vwap']\n\nWarning\n\n虽然 ticker 数据结构是 ccxt 统一接口的一部分，但不同交易所返回的值可能会有所不同。例如，许多交易所不返回 vwap 值，一些交易所并不总是填充 last 字段（所以它可能为 None）等。因此，您需要仔细验证从交易所返回的 ticker 数据，并添加适当的错误处理/默认值。\n\n回测警告\n\n此方法将始终返回最新/实时值。因此，在回测/超参数优化期间使用而不检查运行模式将导致错误的结果，例如，您的整个 dataframe 将在所有行中包含相同的单个值。","type":"content","url":"/strategy-customization#ticker-pair","position":73},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"发送通知","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-17","position":74},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"发送通知","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"dataprovider 的 .send_msg() 可在策略中发送自定义通知。\n相同的通知在每个蜡烛图期间只会发送一次，除非第二个参数（always_send）设置为 True。    self.dp.send_msg(f\"{metadata['pair']} just got hot!\")\n\n    # 强制发送此通知，避免缓存（请阅读下面的警告！）\n    self.dp.send_msg(f\"{metadata['pair']} just got hot!\", always_send=True)\n\n通知只会在交易模式（实盘/模拟盘）中发送 - 因此可以在回测中无条件调用此方法。\n\n消息轰炸\n\n通过在此方法中设置 always_send=True，您可能会给自己发送大量消息。请谨慎使用此功能，并且只在您知道不会在整个蜡烛图期间频繁触发的情况下使用，以避免每5秒就收到一条消息。","type":"content","url":"/strategy-customization#id-17","position":75},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"完整 DataProvider 示例","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-dataprovider-1","position":76},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"完整 DataProvider 示例","lvl3":"额外数据（DataProvider）","lvl2":"策略自定义"},"content":"from freqtrade.strategy import IStrategy, merge_informative_pair\nfrom pandas import DataFrame\n\nclass SampleStrategy(IStrategy):\n    # 策略初始化...\n\n    timeframe = '5m'\n\n    # ...\n\n    def informative_pairs(self):\n\n        # 获取白名单所有对\n        pairs = self.dp.current_whitelist()\n        # 为每个对分配周期\n        informative_pairs = [(pair, '1d') for pair in pairs]\n        # 可选：添加静态对\n        informative_pairs += [(\"ETH/USDT\", \"5m\"),\n                              (\"BTC/TUSD\", \"15m\"),\n                            ]\n        return informative_pairs\n\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        if not self.dp:\n            # DataProvider 不可用时不做任何操作\n            return dataframe\n\n        inf_tf = '1d'\n        # 获取信息对\n        informative = self.dp.get_pair_dataframe(pair=metadata['pair'], timeframe=inf_tf)\n        # 获取14天RSI\n        informative['rsi'] = ta.RSI(informative, timeperiod=14)\n\n        # 使用辅助函数 merge_informative_pair 安全地合并交易对\n        # 自动重命名列并合并较短时间周期的 dataframe 和较长时间周期的信息对\n        # 使用 ffill 使1天的值在一天中的每一行都可用\n        # 如果没有这个，原始数据框和信息对的列之间的比较每天只能进行一次\n        # 此方法的完整文档，见下文\n        dataframe = merge_informative_pair(dataframe, informative, self.timeframe, inf_tf, ffill=True)\n\n        # 计算原始数据框的RSI（5分钟时间周期）\n        dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)\n\n        # 其他操作\n        # ...\n\n        return dataframe\n\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n\n        dataframe.loc[\n            (\n                (qtpylib.crossed_above(dataframe['rsi'], 30)) &  # RSI 上穿 30\n                (dataframe['rsi_1d'] < 30) &                     # 日线 RSI < 30\n                (dataframe['volume'] > 0)                        # 有成交量\n            ),\n            ['enter_long', 'enter_tag']] = (1, 'rsi_cross')\n","type":"content","url":"/strategy-customization#id-dataprovider-1","position":77},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"额外数据（钱包 Wallets）","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-wallets","position":78},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"额外数据（钱包 Wallets）","lvl2":"策略自定义"},"content":"策略可通过 wallets 对象获取当前钱包/账户余额。\n\n回测/超参优化\n\nWallets 在不同函数中表现不同。\n\n在 populate_*() 方法中，返回完整钱包。\n\n在 \n\n回调函数 中，返回当前模拟钱包状态。\n\n调用前请检查 wallets 是否可用，避免回测时报错。if self.wallets:\n    free_eth = self.wallets.get_free('ETH')\n    used_eth = self.wallets.get_used('ETH')\n    total_eth = self.wallets.get_total('ETH')","type":"content","url":"/strategy-customization#id-wallets","position":79},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"Wallets 可用方法","lvl3":"额外数据（钱包 Wallets）","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#wallets","position":80},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"Wallets 可用方法","lvl3":"额外数据（钱包 Wallets）","lvl2":"策略自定义"},"content":"get_free(asset) - 当前可用余额\n\nget_used(asset) - 当前被占用余额（挂单）\n\nget_total(asset) - 总余额（前两者之和）","type":"content","url":"/strategy-customization#wallets","position":81},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"额外数据（交易记录 Trades）","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-trades","position":82},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"额外数据（交易记录 Trades）","lvl2":"策略自定义"},"content":"可在策略中通过数据库查询历史交易。\n\n在文件顶部，导入所需对象：from freqtrade.persistence import Trade\n\n以下示例查询当天当前对的已平仓交易（可加其他过滤条件）：trades = Trade.get_trades_proxy(pair=metadata['pair'],\n                                open_date=datetime.now(timezone.utc) - timedelta(days=1),\n                                is_open=False,\n            ]).order_by(Trade.close_date).all()\n# 汇总该交易对的利润\ncurdayprofit = sum(trade.close_profit for trade in trades)\n\n更多方法请查阅 \n\nTrade 对象 文档。\n\nWarning\n\n回测/超参优化时，populate_* 方法中无法获取交易历史，结果为空。","type":"content","url":"/strategy-customization#id-trades","position":83},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"阻止特定对交易","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-18","position":84},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"阻止特定对交易","lvl2":"策略自定义"},"content":"Freqtrade 会在某对平仓后自动锁定该对至当前K线结束，防止同一K线内频繁交易。\n\n锁定对时会提示 Pair <pair> is currently locked.。","type":"content","url":"/strategy-customization#id-18","position":85},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"在策略中锁定对","lvl3":"阻止特定对交易","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-19","position":86},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"在策略中锁定对","lvl3":"阻止特定对交易","lvl2":"策略自定义"},"content":"有时希望在特定事件后锁定某对（如连续亏损）。\n\n可用 self.lock_pair(pair, until, [reason]) 实现，until 为未来时间点，reason 为可选说明。\n\n可用 self.unlock_pair(pair) 或 self.unlock_reason(<reason>) 手动解锁，后者会解锁所有因该原因锁定的对。\n\n用 self.is_pair_locked(pair) 检查对是否被锁定。\n\nNote\n\n锁定会自动延长到下一个K线结束。如 5m 周期，锁到 10:18 会延长到 10:20。\n\nWarning\n\n手动锁定仅在实盘/模拟盘可用，回测时仅保护机制可锁定。","type":"content","url":"/strategy-customization#id-19","position":87},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"锁定对示例","lvl4":"在策略中锁定对","lvl3":"阻止特定对交易","lvl2":"策略自定义"},"type":"lvl5","url":"/strategy-customization#id-20","position":88},{"hierarchy":{"lvl1":"策略自定义指南","lvl5":"锁定对示例","lvl4":"在策略中锁定对","lvl3":"阻止特定对交易","lvl2":"策略自定义"},"content":"from freqtrade.persistence import Trade\nfrom datetime import timedelta, datetime, timezone\n# 放在策略文件顶部\n# --------\n\n# 在 populate_indicators 或 populate_entry_trend 中：\nif self.config['runmode'].value in ('live', 'dry_run'):\n    # 查询近两天已平仓交易\n    trades = Trade.get_trades_proxy(\n        pair=metadata['pair'], is_open=False, \n        open_date=datetime.now(timezone.utc) - timedelta(days=2))\n    # 分析是否需要锁定\n    sumprofit = sum(trade.close_profit for trade in trades)\n    if sumprofit < 0:\n        # 锁定 12 小时\n        self.lock_pair(metadata['pair'], until=datetime.now(timezone.utc) + timedelta(hours=12))","type":"content","url":"/strategy-customization#id-20","position":89},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"打印主 dataframe","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-dataframe","position":90},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"打印主 dataframe","lvl2":"策略自定义"},"content":"可在 populate_entry_trend() 或 populate_exit_trend() 中打印当前主 dataframe，便于调试。def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            #>> 你的条件 <<<\n        ),\n        ['enter_long', 'enter_tag']] = (1, 'somestring')\n\n    # 打印分析的对\n    print(f\"result for {metadata['pair']}\")\n\n    # 打印最后 5 行\n    print(dataframe.tail())\n\n    return dataframe\n\n如需打印更多行可用 print(dataframe)，但不建议，否则每对每 5 秒会输出约 500 行。","type":"content","url":"/strategy-customization#id-dataframe","position":91},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"开发策略时的常见错误","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-21","position":92},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"开发策略时的常见错误","lvl2":"策略自定义"},"content":"","type":"content","url":"/strategy-customization#id-21","position":93},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"回测时\"看未来\"","lvl3":"开发策略时的常见错误","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-22","position":94},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"回测时\"看未来\"","lvl3":"开发策略时的常见错误","lvl2":"策略自定义"},"content":"回测为提升性能会一次性分析整个 dataframe。策略作者需确保不\"看未来\"，即不使用 dry/live 时不可用的数据。\n\n这是常见痛点，易导致回测与 dry/live 巨大差异。看未来的策略回测时表现极佳，实盘却很差。\n\n常见错误包括：\n\n不要用 shift(-1) 或负数，这会用到未来数据\n\n不要在 populate_ 函数中用 .iloc[-1] 或其他绝对位置，dry-run 和回测时表现不同。回调函数中可安全用 iloc\n\n不要用 dataframe['mean_volume'] = dataframe['volume'].mean() 这类全列函数，回测时会用到未来数据。应用 rolling() 计算，如 dataframe['volume'].rolling(<window>).mean()\n\n不要用 .resample('1h')，这会用左边界，应用 .resample('1h', label='right')\n\n不要用 .merge() 合并大周期到小周期，应用 \n\ninformative pair 工具。普通 merge 会有前视偏差\n\n如何发现问题\n\n建议用 \n\nlookahead-analysis 和 \n\nrecursive-analysis 两个工具辅助排查。\n\n但两者都不能保证完全无误。","type":"content","url":"/strategy-customization#id-22","position":95},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"信号冲突","lvl3":"开发策略时的常见错误","lvl2":"策略自定义"},"type":"lvl4","url":"/strategy-customization#id-23","position":96},{"hierarchy":{"lvl1":"策略自定义指南","lvl4":"信号冲突","lvl3":"开发策略时的常见错误","lvl2":"策略自定义"},"content":"当信号冲突（如 enter_long 和 exit_long 同时为 1）时，freqtrade 会忽略入场信号，避免刚进场就立刻出场。\n\n规则如下，若 3 个信号中有多个为 1，则忽略入场：\n\nenter_long -> exit_long, enter_short\n\nenter_short -> exit_short, enter_long","type":"content","url":"/strategy-customization#id-23","position":97},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"更多策略思路","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-24","position":98},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"更多策略思路","lvl2":"策略自定义"},"content":"如需更多策略思路，请访问 \n\n策略仓库。可作为学习参考，实际效果取决于市场、交易对等。请务必先回测，再 dry-run，谨慎实盘。\n\n欢迎参考、改编，也欢迎向仓库提交新策略 PR。","type":"content","url":"/strategy-customization#id-24","position":99},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"下一步","lvl2":"策略自定义"},"type":"lvl3","url":"/strategy-customization#id-25","position":100},{"hierarchy":{"lvl1":"策略自定义指南","lvl3":"下一步","lvl2":"策略自定义"},"content":"现在你已经有了完美的策略，下一步请学习\n\n如何回测。","type":"content","url":"/strategy-customization#id-25","position":101},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例"},"type":"lvl1","url":"/strategy-analysis-example","position":0},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例"},"content":"","type":"content","url":"/strategy-analysis-example","position":1},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl2":"策略分析示例"},"type":"lvl2","url":"/strategy-analysis-example#id","position":2},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl2":"策略分析示例"},"content":"调试一个策略可能非常耗时。Freqtrade 提供了辅助函数来可视化原始数据。\n以下假设你使用的是 SampleStrategy，数据为来自 Binance 的 5 分钟线，并已下载到默认位置的 data 目录。\n更多细节请参见\n\n官方文档。","type":"content","url":"/strategy-analysis-example#id","position":3},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"环境设置","lvl2":"策略分析示例"},"type":"lvl3","url":"/strategy-analysis-example#id-1","position":4},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"环境设置","lvl2":"策略分析示例"},"content":"","type":"content","url":"/strategy-analysis-example#id-1","position":5},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"将工作目录切换到仓库根目录","lvl3":"环境设置","lvl2":"策略分析示例"},"type":"lvl4","url":"/strategy-analysis-example#id-2","position":6},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"将工作目录切换到仓库根目录","lvl3":"环境设置","lvl2":"策略分析示例"},"content":"import os\nfrom pathlib import Path\n\n# 切换目录\n# 修改此单元格以确保输出显示正确的路径。\n# 所有路径均以项目根目录为基准\nproject_root = \"somedir/freqtrade\"\ni = 0\ntry:\n    os.chdir(project_root)\n    if not Path(\"LICENSE\").is_file():\n        i = 0\n        while i < 4 and (not Path(\"LICENSE\").is_file()):\n            os.chdir(Path(Path.cwd(), \"../\"))\n            i += 1\n        project_root = Path.cwd()\nexcept FileNotFoundError:\n    print(\"请根据当前目录定义项目根目录\")\nprint(Path.cwd())","type":"content","url":"/strategy-analysis-example#id-2","position":7},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"配置 Freqtrade 环境","lvl3":"环境设置","lvl2":"策略分析示例"},"type":"lvl4","url":"/strategy-analysis-example#id-freqtrade","position":8},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"配置 Freqtrade 环境","lvl3":"环境设置","lvl2":"策略分析示例"},"content":"from freqtrade.configuration import Configuration\n\n# 根据你的需求自定义以下内容。\n\n# 初始化空配置对象\nconfig = Configuration.from_files([])\n# 可选（推荐），使用已有配置文件\n# config = Configuration.from_files([\"user_data/config.json\"])\n\n# 定义一些常量\nconfig[\"timeframe\"] = \"5m\"\n# 策略类名\nconfig[\"strategy\"] = \"SampleStrategy\"\n# 数据位置\ndata_location = config[\"datadir\"]\n# 要分析的交易对 - 这里只用一个交易对\npair = \"BTC/USDT\"# 使用上面设置的值加载数据\nfrom freqtrade.data.history import load_pair_history\nfrom freqtrade.enums import CandleType\n\ncandles = load_pair_history(\n    datadir=data_location,\n    timeframe=config[\"timeframe\"],\n    pair=pair,\n    data_format=\"json\",  # 请确保与你的数据格式一致\n    candle_type=CandleType.SPOT,\n)\n\n# 确认加载成功\nprint(f\"已为 {pair} 从 {data_location} 加载 {len(candles)} 行数据\")\ncandles.head()","type":"content","url":"/strategy-analysis-example#id-freqtrade","position":9},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"加载并运行策略","lvl2":"策略分析示例"},"type":"lvl3","url":"/strategy-analysis-example#id-3","position":10},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"加载并运行策略","lvl2":"策略分析示例"},"content":"每次更改策略文件后需重新运行# 使用上面设置的值加载策略\nfrom freqtrade.data.dataprovider import DataProvider\nfrom freqtrade.resolvers import StrategyResolver\n\nstrategy = StrategyResolver.load_strategy(config)\nstrategy.dp = DataProvider(config, None, None)\nstrategy.ft_bot_start()\n\n# 用策略生成买/卖信号\ndf = strategy.analyze_ticker(candles, {\"pair\": pair})\ndf.tail()","type":"content","url":"/strategy-analysis-example#id-3","position":11},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"显示交易详情","lvl3":"加载并运行策略","lvl2":"策略分析示例"},"type":"lvl4","url":"/strategy-analysis-example#id-4","position":12},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"显示交易详情","lvl3":"加载并运行策略","lvl2":"策略分析示例"},"content":"注意，使用 data.head() 也可以，但大多数指标在 dataframe 顶部有一些\"启动\"数据。\n\n可能遇到的问题：\n\ndataframe 末尾有 NaN 值的列\n\n用于 crossed*() 函数的列单位完全不同\n\n与完整回测的对比：\n\nanalyze_ticker() 输出某个交易对有 200 个买入信号，并不意味着回测时会有 200 笔交易。\n\n假如买入条件仅为 df['rsi'] < 30，则会连续多次为同一交易对生成\"买入\"信号（直到 rsi 回到 >29）。机器人只会在这些信号中的第一个（且有可用交易槽\"max_open_trades\"时）或中间某个信号买入。# 报告结果\nprint(f\"共生成 {df['enter_long'].sum()} 个入场信号\")\ndata = df.set_index(\"date\", drop=False)\ndata.tail()","type":"content","url":"/strategy-analysis-example#id-4","position":13},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"在 Jupyter notebook 中加载已有对象","lvl2":"策略分析示例"},"type":"lvl3","url":"/strategy-analysis-example#id-jupyter-notebook","position":14},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"在 Jupyter notebook 中加载已有对象","lvl2":"策略分析示例"},"content":"以下单元格假设你已通过命令行生成了数据。它们可以帮助你更深入地分析结果，避免信息过载。","type":"content","url":"/strategy-analysis-example#id-jupyter-notebook","position":15},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"加载回测结果到 pandas dataframe","lvl3":"在 Jupyter notebook 中加载已有对象","lvl2":"策略分析示例"},"type":"lvl4","url":"/strategy-analysis-example#id-pandas-dataframe","position":16},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"加载回测结果到 pandas dataframe","lvl3":"在 Jupyter notebook 中加载已有对象","lvl2":"策略分析示例"},"content":"分析交易 dataframe（下方绘图也会用到）from freqtrade.data.btanalysis import load_backtest_data, load_backtest_stats\n\n# 如果 backtest_dir 指向目录，会自动加载最新回测文件。\nbacktest_dir = config[\"user_data_dir\"] / \"backtest_results\"\n# backtest_dir 也可以指向具体文件\n# backtest_dir = (\n#   config[\"user_data_dir\"] / \"backtest_results/backtest-result-2020-07-01_20-04-22.json\"\n# )# 用以下命令可获取完整回测统计信息。\n# 包含生成回测结果所用的全部信息。\nstats = load_backtest_stats(backtest_dir)\n\nstrategy = \"SampleStrategy\"\n# 所有统计信息都按策略分组，如果回测时用过 `--strategy-list`，这里也会体现。\n# 示例用法：\nprint(stats[\"strategy\"][strategy][\"results_per_pair\"])\n# 获取本次回测用的交易对列表\nprint(stats[\"strategy\"][strategy][\"pairlist\"])\n# 获取市场变化（回测期间所有交易对的平均涨跌幅）\nprint(stats[\"strategy\"][strategy][\"market_change\"])\n# 最大回撤（绝对值）\nprint(stats[\"strategy\"][strategy][\"max_drawdown_abs\"])\n# 最大回撤起止时间\nprint(stats[\"strategy\"][strategy][\"drawdown_start\"])\nprint(stats[\"strategy\"][strategy][\"drawdown_end\"])\n\n# 策略对比（仅多策略回测时有意义）\nprint(stats[\"strategy_comparison\"])# 以 dataframe 形式加载回测交易\ntrades = load_backtest_data(backtest_dir)\n\n# 按交易对统计各退出原因数量\ntrades.groupby(\"pair\")[\"exit_reason\"].value_counts()","type":"content","url":"/strategy-analysis-example#id-pandas-dataframe","position":17},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"绘制每日收益 / 资金曲线","lvl2":"策略分析示例"},"type":"lvl3","url":"/strategy-analysis-example#id-5","position":18},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"绘制每日收益 / 资金曲线","lvl2":"策略分析示例"},"content":"# 绘制资金曲线（第 1 天从 0 开始，每天加上当日回测收益）\n\nimport pandas as pd\nimport plotly.express as px\n\nfrom freqtrade.configuration import Configuration\nfrom freqtrade.data.btanalysis import load_backtest_stats\n\n# strategy = 'SampleStrategy'\n# config = Configuration.from_files([\"user_data/config.json\"])\n# backtest_dir = config[\"user_data_dir\"] / \"backtest_results\"\n\nstats = load_backtest_stats(backtest_dir)\nstrategy_stats = stats[\"strategy\"][strategy]\n\ndf = pd.DataFrame(columns=[\"dates\", \"equity\"], data=strategy_stats[\"daily_profit\"])\ndf[\"equity_daily\"] = df[\"equity\"].cumsum()\n\nfig = px.line(df, x=\"dates\", y=\"equity_daily\")\nfig.show()","type":"content","url":"/strategy-analysis-example#id-5","position":19},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"加载实盘交易结果到 pandas dataframe","lvl3":"绘制每日收益 / 资金曲线","lvl2":"策略分析示例"},"type":"lvl4","url":"/strategy-analysis-example#id-pandas-dataframe-1","position":20},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl4":"加载实盘交易结果到 pandas dataframe","lvl3":"绘制每日收益 / 资金曲线","lvl2":"策略分析示例"},"content":"如果你已经有实盘交易数据，想分析自己的表现：from freqtrade.data.btanalysis import load_trades_from_db\n\n# 从数据库获取交易\ntrades = load_trades_from_db(\"sqlite:///tradesv3.sqlite\")\n\n# 显示结果\ntrades.groupby(\"pair\")[\"exit_reason\"].value_counts()","type":"content","url":"/strategy-analysis-example#id-pandas-dataframe-1","position":21},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"分析已加载交易的并行度","lvl2":"策略分析示例"},"type":"lvl3","url":"/strategy-analysis-example#id-6","position":22},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"分析已加载交易的并行度","lvl2":"策略分析示例"},"content":"这有助于结合高 max_open_trades 设置回测时，找到最佳的 max_open_trades 参数。\n\nanalyze_trade_parallelism() 返回一个带有 “open_trades” 列的时间序列 dataframe，表示每根 K 线时刻的持仓数量。from freqtrade.data.btanalysis import analyze_trade_parallelism\n\n# 分析上述交易\nparallel_trades = analyze_trade_parallelism(trades, \"5m\")\n\nparallel_trades.plot()","type":"content","url":"/strategy-analysis-example#id-6","position":23},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"绘图结果","lvl2":"策略分析示例"},"type":"lvl3","url":"/strategy-analysis-example#id-7","position":24},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"绘图结果","lvl2":"策略分析示例"},"content":"Freqtrade 提供了基于 plotly 的交互式绘图能力。from freqtrade.plot.plotting import generate_candlestick_graph\n\n# 限定绘图区间以保证 plotly 响应速度\n\n# 只保留一个交易对的交易\ntrades_red = trades.loc[trades[\"pair\"] == pair]\n\ndata_red = data[\"2019-06-01\":\"2019-06-10\"]\n# 生成蜡烛图\ngraph = generate_candlestick_graph(\n    pair=pair,\n    data=data_red,\n    trades=trades_red,\n    indicators1=[\"sma20\", \"ema50\", \"ema55\"],\n    indicators2=[\"rsi\", \"macd\", \"macdsignal\", \"macdhist\"],\n)# 内嵌显示图表\n# graph.show()\n\n# 在新窗口渲染图表\ngraph.show(renderer=\"browser\")","type":"content","url":"/strategy-analysis-example#id-7","position":25},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"绘制每笔交易平均收益的分布图","lvl2":"策略分析示例"},"type":"lvl3","url":"/strategy-analysis-example#id-8","position":26},{"hierarchy":{"lvl1":"Freqtrade 策略分析示例","lvl3":"绘制每笔交易平均收益的分布图","lvl2":"策略分析示例"},"content":"import plotly.figure_factory as ff\n\nhist_data = [trades.profit_ratio]\ngroup_labels = [\"profit_ratio\"]  # 数据集名称\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.01)\nfig.show()\n\n如果你有更好的数据分析思路，欢迎提交 issue 或 Pull Request 丰富本文档！","type":"content","url":"/strategy-analysis-example#id-8","position":27},{"hierarchy":{"lvl1":"策略迁移指南"},"type":"lvl1","url":"/strategy-migration","position":0},{"hierarchy":{"lvl1":"策略迁移指南"},"content":"","type":"content","url":"/strategy-migration","position":1},{"hierarchy":{"lvl1":"策略迁移指南","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl2","url":"/strategy-migration#v2-v3","position":2},{"hierarchy":{"lvl1":"策略迁移指南","lvl2":"V2 和 V3 之间的策略迁移"},"content":"为了支持新的市场和交易类型（即空头交易/杠杆交易），接口必须进行一些更改。\n如果你打算使用现货市场以外的市场，请将你的策略迁移到新格式。\n\n我们付出了很大努力来保持与现有策略的兼容性，所以如果你只想继续在__现货市场__使用 freqtrade，目前应该不需要任何更改。\n\n你可以使用快速摘要作为检查清单。请参阅下面的详细部分以获取完整的迁移详情。","type":"content","url":"/strategy-migration#v2-v3","position":3},{"hierarchy":{"lvl1":"策略迁移指南","lvl3":"快速摘要/迁移检查清单","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl3","url":"/strategy-migration#id","position":4},{"hierarchy":{"lvl1":"策略迁移指南","lvl3":"快速摘要/迁移检查清单","lvl2":"V2 和 V3 之间的策略迁移"},"content":"注意：forcesell、forcebuy、emergencysell 分别改为 force_exit、force_enter、emergency_exit。\n\n策略方法：\n\npopulate_buy_trend() -> populate_entry_trend()\n\npopulate_sell_trend() -> populate_exit_trend()\n\ncustom_sell() -> custom_exit()\n\ncheck_buy_timeout() -> check_entry_timeout()\n\ncheck_sell_timeout() -> check_exit_timeout()\n\n没有交易对象的回调新增 side 参数\n\ncustom_stake_amount\n\nconfirm_trade_entry\n\ncustom_entry_price\n\nconfirm_trade_exit 中更改参数名称\n\n数据框列：\n\nbuy -> enter_long\n\nsell -> exit_long\n\nbuy_tag -> enter_tag（用于多头和空头交易）\n\n新增列 enter_short 和相应的新列 exit_short\n\ntrade-object 现在有以下新属性：\n\nis_short\n\nentry_side\n\nexit_side\n\ntrade_direction\n\n重命名：sell_reason -> exit_reason\n\n将 trade.nr_of_successful_buys 重命名为 trade.nr_of_successful_entries（主要与 adjust_trade_position() 相关）\n\n引入新的 \n\nleverage 回调。\n\n信息对现在可以在元组中传递第三个元素，定义蜡烛类型。\n\n@informative 装饰器现在接受可选的 candle_type 参数。\n\n辅助方法 stoploss_from_open 和 stoploss_from_absolute 现在接受 is_short 作为附加参数。\n\nINTERFACE_VERSION 应设置为 3。\n\n策略/配置设置。\n\norder_time_in_force buy -> entry, sell -> exit。\n\norder_types buy -> entry, sell -> exit。\n\nunfilledtimeout buy -> entry, sell -> exit。\n\nignore_buying_expired_candle_after -> 移到根级别而不是 “ask_strategy/exit_pricing”\n\n术语更改\n\n卖出原因改为反映新的\"exit\"命名而不是 sells。如果你在策略中使用 exit_reason 检查，请小心并最终更新你的策略。\n\nsell_signal -> exit_signal\n\ncustom_sell -> custom_exit\n\nforce_sell -> force_exit\n\nemergency_sell -> emergency_exit\n\n订单定价\n\nbid_strategy -> entry_pricing\n\nask_strategy -> exit_pricing\n\nask_last_balance -> price_last_balance\n\nbid_last_balance -> price_last_balance\n\nWebhook 术语从\"sell\"改为\"exit\"，从\"buy\"改为 entry\n\nwebhookbuy -> entry\n\nwebhookbuyfill -> entry_fill\n\nwebhookbuycancel -> entry_cancel\n\nwebhooksell -> exit\n\nwebhooksellfill -> exit_fill\n\nwebhooksellcancel -> exit_cancel\n\nTelegram 通知设置\n\nbuy -> entry\n\nbuy_fill -> entry_fill\n\nbuy_cancel -> entry_cancel\n\nsell -> exit\n\nsell_fill -> exit_fill\n\nsell_cancel -> exit_cancel\n\n策略/配置设置：\n\nuse_sell_signal -> use_exit_signal\n\nsell_profit_only -> exit_profit_only\n\nsell_profit_offset -> exit_profit_offset\n\nignore_roi_if_buy_signal -> ignore_roi_if_entry_signal\n\nforcebuy_enable -> force_entry_enable","type":"content","url":"/strategy-migration#id","position":5},{"hierarchy":{"lvl1":"策略迁移指南","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl3","url":"/strategy-migration#id-1","position":6},{"hierarchy":{"lvl1":"策略迁移指南","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"","type":"content","url":"/strategy-migration#id-1","position":7},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"populate_buy_trend","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#populate-buy-trend","position":8},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"populate_buy_trend","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"在 populate_buy_trend() 中 - 你需要将分配的列从 'buy' 改为 'enter_long'，同时将方法名从 populate_buy_trend 改为 populate_entry_trend。def populate_buy_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            (qtpylib.crossed_above(dataframe['rsi'], 30)) &  # 信号：RSI 上穿 30\n            (dataframe['tema'] <= dataframe['bb_middleband']) &  # 守卫\n            (dataframe['tema'] > dataframe['tema'].shift(1)) &  # 守卫\n            (dataframe['volume'] > 0)  # 确保成交量不为 0\n        ),\n        ['buy', 'buy_tag']] = (1, 'rsi_cross')\n\n    return dataframe\n\n之后：def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            (qtpylib.crossed_above(dataframe['rsi'], 30)) &  # 信号：RSI 上穿 30\n            (dataframe['tema'] <= dataframe['bb_middleband']) &  # 守卫\n            (dataframe['tema'] > dataframe['tema'].shift(1)) &  # 守卫\n            (dataframe['volume'] > 0)  # 确保成交量不为 0\n        ),\n        ['enter_long', 'enter_tag']] = (1, 'rsi_cross')\n\n    return dataframe\n\n请参阅\n\n策略文档了解如何入场和出场空头交易。","type":"content","url":"/strategy-migration#populate-buy-trend","position":9},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"populate_sell_trend","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#populate-sell-trend","position":10},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"populate_sell_trend","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"与 populate_buy_trend 类似，populate_sell_trend() 将重命名为 populate_exit_trend()。\n我们还将列从 'sell' 改为 'exit_long'。def populate_sell_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            (qtpylib.crossed_above(dataframe['rsi'], 70)) &  # 信号：RSI 上穿 70\n            (dataframe['tema'] > dataframe['bb_middleband']) &  # 守卫\n            (dataframe['tema'] < dataframe['tema'].shift(1)) &  # 守卫\n            (dataframe['volume'] > 0)  # 确保成交量不为 0\n        ),\n        ['sell', 'exit_tag']] = (1, 'some_exit_tag')\n    return dataframe\n\n之后：def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe.loc[\n        (\n            (qtpylib.crossed_above(dataframe['rsi'], 70)) &  # 信号：RSI 上穿 70\n            (dataframe['tema'] > dataframe['bb_middleband']) &  # 守卫\n            (dataframe['tema'] < dataframe['tema'].shift(1)) &  # 守卫\n            (dataframe['volume'] > 0)  # 确保成交量不为 0\n        ),\n        ['exit_long', 'exit_tag']] = (1, 'some_exit_tag')\n    return dataframe\n\n请参阅\n\n策略文档了解如何入场和出场空头交易。","type":"content","url":"/strategy-migration#populate-sell-trend","position":11},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"custom_sell","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#custom-sell","position":12},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"custom_sell","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"custom_sell 已重命名为 custom_exit。\n它现在也会在每次迭代时被调用，与当前利润和 exit_profit_only 设置无关。class AwesomeStrategy(IStrategy):\n    def custom_sell(self, pair: str, trade: 'Trade', current_time: 'datetime', current_rate: float,\n                    current_profit: float, **kwargs):\n        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n        last_candle = dataframe.iloc[-1].squeeze()\n        # ...class AwesomeStrategy(IStrategy):\n    def custom_exit(self, pair: str, trade: 'Trade', current_time: 'datetime', current_rate: float,\n                    current_profit: float, **kwargs):\n        dataframe, _ = self.dp.get_analyzed_dataframe(pair, self.timeframe)\n        last_candle = dataframe.iloc[-1].squeeze()\n        # ...","type":"content","url":"/strategy-migration#custom-sell","position":13},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"custom_entry_timeout","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#custom-entry-timeout","position":14},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"custom_entry_timeout","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"check_buy_timeout() 已重命名为 check_entry_timeout()，check_sell_timeout() 已重命名为 check_exit_timeout()。class AwesomeStrategy(IStrategy):\n    def check_buy_timeout(self, pair: str, trade: 'Trade', order: dict, \n                            current_time: datetime, **kwargs) -> bool:\n        return False\n\n    def check_sell_timeout(self, pair: str, trade: 'Trade', order: dict, \n                            current_time: datetime, **kwargs) -> bool:\n        return False class AwesomeStrategy(IStrategy):\n    def check_entry_timeout(self, pair: str, trade: 'Trade', order: 'Order', \n                            current_time: datetime, **kwargs) -> bool:\n        return False\n\n    def check_exit_timeout(self, pair: str, trade: 'Trade', order: 'Order', \n                            current_time: datetime, **kwargs) -> bool:\n        return False ","type":"content","url":"/strategy-migration#custom-entry-timeout","position":15},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"custom_stake_amount","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#custom-stake-amount","position":16},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"custom_stake_amount","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"新增字符串参数 side - 可以是 \"long\" 或 \"short\"。class AwesomeStrategy(IStrategy):\n    def custom_stake_amount(self, pair: str, current_time: datetime, current_rate: float,\n                            proposed_stake: float, min_stake: Optional[float], max_stake: float,\n                            entry_tag: Optional[str], **kwargs) -> float:\n        # ... \n        return proposed_stakeclass AwesomeStrategy(IStrategy):\n    def custom_stake_amount(self, pair: str, current_time: datetime, current_rate: float,\n                            proposed_stake: float, min_stake: float | None, max_stake: float,\n                            entry_tag: str | None, side: str, **kwargs) -> float:\n        # ... \n        return proposed_stake","type":"content","url":"/strategy-migration#custom-stake-amount","position":17},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"confirm_trade_entry","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#confirm-trade-entry","position":18},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"confirm_trade_entry","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"新增字符串参数 side - 可以是 \"long\" 或 \"short\"。class AwesomeStrategy(IStrategy):\n    def confirm_trade_entry(self, pair: str, order_type: str, amount: float, rate: float,\n                            time_in_force: str, current_time: datetime, entry_tag: Optional[str], \n                            **kwargs) -> bool:\n      return True\n\n之后：class AwesomeStrategy(IStrategy):\n    def confirm_trade_entry(self, pair: str, order_type: str, amount: float, rate: float,\n                            time_in_force: str, current_time: datetime, entry_tag: str | None, \n                            side: str, **kwargs) -> bool:\n      return True","type":"content","url":"/strategy-migration#confirm-trade-entry","position":19},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"confirm_trade_exit","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#confirm-trade-exit","position":20},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"confirm_trade_exit","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"将参数 sell_reason 改为 exit_reason。\n为了兼容性，sell_reason 仍将在有限时间内提供。class AwesomeStrategy(IStrategy):\n    def confirm_trade_exit(self, pair: str, trade: Trade, order_type: str, amount: float,\n                           rate: float, time_in_force: str, sell_reason: str,\n                           current_time: datetime, **kwargs) -> bool:\n    return True\n\n之后：class AwesomeStrategy(IStrategy):\n    def confirm_trade_exit(self, pair: str, trade: Trade, order_type: str, amount: float,\n                           rate: float, time_in_force: str, exit_reason: str,\n                           current_time: datetime, **kwargs) -> bool:\n    return True","type":"content","url":"/strategy-migration#confirm-trade-exit","position":21},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"custom_entry_price","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#custom-entry-price","position":22},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"custom_entry_price","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"新增字符串参数 side - 可以是 \"long\" 或 \"short\"。class AwesomeStrategy(IStrategy):\n    def custom_entry_price(self, pair: str, current_time: datetime, proposed_rate: float,\n                           entry_tag: Optional[str], **kwargs) -> float:\n      return proposed_rate\n\n之后：class AwesomeStrategy(IStrategy):\n    def custom_entry_price(self, pair: str, trade: Trade | None, current_time: datetime, proposed_rate: float,\n                           entry_tag: str | None, side: str, **kwargs) -> float:\n      return proposed_rate","type":"content","url":"/strategy-migration#custom-entry-price","position":23},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"调整交易仓位更改","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#id-2","position":24},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"调整交易仓位更改","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"虽然 adjust-trade-position 本身没有改变，但你不应该再使用 trade.nr_of_successful_buys - 而是使用 trade.nr_of_successful_entries，它也将包括空头入场。","type":"content","url":"/strategy-migration#id-2","position":25},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"辅助方法","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#id-3","position":26},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"辅助方法","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"为 stoploss_from_open 和 stoploss_from_absolute 添加参数 “is_short”。\n这应该给出 trade.is_short 的值。    def custom_stoploss(self, pair: str, trade: 'Trade', current_time: datetime,\n                        current_rate: float, current_profit: float, **kwargs) -> float:\n        # 一旦利润上升到 10% 以上，将止损保持在开盘价上方 7%\n        if current_profit > 0.10:\n            return stoploss_from_open(0.07, current_profit)\n\n        return stoploss_from_absolute(current_rate - (candle['atr'] * 2), current_rate)\n\n        return 1\n\n\n之后：    def custom_stoploss(self, pair: str, trade: 'Trade', current_time: datetime,\n                        current_rate: float, current_profit: float, after_fill: bool, \n                        **kwargs) -> float | None:\n        # 一旦利润上升到 10% 以上，将止损保持在开盘价上方 7%\n        if current_profit > 0.10:\n            return stoploss_from_open(0.07, current_profit, is_short=trade.is_short)\n\n        return stoploss_from_absolute(current_rate - (candle['atr'] * 2), current_rate, is_short=trade.is_short, leverage=trade.leverage)\n\n","type":"content","url":"/strategy-migration#id-3","position":27},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#id-4","position":28},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"","type":"content","url":"/strategy-migration#id-4","position":29},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"order_time_in_force","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl5","url":"/strategy-migration#order-time-in-force","position":30},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"order_time_in_force","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"order_time_in_force 属性从 \"buy\" 改为 \"entry\"，从 \"sell\" 改为 \"exit\"。    order_time_in_force: dict = {\n        \"buy\": \"gtc\",\n        \"sell\": \"gtc\",\n    }\n\n之后：    order_time_in_force: dict = {\n        \"entry\": \"GTC\",\n        \"exit\": \"GTC\",\n    }","type":"content","url":"/strategy-migration#order-time-in-force","position":31},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"order_types","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl5","url":"/strategy-migration#order-types","position":32},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"order_types","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"order_types 已将所有措辞从 buy 改为 entry - 从 sell 改为 exit。\n并且两个词用 _ 连接。    order_types = {\n        \"buy\": \"limit\",\n        \"sell\": \"limit\",\n        \"emergencysell\": \"market\",\n        \"forcesell\": \"market\",\n        \"forcebuy\": \"market\",\n        \"stoploss\": \"market\",\n        \"stoploss_on_exchange\": false,\n        \"stoploss_on_exchange_interval\": 60\n    }\n\n之后：    order_types = {\n        \"entry\": \"limit\",\n        \"exit\": \"limit\",\n        \"emergency_exit\": \"market\",\n        \"force_exit\": \"market\",\n        \"force_entry\": \"market\",\n        \"stoploss\": \"market\",\n        \"stoploss_on_exchange\": false,\n        \"stoploss_on_exchange_interval\": 60\n    }","type":"content","url":"/strategy-migration#order-types","position":33},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"策略级别设置","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl5","url":"/strategy-migration#id-5","position":34},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"策略级别设置","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"use_sell_signal -> use_exit_signal\n\nsell_profit_only -> exit_profit_only\n\nsell_profit_offset -> exit_profit_offset\n\nignore_roi_if_buy_signal -> ignore_roi_if_entry_signal    # 这些值可以在配置中被覆盖。\n    use_sell_signal = True\n    sell_profit_only = True\n    sell_profit_offset: 0.01\n    ignore_roi_if_buy_signal = False\n\n之后：    # 这些值可以在配置中被覆盖。\n    use_exit_signal = True\n    exit_profit_only = True\n    exit_profit_offset: 0.01\n    ignore_roi_if_entry_signal = False","type":"content","url":"/strategy-migration#id-5","position":35},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"unfilledtimeout","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl5","url":"/strategy-migration#unfilledtimeout","position":36},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"unfilledtimeout","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"unfilledtimeout 已将所有措辞从 buy 改为 entry - 从 sell 改为 exit。unfilledtimeout = {\n        \"buy\": 10,\n        \"sell\": 10,\n        \"exit_timeout_count\": 0,\n        \"unit\": \"minutes\"\n    }\n\n之后：unfilledtimeout = {\n        \"entry\": 10,\n        \"exit\": 10,\n        \"exit_timeout_count\": 0,\n        \"unit\": \"minutes\"\n    }","type":"content","url":"/strategy-migration#unfilledtimeout","position":37},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"order pricing","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl5","url":"/strategy-migration#order-pricing","position":38},{"hierarchy":{"lvl1":"策略迁移指南","lvl5":"order pricing","lvl4":"策略/配置设置","lvl3":"详细说明","lvl2":"V2 和 V3 之间的策略迁移"},"content":"订单定价有两种变化。bid_strategy 重命名为 entry_pricing，ask_strategy 重命名为 exit_pricing。\n属性 ask_last_balance -> price_last_balance 和 bid_last_balance -> price_last_balance 也被重命名。\n此外，价格端现在可以定义为 ask、bid、same 或 other。\n请参阅\n\n定价文档了解更多信息。{\n    \"bid_strategy\": {\n        \"price_side\": \"bid\",\n        \"use_order_book\": true,\n        \"order_book_top\": 1,\n        \"ask_last_balance\": 0.0,\n        \"check_depth_of_market\": {\n            \"enabled\": false,\n            \"bids_to_ask_delta\": 1\n        }\n    },\n    \"ask_strategy\":{\n        \"price_side\": \"ask\",\n        \"use_order_book\": true,\n        \"order_book_top\": 1,\n        \"bid_last_balance\": 0.0\n        \"ignore_buying_expired_candle_after\": 120\n    }\n}\n\n之后：{\n    \"entry_pricing\": {\n        \"price_side\": \"same\",\n        \"use_order_book\": true,\n        \"order_book_top\": 1,\n        \"price_last_balance\": 0.0,\n        \"check_depth_of_market\": {\n            \"enabled\": false,\n            \"bids_to_ask_delta\": 1\n        }\n    },\n    \"exit_pricing\":{\n        \"price_side\": \"same\",\n        \"use_order_book\": true,\n        \"order_book_top\": 1,\n        \"price_last_balance\": 0.0\n    },\n    \"ignore_buying_expired_candle_after\": 120\n}","type":"content","url":"/strategy-migration#order-pricing","position":39},{"hierarchy":{"lvl1":"策略迁移指南","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl3","url":"/strategy-migration#freqai","position":40},{"hierarchy":{"lvl1":"策略迁移指南","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"content":"populate_any_indicators() 方法已被拆分为 feature_engineering_expand_all()、feature_engineering_expand_basic()、feature_engineering_standard() 和 set_freqai_targets()。\n\n对于每个新函数，交易对（和必要的时间框架）将自动添加到列中。\n因此，使用新逻辑定义特征变得更加简单。\n\n有关每个方法的完整说明，请转到相应的 \n\nfreqAI 文档页面\ndef populate_any_indicators(\n        self, pair, df, tf, informative=None, set_generalized_indicators=False\n    ):\n\n        if informative is None:\n            informative = self.dp.get_pair_dataframe(pair, tf)\n\n        # 第一个循环自动复制时间周期的指标\n        for t in self.freqai_info[\"feature_parameters\"][\"indicator_periods_candles\"]:\n\n            t = int(t)\n            informative[f\"%-{pair}rsi-period_{t}\"] = ta.RSI(informative, timeperiod=t)\n            informative[f\"%-{pair}mfi-period_{t}\"] = ta.MFI(informative, timeperiod=t)\n            informative[f\"%-{pair}adx-period_{t}\"] = ta.ADX(informative, timeperiod=t)\n            informative[f\"%-{pair}sma-period_{t}\"] = ta.SMA(informative, timeperiod=t)\n            informative[f\"%-{pair}ema-period_{t}\"] = ta.EMA(informative, timeperiod=t)\n\n            bollinger = qtpylib.bollinger_bands(\n                qtpylib.typical_price(informative), window=t, stds=2.2\n            )\n            informative[f\"{pair}bb_lowerband-period_{t}\"] = bollinger[\"lower\"]\n            informative[f\"{pair}bb_middleband-period_{t}\"] = bollinger[\"mid\"]\n            informative[f\"{pair}bb_upperband-period_{t}\"] = bollinger[\"upper\"]\n\n            informative[f\"%-{pair}bb_width-period_{t}\"] = (\n                informative[f\"{pair}bb_upperband-period_{t}\"]\n                - informative[f\"{pair}bb_lowerband-period_{t}\"]\n            ) / informative[f\"{pair}bb_middleband-period_{t}\"]\n            informative[f\"%-{pair}close-bb_lower-period_{t}\"] = (\n                informative[\"close\"] / informative[f\"{pair}bb_lowerband-period_{t}\"]\n            )\n\n            informative[f\"%-{pair}roc-period_{t}\"] = ta.ROC(informative, timeperiod=t)\n\n            informative[f\"%-{pair}relative_volume-period_{t}\"] = (\n                informative[\"volume\"] / informative[\"volume\"].rolling(t).mean()\n            ) # (1)\n\n        informative[f\"%-{pair}pct-change\"] = informative[\"close\"].pct_change()\n        informative[f\"%-{pair}raw_volume\"] = informative[\"volume\"]\n        informative[f\"%-{pair}raw_price\"] = informative[\"close\"]\n        # (2)\n\n        indicators = [col for col in informative if col.startswith(\"%\")]\n        # 这个循环复制并移动所有指标，为数据添加时效性\n        for n in range(self.freqai_info[\"feature_parameters\"][\"include_shifted_candles\"] + 1):\n            if n == 0:\n                continue\n            informative_shift = informative[indicators].shift(n)\n            informative_shift = informative_shift.add_suffix(\"_shift-\" + str(n))\n            informative = pd.concat((informative, informative_shift), axis=1)\n\n        df = merge_informative_pair(df, informative, self.config[\"timeframe\"], tf, ffill=True)\n        skip_columns = [\n            (s + \"_\" + tf) for s in [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\"]\n        ]\n        df = df.drop(columns=skip_columns)\n\n        # 在这里添加通用指标（因为在实盘中，它将调用此函数在训练期间填充指标）。注意我们如何确保不多次添加它们\n        if set_generalized_indicators:\n            df[\"%-day_of_week\"] = (df[\"date\"].dt.dayofweek + 1) / 7\n            df[\"%-hour_of_day\"] = (df[\"date\"].dt.hour + 1) / 25\n            # (3)\n\n            # 用户通过在前面添加 &- 来添加目标（见下面的约定）\n            df[\"&-s_close\"] = (\n                df[\"close\"]\n                .shift(-self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n                .rolling(self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n                .mean()\n                / df[\"close\"]\n                - 1\n            )  # (4)\n\n        return df\n\n特征 - 移到 feature_engineering_expand_all\n\n基本特征，不在 indicator_periods_candles 中扩展 - 移到 feature_engineering_expand_basic()。\n\n不应扩展的标准特征 - 移到 feature_engineering_standard()。\n\n目标 - 移到 set_freqai_targets()。","type":"content","url":"/strategy-migration#freqai","position":41},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"freqai - 特征工程扩展全部","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#freqai-1","position":42},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"freqai - 特征工程扩展全部","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"content":"特征现在会自动扩展。因此，需要删除扩展循环以及 {pair} / {timeframe} 部分。    def feature_engineering_expand_all(self, dataframe, period, **kwargs) -> DataFrame::\n        \"\"\"\n        *仅在使用 FreqAI 启用的策略时有效*\n        此函数将根据配置定义的 `indicator_periods_candles`、`include_timeframes`、`include_shifted_candles` 和 `include_corr_pairs` 自动扩展定义的特征。\n        换句话说，在此函数中定义的单个特征将自动扩展为总共\n        `indicator_periods_candles` * `include_timeframes` * `include_shifted_candles` *\n        `include_corr_pairs` 个添加到模型的特征。\n\n        所有特征必须以 `%` 开头才能被 FreqAI 内部识别。\n\n        有关这些配置定义的参数如何加速特征工程的更多详细信息，请参阅文档：\n\n        https://www.freqtrade.io/en/latest/freqai-parameter-table/#feature-parameters\n\n        https://www.freqtrade.io/en/latest/freqai-feature-engineering/#defining-the-features\n\n        :param df: 将接收特征的策略数据框\n        :param period: 指标的周期 - 使用示例：\n        dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n        \"\"\"\n\n        dataframe[\"%-rsi-period\"] = ta.RSI(dataframe, timeperiod=period)\n        dataframe[\"%-mfi-period\"] = ta.MFI(dataframe, timeperiod=period)\n        dataframe[\"%-adx-period\"] = ta.ADX(dataframe, timeperiod=period)\n        dataframe[\"%-sma-period\"] = ta.SMA(dataframe, timeperiod=period)\n        dataframe[\"%-ema-period\"] = ta.EMA(dataframe, timeperiod=period)\n\n        bollinger = qtpylib.bollinger_bands(\n            qtpylib.typical_price(dataframe), window=period, stds=2.2\n        )\n        dataframe[\"bb_lowerband-period\"] = bollinger[\"lower\"]\n        dataframe[\"bb_middleband-period\"] = bollinger[\"mid\"]\n        dataframe[\"bb_upperband-period\"] = bollinger[\"upper\"]\n\n        dataframe[\"%-bb_width-period\"] = (\n            dataframe[\"bb_upperband-period\"]\n            - dataframe[\"bb_lowerband-period\"]\n        ) / dataframe[\"bb_middleband-period\"]\n        dataframe[\"%-close-bb_lower-period\"] = (\n            dataframe[\"close\"] / dataframe[\"bb_lowerband-period\"]\n        )\n\n        dataframe[\"%-roc-period\"] = ta.ROC(dataframe, timeperiod=period)\n\n        dataframe[\"%-relative_volume-period\"] = (\n            dataframe[\"volume\"] / dataframe[\"volume\"].rolling(period).mean()\n        )\n\n        return dataframe\n","type":"content","url":"/strategy-migration#freqai-1","position":43},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"Freqai - 特征工程基础","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#freqai-2","position":44},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"Freqai - 特征工程基础","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"content":"基本特征。确保从特征中删除 {pair} 部分。    def feature_engineering_expand_basic(self, dataframe: DataFrame, **kwargs) -> DataFrame::\n        \"\"\"\n        *仅在使用 FreqAI 启用的策略时有效*\n        此函数将根据配置定义的 `include_timeframes`、`include_shifted_candles` 和 `include_corr_pairs` 自动扩展定义的特征。\n        换句话说，在此函数中定义的单个特征将自动扩展为总共\n        `include_timeframes` * `include_shifted_candles` * `include_corr_pairs`\n        个添加到模型的特征。\n\n        此处定义的特征将*不会*在用户定义的 `indicator_periods_candles` 上自动复制\n\n        所有特征必须以 `%` 开头才能被 FreqAI 内部识别。\n\n        有关这些配置定义的参数如何加速特征工程的更多详细信息，请参阅文档：\n\n        https://www.freqtrade.io/en/latest/freqai-parameter-table/#feature-parameters\n\n        https://www.freqtrade.io/en/latest/freqai-feature-engineering/#defining-the-features\n\n        :param df: 将接收特征的策略数据框\n        dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n        dataframe[\"%-ema-200\"] = ta.EMA(dataframe, timeperiod=200)\n        \"\"\"\n        dataframe[\"%-pct-change\"] = dataframe[\"close\"].pct_change()\n        dataframe[\"%-raw_volume\"] = dataframe[\"volume\"]\n        dataframe[\"%-raw_price\"] = dataframe[\"close\"]\n        return dataframe","type":"content","url":"/strategy-migration#freqai-2","position":45},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"FreqAI - 特征工程标准","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#freqai-3","position":46},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"FreqAI - 特征工程标准","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"content":"    def feature_engineering_standard(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在使用 FreqAI 启用的策略时有效*\n        此可选函数将使用基本时间框架的数据框调用一次。\n        这是要调用的最终函数，这意味着进入此函数的数据框将包含所有其他\n        freqai_feature_engineering_* 函数创建的所有特征和列。\n\n        此函数是进行自定义异国特征提取的好地方（例如 tsfresh）。\n        此函数是任何不应自动扩展的特征的好地方（例如星期几）。\n\n        所有特征必须以 `%` 开头才能被 FreqAI 内部识别。\n\n        有关特征工程的更多详细信息：\n\n        https://www.freqtrade.io/en/latest/freqai-feature-engineering\n\n        :param df: 将接收特征的策略数据框\n        使用示例：dataframe[\"%-day_of_week\"] = (dataframe[\"date\"].dt.dayofweek + 1) / 7\n        \"\"\"\n        dataframe[\"%-day_of_week\"] = dataframe[\"date\"].dt.dayofweek\n        dataframe[\"%-hour_of_day\"] = dataframe[\"date\"].dt.hour\n        return dataframe","type":"content","url":"/strategy-migration#freqai-3","position":47},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"FreqAI - 设置目标","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#freqai-4","position":48},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"FreqAI - 设置目标","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"content":"目标现在有了自己的专用方法。    def set_freqai_targets(self, dataframe: DataFrame, **kwargs) -> DataFrame:\n        \"\"\"\n        *仅在使用 FreqAI 启用的策略时有效*\n        设置模型目标的必需函数。\n        所有目标必须以 `&` 开头才能被 FreqAI 内部识别。\n\n        有关特征工程的更多详细信息：\n\n        https://www.freqtrade.io/en/latest/freqai-feature-engineering\n\n        :param df: 将接收目标的策略数据框\n        使用示例：dataframe[\"&-target\"] = dataframe[\"close\"].shift(-1) / dataframe[\"close\"]\n        \"\"\"\n        dataframe[\"&-s_close\"] = (\n            dataframe[\"close\"]\n            .shift(-self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n            .rolling(self.freqai_info[\"feature_parameters\"][\"label_period_candles\"])\n            .mean()\n            / dataframe[\"close\"]\n            - 1\n            )\n\n        return dataframe","type":"content","url":"/strategy-migration#freqai-4","position":49},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"FreqAI - 新数据管道","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"type":"lvl4","url":"/strategy-migration#freqai-5","position":50},{"hierarchy":{"lvl1":"策略迁移指南","lvl4":"FreqAI - 新数据管道","lvl3":"FreqAI 策略","lvl2":"V2 和 V3 之间的策略迁移"},"content":"如果你创建了自己的自定义 IFreqaiModel，带有自定义 train()/predict() 函数，并且你仍然依赖 data_cleaning_train/predict()，那么你需要迁移到新的管道。如果你的模型不依赖 data_cleaning_train/predict()，那么你不需要担心这个迁移。这意味着这个迁移指南只与很小一部分高级用户相关。如果你偶然看到这个指南，欢迎在 Freqtrade discord 服务器上深入询问你的问题。\n\n转换涉及首先删除 data_cleaning_train/predict()，并用 define_data_pipeline() 和 define_label_pipeline() 函数替换它们到你的 IFreqaiModel 类：class MyCoolFreqaiModel(BaseRegressionModel):\n    \"\"\"\n    你在 Freqtrade 版本 2023.6 之前制作的一些很酷的自定义 IFreqaiModel\n    \"\"\"\n    def train(\n        self, unfiltered_df: DataFrame, pair: str, dk: FreqaiDataKitchen, **kwargs\n    ) -> Any:\n\n        # ... 你的自定义内容\n\n        # 删除这些行\n        # data_dictionary = dk.make_train_test_datasets(features_filtered, labels_filtered)\n        # self.data_cleaning_train(dk)\n        # data_dictionary = dk.normalize_data(data_dictionary)\n        # (1)\n\n        # 添加这些行。现在我们自己控制管道的 fit/transform\n        dd = dk.make_train_test_datasets(features_filtered, labels_filtered)\n        dk.feature_pipeline = self.define_data_pipeline(threads=dk.thread_count)\n        dk.label_pipeline = self.define_label_pipeline(threads=dk.thread_count)\n\n        (dd[\"train_features\"],\n         dd[\"train_labels\"],\n         dd[\"train_weights\"]) = dk.feature_pipeline.fit_transform(dd[\"train_features\"],\n                                                                  dd[\"train_labels\"],\n                                                                  dd[\"train_weights\"])\n\n        (dd[\"test_features\"],\n         dd[\"test_labels\"],\n         dd[\"test_weights\"]) = dk.feature_pipeline.transform(dd[\"test_features\"],\n                                                             dd[\"test_labels\"],\n                                                             dd[\"test_weights\"])\n\n        dd[\"train_labels\"], _, _ = dk.label_pipeline.fit_transform(dd[\"train_labels\"])\n        dd[\"test_labels\"], _, _ = dk.label_pipeline.transform(dd[\"test_labels\"])\n\n        # ... 你的自定义代码\n\n        return model\n\n    def predict(\n        self, unfiltered_df: DataFrame, dk: FreqaiDataKitchen, **kwargs\n    ) -> tuple[DataFrame, npt.NDArray[np.int_]]:\n\n        # ... 你的自定义内容\n\n        # 删除这些行：\n        # self.data_cleaning_predict(dk)\n        # (2)\n\n        # 添加这些行：\n        dk.data_dictionary[\"prediction_features\"], outliers, _ = dk.feature_pipeline.transform(\n            dk.data_dictionary[\"prediction_features\"], outlier_check=True)\n\n        # 删除这行\n        # pred_df = dk.denormalize_labels_from_metadata(pred_df)\n        # (3)\n\n        # 用这些行替换\n        pred_df, _, _ = dk.label_pipeline.inverse_transform(pred_df)\n        if self.freqai_info.get(\"DI_threshold\", 0) > 0:\n            dk.DI_values = dk.feature_pipeline[\"di\"].di_values\n        else:\n            dk.DI_values = np.zeros(outliers.shape[0])\n        dk.do_predict = outliers\n\n        # ... 你的自定义代码\n        return (pred_df, dk.do_predict)\n\n数据规范化和清理现在与新管道定义统一。这是在新的 define_data_pipeline() 和 define_label_pipeline() 函数中创建的。不再使用 data_cleaning_train() 和 data_cleaning_predict() 函数。如果你愿意，你可以覆盖 define_data_pipeline() 来创建自己的自定义管道。\n\n数据规范化和清理现在与新管道定义统一。这是在新的 define_data_pipeline() 和 define_label_pipeline() 函数中创建的。不再使用 data_cleaning_train() 和 data_cleaning_predict() 函数。如果你愿意，你可以覆盖 define_data_pipeline() 来创建自己的自定义管道。\n\n数据反规范化使用新管道完成。用下面的行替换。","type":"content","url":"/strategy-migration#freqai-5","position":51},{"hierarchy":{"lvl1":"Telegram 使用指南"},"type":"lvl1","url":"/telegram-usage","position":0},{"hierarchy":{"lvl1":"Telegram 使用指南"},"content":"","type":"content","url":"/telegram-usage","position":1},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"设置您的 Telegram 机器人"},"type":"lvl2","url":"/telegram-usage#id-telegram","position":2},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"设置您的 Telegram 机器人"},"content":"下面我们将解释如何创建您的 Telegram 机器人，以及如何获取您的 Telegram 用户 ID。","type":"content","url":"/telegram-usage#id-telegram","position":3},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"1. 创建您的 Telegram 机器人","lvl2":"设置您的 Telegram 机器人"},"type":"lvl3","url":"/telegram-usage#id-1-telegram","position":4},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"1. 创建您的 Telegram 机器人","lvl2":"设置您的 Telegram 机器人"},"content":"与 \n\nTelegram BotFather 开始对话\n\n发送消息 /newbot。\n\nBotFather 回复：\n\n好的，一个新机器人。我们该如何称呼它？请为您的机器人选择一个名称。\n\n选择您机器人的公开名称（例如 Freqtrade bot）\n\nBotFather 回复：\n\n很好。现在让我们为您的机器人选择一个用户名。它必须以 bot 结尾。例如：TetrisBot 或 tetris_bot。\n\n选择您机器人的名称 ID 并发送给 BotFather（例如 “My_own_freqtrade_bot”）\n\nBotFather 回复：\n\n完成！恭喜您的新机器人。您可以在 t.me/yourbots_name_bot 找到它。您现在可以为您的机器人添加描述、关于部分和个人资料图片，请参阅 /help 获取命令列表。顺便说一下，当您完成创建您的酷炫机器人后，如果您想要一个更好的用户名，请联系我们的机器人支持。只需确保机器人在执行此操作之前完全可操作。\n使用此令牌访问 HTTP API：22222222:APITOKEN\n有关 Bot API 的描述，请参阅此页面：\n\nhttps://​core​.telegram​.org​/bots​/api Father bot 将返回给您令牌（API 密钥）\n\n复制 API 令牌（上例中的 22222222:APITOKEN）并将其用于配置参数 token。\n\n别忘了通过点击 /START 按钮开始与您的机器人对话","type":"content","url":"/telegram-usage#id-1-telegram","position":5},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"type":"lvl3","url":"/telegram-usage#id-2-telegram-id","position":6},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"content":"","type":"content","url":"/telegram-usage#id-2-telegram-id","position":7},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl4":"获取您的用户 ID","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"type":"lvl4","url":"/telegram-usage#id-id","position":8},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl4":"获取您的用户 ID","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"content":"与 \n\nuserinfobot 对话\n\n获取您的 “Id”，您将使用它作为配置参数 chat_id。","type":"content","url":"/telegram-usage#id-id","position":9},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl4":"使用群组 ID","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"type":"lvl4","url":"/telegram-usage#id-id-1","position":10},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl4":"使用群组 ID","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"content":"要获取群组 ID，您可以将机器人添加到群组中，启动 freqtrade，并发出 /tg_info 命令。\n这将返回群组 ID，无需使用其他随机机器人。\n虽然仍然需要 “chat_id”，但此命令不需要将其设置为特定的群组 ID。\n\n响应还将包含 “topic_id”（如果需要）- 两者都采用可以直接复制/粘贴到配置中的格式。 {\n    \"enabled\": true,\n    \"token\": \"********\",\n    \"chat_id\": \"-1001332619709\",\n    \"topic_id\": \"122\"\n}\n\n对于 Freqtrade 配置，您可以使用完整值（包括 -）作为字符串：   \"chat_id\": \"-1001332619709\"\n\n使用 telegram 群组使用 telegram 群组时，您正在给予 telegram 群组的每个成员访问您的 freqtrade 机器人和通过 telegram 可能的所有命令的权限。请确保您可以信任 telegram 群组中的每个人，以避免不愉快的意外。","type":"content","url":"/telegram-usage#id-id-1","position":11},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl5":"群组话题 ID","lvl4":"使用群组 ID","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"type":"lvl5","url":"/telegram-usage#id-id-2","position":12},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl5":"群组话题 ID","lvl4":"使用群组 ID","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"content":"要在群组中使用特定话题，您可以在配置中使用 topic_id 参数。这将允许您在群组的特定话题中使用机器人。如果没有这个，如果为群组聊天启用了话题，机器人将始终响应群组中的一般频道。   \"chat_id\": \"-1001332619709\",\n   \"topic_id\": \"3\"\n\n与群组 ID 类似 - 您可以从话题/线程中使用 /tg_info 获取正确的话题 ID。","type":"content","url":"/telegram-usage#id-id-2","position":13},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl4":"授权用户","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"type":"lvl4","url":"/telegram-usage#id","position":14},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl4":"授权用户","lvl3":"2. Telegram 用户 ID","lvl2":"设置您的 Telegram 机器人"},"content":"对于群组，限制谁可以向机器人发送命令可能很有用。\n\n如果 \"authorized_users\": [] 存在且为空，则不允许任何用户控制机器人。\n在下面的示例中，只有 ID 为 “1234567” 的用户被允许控制机器人 - 所有其他用户只能接收消息。   \"chat_id\": \"-1001332619709\",\n   \"topic_id\": \"3\",\n   \"authorized_users\": [\"1234567\"]","type":"content","url":"/telegram-usage#id","position":15},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"控制 telegram 通知"},"type":"lvl2","url":"/telegram-usage#id-telegram-1","position":16},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"控制 telegram 通知"},"content":"Freqtrade 提供了控制 telegram 机器人详细程度的方法。\n每个设置都有以下可能的值：\n\non - 将发送消息，并通知用户。\n\nsilent - 将发送消息，通知将没有声音/振动。\n\noff - 完全跳过发送消息类型。\n\n显示不同设置的示例配置：\"telegram\": {\n    \"enabled\": true,\n    \"token\": \"your_telegram_token\",\n    \"chat_id\": \"your_telegram_chat_id\",\n    \"allow_custom_messages\": true,\n    \"notification_settings\": {\n        \"status\": \"silent\",\n        \"warning\": \"on\",\n        \"startup\": \"off\",\n        \"entry\": \"silent\",\n        \"entry_fill\": \"on\",\n        \"entry_cancel\": \"silent\",\n        \"exit\": {\n            \"roi\": \"silent\",\n            \"emergency_exit\": \"on\",\n            \"force_exit\": \"on\",\n            \"exit_signal\": \"silent\",\n            \"trailing_stop_loss\": \"on\",\n            \"stop_loss\": \"on\",\n            \"stoploss_on_exchange\": \"on\",\n            \"custom_exit\": \"silent\",  // 未指定退出原因的自定义退出\n            \"partial_exit\": \"on\",\n            // \"custom_exit_message\": \"silent\",  // 禁用单个自定义退出原因\n            \"*\": \"off\"  // 禁用所有其他退出原因\n        },\n        // \"exit\": \"off\",  // 禁用所有退出消息的简单配置\n        \"exit_cancel\": \"on\",\n        \"exit_fill\": \"off\",\n        \"protection_trigger\": \"off\",\n        \"protection_trigger_global\": \"on\",\n        \"strategy_msg\": \"off\",\n        \"show_candle\": \"off\"\n    },\n    \"reload\": true,\n    \"balance_dust_level\": 0.01\n},\n\nentry 通知在订单下单时发送，而 entry_fill 通知在订单在交易所成交时发送。\n\nexit 通知在订单下单时发送，而 exit_fill 通知在订单在交易所成交时发送。退出消息（exit 和 exit_fill）可以在各个退出原因级别进一步控制，使用特定的退出原因作为键。所有退出原因的默认值为 on - 但可以通过特殊的 * 键进行配置 - 这将作为所有未明确定义的退出原因的通配符。\n\n*_fill 通知默认关闭，必须明确启用。\n\nprotection_trigger 通知在保护触发时发送，protection_trigger_global 通知在全局保护触发时发送。\n\nstrategy_msg - 接收来自策略的通知，通过策略中的 self.dp.send_msg() 发送\n\n更多详情。\n\nshow_candle - 在入场/退出消息中显示蜡烛图值。唯一可能的值是 \"ohlc\" 或 \"off\"。\n\nbalance_dust_level 将定义 /balance 命令将什么视为\"灰尘\" - 将显示余额低于此值的货币。\n\nallow_custom_messages 完全禁用策略消息。\n\nreload 允许您在选定的消息上禁用重新加载按钮。","type":"content","url":"/telegram-usage#id-telegram-1","position":17},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"创建自定义键盘（命令快捷按钮）"},"type":"lvl2","url":"/telegram-usage#id-1","position":18},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"创建自定义键盘（命令快捷按钮）"},"content":"Telegram 允许我们创建一个带有命令按钮的自定义键盘。\n默认的自定义键盘如下所示。[\n    [\"/daily\", \"/profit\", \"/balance\"], # 第 1 行，3 个命令\n    [\"/status\", \"/status table\", \"/performance\"], # 第 2 行，3 个命令\n    [\"/count\", \"/start\", \"/stop\", \"/help\"] # 第 3 行，4 个命令\n]","type":"content","url":"/telegram-usage#id-1","position":19},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"使用方法","lvl2":"创建自定义键盘（命令快捷按钮）"},"type":"lvl3","url":"/telegram-usage#id-2","position":20},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"使用方法","lvl2":"创建自定义键盘（命令快捷按钮）"},"content":"您可以在 config.json 中创建自己的键盘：\"telegram\": {\n      \"enabled\": true,\n      \"token\": \"your_telegram_token\",\n      \"chat_id\": \"your_telegram_chat_id\",\n      \"keyboard\": [\n          [\"/daily\", \"/stats\", \"/balance\", \"/profit\"],\n          [\"/status table\", \"/performance\"],\n          [\"/reload_config\", \"/count\", \"/logs\"]\n      ]\n   },\n\n支持的命令\n\n只允许以下命令。不支持命令参数！\n\n/start, /pause, /stop, /status, /status table, /trades, /profit, /performance, /daily, /stats, /count, /locks, /balance, /stopentry, /reload_config, /show_config, /logs, /whitelist, /blacklist, /edge, /help, /version, /marketdir","type":"content","url":"/telegram-usage#id-2","position":21},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"Telegram 命令"},"type":"lvl2","url":"/telegram-usage#telegram","position":22},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"Telegram 命令"},"content":"默认情况下，Telegram 机器人显示预定义的命令。某些命令只能通过向机器人发送来使用。下表列出了官方命令。您可以随时使用 /help 请求帮助。\n\n命令\n\n描述\n\n系统命令\n\n\n\n/start\n\n启动交易机器人\n\n`/pause\n\n/stopentry\n\n/stop\n\n停止交易机器人\n\n/reload_config\n\n重新加载配置文件\n\n/show_config\n\n显示当前配置的相关操作设置部分\n\n/logs [limit]\n\n显示最后的日志消息。\n\n/help\n\n显示帮助消息\n\n/version\n\n显示版本\n\n状态\n\n\n\n/status\n\n列出所有开放交易\n\n/status <trade_id>\n\n列出一个或多个特定交易。用空格分隔多个 <trade_id>。\n\n/status table\n\n以表格格式列出所有开放交易。待处理的买单用星号 (*) 标记，待处理的卖单用双星号 (**) 标记\n\n/order <trade_id>\n\n列出一个或多个特定交易的订单。用空格分隔多个 <trade_id>。\n\n/trades [limit]\n\n以表格格式列出所有最近关闭的交易。\n\n/count\n\n显示已使用和可用的交易数量\n\n/locks\n\n显示当前锁定的交易对。\n\n/unlock <pair or lock_id>\n\n移除此交易对的锁定（或此锁定 ID）。\n\n`/marketdir [long\n\nshort\n\n/list_custom_data <trade_id> [key]\n\n列出交易 ID 和键组合的自定义数据。如果未提供键，将列出为该交易 ID 找到的所有键值对。\n\n修改交易状态\n\n\n\n`/forceexit <trade_id>\n\n/fx `\n\n`/forceexit all\n\n/fx all`\n\n/fx\n\n/forceexit 的别名\n\n/forcelong <pair> [rate]\n\n立即买入给定交易对。rate 是可选的，仅适用于限价单。（必须将 force_entry_enable 设置为 True）\n\n/forceshort <pair> [rate]\n\n立即做空给定交易对。rate 是可选的，仅适用于限价单。这只在非现货市场有效。（必须将 force_entry_enable 设置为 True）\n\n/delete <trade_id>\n\n从数据库中删除特定交易。尝试关闭开放订单。需要在交易所手动处理此交易。\n\n/reload_trade <trade_id>\n\n从交易所重新加载交易。仅在实盘有效，可能有助于恢复在交易所手动卖出的交易。\n\n`/cancel_open_order <trade_id>\n\n/coo <trade_id>`\n\n指标\n\n\n\n/profit [<n>]\n\n显示最近 n 天（默认所有交易）的已关闭交易的盈亏摘要和您的表现统计\n\n/profit_[long|short] [<n>]\n\n显示您在一个方向上已平仓交易的盈亏摘要以及一些关于您表现的统计数据，涵盖过去n天（默认为所有交易）\n\n/performance\n\n按交易对显示每个已完成交易的表现\n\n/balance\n\n显示每个货币的机器人管理余额\n\n/balance full\n\n显示每个货币的账户余额\n\n/daily <n>\n\n显示最近 n 天（n 默认为 7）的每日盈亏\n\n/weekly <n>\n\n显示最近 n 周（n 默认为 8）的每周盈亏\n\n/monthly <n>\n\n显示最近 n 个月（n 默认为 6）的每月盈亏\n\n/stats\n\n显示按退出原因统计的胜/负以及买入和卖出的平均持有时间\n\n/exits\n\n显示按退出原因统计的胜/负以及买入和卖出的平均持有时间\n\n/entries\n\n显示按退出原因统计的胜/负以及买入和卖出的平均持有时间\n\n/whitelist [sorted] [baseonly]\n\n显示当前白名单。可选择按字母顺序显示和/或仅显示每个交易对的基础货币。\n\n/blacklist [pair]\n\n显示当前黑名单，或将交易对添加到黑名单。\n\n/edge\n\n如果启用，显示 Edge 验证的交易对。","type":"content","url":"/telegram-usage#telegram","position":23},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"Telegram 命令示例"},"type":"lvl2","url":"/telegram-usage#telegram-1","position":24},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl2":"Telegram 命令示例"},"content":"下面，您将收到每个命令的 Telegram 消息示例。","type":"content","url":"/telegram-usage#telegram-1","position":25},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/start","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-start","position":26},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/start","lvl2":"Telegram 命令示例"},"content":"状态： running","type":"content","url":"/telegram-usage#id-start","position":27},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/pause | /stopentry | /stopbuy","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-pause-stopentry-stopbuy","position":28},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/pause | /stopentry | /stopbuy","lvl2":"Telegram 命令示例"},"content":"状态： paused, no more entries will occur from now. Run /start to enable entries.\n\n通过将状态更改为 paused 来防止机器人开仓新交易。\n开放交易将继续按照其常规规则（ROI/退出信号、止损等）进行管理。\n请注意，仓位调整仍然活跃，但仅在退出方面 - 这意味着当机器人处于 paused 状态时，它只能减少开放交易的仓位大小。\n\n之后，给机器人时间关闭开放交易（可以通过 /status table 检查）。\n一旦所有仓位都关闭，运行 /stop 完全停止机器人。\n\n使用 /start 将机器人恢复到 running 状态，允许它开仓新仓位。\n\nWarning\n\n暂停/停止入场信号仅在机器人运行时有效，并且不会持久化，因此重启机器人将导致此重置。","type":"content","url":"/telegram-usage#id-pause-stopentry-stopbuy","position":29},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/stop","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-stop","position":30},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/stop","lvl2":"Telegram 命令示例"},"content":"Stopping trader ...\n状态： stopped","type":"content","url":"/telegram-usage#id-stop","position":31},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/status","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-status","position":32},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/status","lvl2":"Telegram 命令示例"},"content":"对于每个开放交易，机器人将向您发送以下消息。\n入场标签可通过策略配置。\n\n交易 ID： 123 (1 天前)当前交易对： CVC/BTC方向： 做多杠杆： 1.0数量： 26.64180098入场标签： Awesome Long Signal入场价格： 0.00007489当前价格： 0.00007489未实现盈亏： 12.95%止损： 0.00007389 (-0.02%)","type":"content","url":"/telegram-usage#id-status","position":33},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/status table","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-status-table","position":34},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/status table","lvl2":"Telegram 命令示例"},"content":"以表格格式返回所有开放交易的状态。ID L/S    交易对    时间    盈亏\n----    --------  -------  --------\n  67 L   SC/BTC    1 d      13.33%\n 123 S   CVC/BTC   1 h      12.95%","type":"content","url":"/telegram-usage#id-status-table","position":35},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/count","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-count","position":36},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/count","lvl2":"Telegram 命令示例"},"content":"返回已使用和可用的交易数量。当前    最大\n---------  -----\n     2     10","type":"content","url":"/telegram-usage#id-count","position":37},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/profit","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-profit","position":38},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/profit","lvl2":"Telegram 命令示例"},"content":"也可以使用 /profit_long 和 /profit_short 来仅显示多头或空头交易的利润。\n\n返回您的盈亏和表现摘要。\n\nROI： 已关闭交易∙ 0.00485701 BTC (2.2%) (15.2 Σ%)∙ 62.968 USDROI： 所有交易∙ 0.00255280 BTC (1.5%) (6.43 Σ%)∙ 33.095 EUR\n\n总交易次数： 138机器人启动： 2022-07-11 18:40:44第一笔交易： 3 天前最新交易： 2 分钟前平均持续时间： 2:33:45最佳表现： PAY/BTC: 50.23%交易量： 0.5 BTC盈亏比： 1.04胜/负： 102 / 36胜率： 73.91%期望值（比率）： 4.87 (1.66)最大回撤： 9.23% (0.01255 BTC)\n\n相对盈亏 1.2% 是每笔交易的平均盈亏。相对盈亏 15.2 Σ% 是基于起始资金计算的 - 所以在这种情况下，起始资金是 0.00485701 * 1.152 = 0.00738 BTC。起始资金() 要么取自 available_capital 设置，要么通过使用当前钱包大小 - 利润计算。盈亏比 计算为总利润/总亏损 - 应作为策略的整体指标。期望值 对应于每单位风险货币的平均回报，即胜率和风险回报比（获胜交易的平均收益与亏损交易的平均损失相比）。期望值比率 是基于所有过去交易的表现对后续交易的预期盈亏。最大回撤 对应于回测指标 Absolute Drawdown (Account) - 计算为 (Absolute Drawdown) / (DrawdownHigh + startingBalance)。机器人启动日期 将指机器人首次启动的日期。对于较旧的机器人，这将默认为第一笔交易的开放日期。","type":"content","url":"/telegram-usage#id-profit","position":39},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/forceexit <trade_id>","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-forceexit-trade-id","position":40},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/forceexit <trade_id>","lvl2":"Telegram 命令示例"},"content":"BINANCE： 以限价 0.01650000 退出 BTC/LTC（盈亏：~-4.07%，-0.00008168）\n\nTip\n\n您可以通过不带参数调用 /forceexit 获取所有开放交易的列表，这将显示按钮以简单退出交易。\n\n此命令在 /fx 中有别名 - 具有相同的功能，但在\"紧急\"情况下输入更快。","type":"content","url":"/telegram-usage#id-forceexit-trade-id","position":41},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/forcelong  [rate] | /forceshort  [rate]","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-forcelong-rate-forceshort-rate","position":42},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/forcelong  [rate] | /forceshort  [rate]","lvl2":"Telegram 命令示例"},"content":"/forcebuy <pair> [rate] 也支持做多，但应被视为已弃用。\n\nBINANCE： 以限价 0.03400000 做多 ETH/BTC（1.000000 ETH，225.290 USD）\n\n省略交易对将打开一个查询，询问要交易的交易对（基于当前白名单）。\n通过 /forcelong 创建的交易将具有 force_entry 的买入标签。\n\n请注意，要使此功能工作，需要将 force_entry_enable 设置为 true。\n\n更多详情","type":"content","url":"/telegram-usage#id-forcelong-rate-forceshort-rate","position":43},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/performance","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-performance","position":44},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/performance","lvl2":"Telegram 命令示例"},"content":"返回机器人已卖出的每种加密货币的表现。\n\n表现：\n\nRCN/BTC 0.003 BTC (57.77%) (1)\n\nPAY/BTC 0.0012 BTC (56.91%) (1)\n\nVIB/BTC 0.0011 BTC (47.07%) (1)\n\nSALT/BTC 0.0010 BTC (30.24%) (1)\n\nSTORJ/BTC 0.0009 BTC (27.24%) (1)...\n\n相对表现是针对该货币的总投资计算的，汇总该货币的所有已成交入场。","type":"content","url":"/telegram-usage#id-performance","position":45},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/balance","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-balance","position":46},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/balance","lvl2":"Telegram 命令示例"},"content":"返回您在交易所拥有的所有加密货币的余额。\n\n货币： BTC可用： 3.05890234余额： 3.05890234待处理： 0.0\n\n货币： CVC可用： 86.64180098余额： 86.64180098待处理： 0.0","type":"content","url":"/telegram-usage#id-balance","position":47},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/daily ","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-daily","position":48},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/daily ","lvl2":"Telegram 命令示例"},"content":"默认情况下 /daily 将返回最近 7 天。下面的示例是 /daily 3：\n\n最近 3 天的每日盈亏：日期（次数）     USDT          USD         盈亏 %\n--------------  ------------  ----------  ----------\n2022-06-11 (1)  -0.746 USDT   -0.75 USD   -0.08%\n2022-06-10 (0)  0 USDT        0.00 USD    0.00%\n2022-06-09 (5)  20 USDT       20.10 USD   5.00%","type":"content","url":"/telegram-usage#id-daily","position":49},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/weekly ","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-weekly","position":50},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/weekly ","lvl2":"Telegram 命令示例"},"content":"默认情况下 /weekly 将返回最近 8 周，包括当前周。每周从周一开始。\n下面的示例是 /weekly 3：\n\n最近 3 周的每周盈亏（从周一开始）：周一（次数）  盈亏 BTC      盈亏 USD     盈亏 %\n-------------  --------------  ------------    ----------\n2018-01-03 (5)  0.00224175 BTC  29,142 USD   4.98%\n2017-12-27 (1)  0.00033131 BTC   4,307 USD   0.00%\n2017-12-20 (4)  0.00269130 BTC  34.986 USD   5.12%","type":"content","url":"/telegram-usage#id-weekly","position":51},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/monthly ","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-monthly","position":52},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/monthly ","lvl2":"Telegram 命令示例"},"content":"默认情况下 /monthly 将返回最近 6 个月，包括当前月。下面的示例是 /monthly 3：\n\n最近 3 个月的每月盈亏：月份（次数）  盈亏 BTC      盈亏 USD     盈亏 %\n-------------  --------------  ------------    ----------\n2018-01 (20)    0.00224175 BTC  29,142 USD  4.98%\n2017-12 (5)    0.00033131 BTC   4,307 USD   0.00%\n2017-11 (10)    0.00269130 BTC  34.986 USD  5.10%","type":"content","url":"/telegram-usage#id-monthly","position":53},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/whitelist","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-whitelist","position":54},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/whitelist","lvl2":"Telegram 命令示例"},"content":"显示当前白名单\n\n使用包含 22 个交易对的 StaticPairList 白名单IOTA/BTC, NEO/BTC, TRX/BTC, VET/BTC, ADA/BTC, ETC/BTC, NCASH/BTC, DASH/BTC, XRP/BTC, XVG/BTC, EOS/BTC, LTC/BTC, OMG/BTC, BTG/BTC, LSK/BTC, ZEC/BTC, HOT/BTC, IOTX/BTC, XMR/BTC, AST/BTC, XLM/BTC, NANO/BTC","type":"content","url":"/telegram-usage#id-whitelist","position":55},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/blacklist [pair]","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-blacklist-pair","position":56},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/blacklist [pair]","lvl2":"Telegram 命令示例"},"content":"显示当前黑名单。\n如果设置了交易对，则此交易对将被添加到交易对列表中。\n也支持多个交易对，用空格分隔。使用 /reload_config 重置黑名单。\n\n使用包含 2 个交易对的 StaticPairList 黑名单DODGE/BTC, HOT/BTC。","type":"content","url":"/telegram-usage#id-blacklist-pair","position":57},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/edge","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-edge","position":58},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/edge","lvl2":"Telegram 命令示例"},"content":"显示 Edge 验证的交易对及其相应的胜率、期望值和止损值。\n\nEdge 仅验证以下交易对：交易对      胜率    期望值    止损\n--------  ---------  ------------  ----------\nDOCK/ETH   0.522727      0.881821       -0.03\nPHX/ETH    0.677419      0.560488       -0.03\nHOT/ETH    0.733333      0.490492       -0.03\nHC/ETH     0.588235      0.280988       -0.02\nARDR/ETH   0.366667      0.143059       -0.01","type":"content","url":"/telegram-usage#id-edge","position":59},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/version","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-version","position":60},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/version","lvl2":"Telegram 命令示例"},"content":"版本： 0.14.3","type":"content","url":"/telegram-usage#id-version","position":61},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/marketdir","lvl2":"Telegram 命令示例"},"type":"lvl3","url":"/telegram-usage#id-marketdir","position":62},{"hierarchy":{"lvl1":"Telegram 使用指南","lvl3":"/marketdir","lvl2":"Telegram 命令示例"},"content":"如果提供了市场方向，该命令将更新表示当前市场方向的用户管理变量。\n此变量在机器人启动时不会设置为任何有效的市场方向，必须由用户设置。下面的示例是 /marketdir long：成功将市场方向从 none 更新为 long。\n\n如果未提供市场方向，该命令将输出当前设置的市场方向。下面的示例是 /marketdir：当前设置的市场方向：even\n\n您可以通过 self.market_direction 在策略中使用市场方向。\n\n机器人重启\n\n请注意，市场方向不会持久化，将在机器人重启/重新加载后重置。\n\n回测\n\n由于此值/变量旨在在模拟/实盘交易中手动更改。\n\n使用 market_direction 的策略可能不会产生可靠、可重现的结果（对此变量的更改不会反映在回测中）。使用风险自负。","type":"content","url":"/telegram-usage#id-marketdir","position":63},{"hierarchy":{"lvl1":"Freqtrade 术语词典"},"type":"lvl1","url":"/terms","position":0},{"hierarchy":{"lvl1":"Freqtrade 术语词典"},"content":"本词典包含了 Freqtrade 和量化交易中的核心术语，按照主题分类并提供详细解释。","type":"content","url":"/terms","position":1},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🏗️ 基础架构术语"},"type":"lvl2","url":"/terms#id","position":2},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🏗️ 基础架构术语"},"content":"","type":"content","url":"/terms#id","position":3},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Freqtrade","lvl2":"🏗️ 基础架构术语"},"type":"lvl3","url":"/terms#freqtrade","position":4},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Freqtrade","lvl2":"🏗️ 基础架构术语"},"content":"定义: 一个用 Python 编写的免费开源加密货币交易机器人框架。\n\n详细解释:\n\n支持多个主流交易所（如币安、OKX、火币等）\n\n提供回测、实盘交易、策略优化等功能\n\n基于技术分析指标进行自动化交易\n\n支持通过 Telegram、WebUI 等方式进行控制\n\n使用场景:\n\n自动化加密货币交易\n\n策略回测和优化\n\n量化交易研究","type":"content","url":"/terms#freqtrade","position":5},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"FreqAI","lvl2":"🏗️ 基础架构术语"},"type":"lvl3","url":"/terms#freqai","position":6},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"FreqAI","lvl2":"🏗️ 基础架构术语"},"content":"定义: Freqtrade 的机器学习模块，用于基于 AI/ML 的交易策略开发。\n\n详细解释:\n\n集成多种机器学习算法（如 XGBoost、LightGBM、神经网络等）\n\n支持强化学习交易策略\n\n提供特征工程和数据预处理功能\n\n可进行预测模型的训练和部署\n\n相关概念: 机器学习、强化学习、特征工程、模型训练","type":"content","url":"/terms#freqai","position":7},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"策略 (Strategy)","lvl2":"🏗️ 基础架构术语"},"type":"lvl3","url":"/terms#id-strategy","position":8},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"策略 (Strategy)","lvl2":"🏗️ 基础架构术语"},"content":"定义: 定义买入和卖出逻辑的 Python 类，是 Freqtrade 的核心组件。\n\n详细解释:\n\n继承自 IStrategy 基类\n\n包含 populate_indicators、populate_entry_trend、populate_exit_trend 等核心方法\n\n定义技术指标计算、进出场条件、风险管理等规则\n\n可配置时间周期、止损、ROI 等参数\n\n核心方法:\n\npopulate_indicators(): 计算技术指标\n\npopulate_entry_trend(): 定义进场条件\n\npopulate_exit_trend(): 定义出场条件","type":"content","url":"/terms#id-strategy","position":9},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 交易相关术语"},"type":"lvl2","url":"/terms#id-1","position":10},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 交易相关术语"},"content":"","type":"content","url":"/terms#id-1","position":11},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对 (Trading Pair/Pair)","lvl2":"📊 交易相关术语"},"type":"lvl3","url":"/terms#id-trading-pair-pair","position":12},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对 (Trading Pair/Pair)","lvl2":"📊 交易相关术语"},"content":"定义: 两种货币的交易组合，表示用一种货币购买另一种货币。\n\n格式: BASE/QUOTE (如 BTC/USDT)\n\nBASE: 基础货币（被购买的货币）\n\nQUOTE: 计价货币（用于支付的货币）\n\n示例:\n\nBTC/USDT: 用 USDT 购买 BTC\n\nETH/BTC: 用 BTC 购买 ETH","type":"content","url":"/terms#id-trading-pair-pair","position":13},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易所 (Exchange)","lvl2":"📊 交易相关术语"},"type":"lvl3","url":"/terms#id-exchange","position":14},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易所 (Exchange)","lvl2":"📊 交易相关术语"},"content":"定义: 提供加密货币交易服务的平台。\n\nFreqtrade 支持的主要交易所:\n\nBinance (币安): 全球最大的加密货币交易所\n\nOKX: 主要的衍生品交易所\n\nKraken: 老牌合规交易所\n\nFTX: (已关闭) 曾经的衍生品交易所\n\nBybit: 衍生品和现货交易所","type":"content","url":"/terms#id-exchange","position":15},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"现货交易 (Spot Trading)","lvl2":"📊 交易相关术语"},"type":"lvl3","url":"/terms#id-spot-trading","position":16},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"现货交易 (Spot Trading)","lvl2":"📊 交易相关术语"},"content":"定义: 立即交割的交易方式，买卖实际的加密货币资产。\n\n特点:\n\n无杠杆风险\n\n拥有实际资产\n\n只能做多（买入后等待上涨）","type":"content","url":"/terms#id-spot-trading","position":17},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"杠杆交易 (Leverage Trading)","lvl2":"📊 交易相关术语"},"type":"lvl3","url":"/terms#id-leverage-trading","position":18},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"杠杆交易 (Leverage Trading)","lvl2":"📊 交易相关术语"},"content":"定义: 使用借款放大交易头寸的交易方式。\n\n详细解释:\n\n杠杆倍数: 如 10x 杠杆表示可用 1000 USDT 控制 10000 USDT 的头寸\n\n风险: 放大收益的同时也放大损失\n\n保证金: 需要提供一定资金作为担保","type":"content","url":"/terms#id-leverage-trading","position":19},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"保证金 (Margin)","lvl2":"📊 交易相关术语"},"type":"lvl3","url":"/terms#id-margin","position":20},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"保证金 (Margin)","lvl2":"📊 交易相关术语"},"content":"定义: 进行杠杆交易时需要提供的资金担保。\n\n类型:\n\n初始保证金: 开仓时需要的最小资金\n\n维持保证金: 维持头寸所需的最小资金\n\n可用保证金: 可用于新开仓位的资金","type":"content","url":"/terms#id-margin","position":21},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"槽位 (Slot)","lvl2":"📊 交易相关术语"},"type":"lvl3","url":"/terms#id-slot","position":22},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"槽位 (Slot)","lvl2":"📊 交易相关术语"},"content":"定义: 代表 Freqtrade 可同时开启的新交易最大数量的概念单位。\n\n详细解释:\n\n每个新交易会占用一个槽位\n\n槽位数量由配置文件中的 max_open_trades 参数决定\n\n当所有槽位被占满时，即使出现新的进场信号也不会创建新交易\n\n有效控制风险暴露和资金管理\n\n是并发交易控制的核心机制\n\n使用场景: 风险控制、并发交易管理、资金分配策略\n\n配置示例:{\n  \"max_open_trades\": 5  // 最多同时持有5个交易\n}","type":"content","url":"/terms#id-slot","position":23},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"计价币 (Quote Currency)","lvl2":"📊 交易相关术语"},"type":"lvl3","url":"/terms#id-quote-currency","position":24},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"计价币 (Quote Currency)","lvl2":"📊 交易相关术语"},"content":"定义: 交易对中用作计价基准和结算单位的货币。\n\n详细解释:\n\n在交易对 BTC/USDT 中，USDT 是计价币，BTC 是基础币\n\n多头交易：用计价币买入基础币\n\n空头交易：借入基础币卖出获得计价币\n\n影响资金管理和盈亏计算方式\n\n不同计价币的交易对风险特征不同\n\n常见计价币: USDT、USDC、BTC、ETH\n\n相关概念: 基础币、交易对、资金管理","type":"content","url":"/terms#id-quote-currency","position":25},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📈 技术分析术语"},"type":"lvl2","url":"/terms#id-2","position":26},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📈 技术分析术语"},"content":"","type":"content","url":"/terms#id-2","position":27},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"K线/蜡烛图 (Candlestick/Candle)","lvl2":"📈 技术分析术语"},"type":"lvl3","url":"/terms#k-candlestick-candle","position":28},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"K线/蜡烛图 (Candlestick/Candle)","lvl2":"📈 技术分析术语"},"content":"定义: 显示特定时间段内价格变动的图表元素。\n\n组成要素:\n\n开盘价 (Open): 时间段开始时的价格\n\n最高价 (High): 时间段内的最高价格\n\n最低价 (Low): 时间段内的最低价格\n\n收盘价 (Close): 时间段结束时的价格\n\n成交量 (Volume): 时间段内的交易量","type":"content","url":"/terms#k-candlestick-candle","position":29},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"OHLCV 数据","lvl2":"📈 技术分析术语"},"type":"lvl3","url":"/terms#ohlcv","position":30},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"OHLCV 数据","lvl2":"📈 技术分析术语"},"content":"定义: Open, High, Low, Close, Volume 的缩写，是K线数据的标准格式。\n\n在 Freqtrade 中的使用:# 获取 OHLCV 数据\ndataframe['open']    # 开盘价\ndataframe['high']    # 最高价\ndataframe['low']     # 最低价\ndataframe['close']   # 收盘价\ndataframe['volume']  # 成交量","type":"content","url":"/terms#ohlcv","position":31},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"时间周期 (Timeframe)","lvl2":"📈 技术分析术语"},"type":"lvl3","url":"/terms#id-timeframe","position":32},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"时间周期 (Timeframe)","lvl2":"📈 技术分析术语"},"content":"定义: K线数据的时间间隔。\n\n常用周期:\n\n1m: 1分钟线 - 高频交易\n\n5m: 5分钟线 - 短期交易\n\n15m: 15分钟线 - 短期交易\n\n1h: 1小时线 - 中期交易\n\n4h: 4小时线 - 中期交易\n\n1d: 日线 - 长期交易","type":"content","url":"/terms#id-timeframe","position":33},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl3","url":"/terms#id-technical-indicators","position":34},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"","type":"content","url":"/terms#id-technical-indicators","position":35},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"趋势指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl4","url":"/terms#id-3","position":36},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"趋势指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"","type":"content","url":"/terms#id-3","position":37},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"移动平均线 (Moving Average)","lvl4":"趋势指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl5","url":"/terms#id-moving-average","position":38},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"移动平均线 (Moving Average)","lvl4":"趋势指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"简单移动平均线 (SMA):\n\n定义: 特定期间内价格的算术平均值\n\n计算: (C1 + C2 + ... + Cn) / n\n\n用途: 识别趋势方向，支撑阻力位\n\n指数移动平均线 (EMA):\n\n定义: 对近期价格给予更高权重的移动平均线\n\n特点: 对价格变化更敏感\n\n计算: EMA = (Close × α) + (Previous EMA × (1-α))","type":"content","url":"/terms#id-moving-average","position":39},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"MACD (移动平均收敛散度)","lvl4":"趋势指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl5","url":"/terms#macd","position":40},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"MACD (移动平均收敛散度)","lvl4":"趋势指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"定义: 基于两条 EMA 差值的趋势跟踪指标。\n\n组成:\n\nMACD线: 12日EMA - 26日EMA\n\n信号线: MACD线的9日EMA\n\n柱状图: MACD线 - 信号线\n\n交易信号:\n\nMACD 上穿信号线: 买入信号\n\nMACD 下穿信号线: 卖出信号","type":"content","url":"/terms#macd","position":41},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"动量指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl4","url":"/terms#id-4","position":42},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"动量指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"","type":"content","url":"/terms#id-4","position":43},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"RSI (相对强弱指数)","lvl4":"动量指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl5","url":"/terms#rsi","position":44},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"RSI (相对强弱指数)","lvl4":"动量指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"定义: 衡量价格变动速度和幅度的动量振荡器。\n\n取值范围: 0-100\n\n超买: RSI > 70\n\n超卖: RSI < 30\n\n中性: 30-70\n\n计算公式:RSI = 100 - (100 / (1 + RS))\nRS = 平均涨幅 / 平均跌幅","type":"content","url":"/terms#rsi","position":45},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"随机指标 (Stochastic)","lvl4":"动量指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl5","url":"/terms#id-stochastic","position":46},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"随机指标 (Stochastic)","lvl4":"动量指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"定义: 比较收盘价与特定期间内价格区间的相对位置。\n\n组成:\n\n%K: 快速随机值\n\n%D: %K的移动平均（慢速随机值）","type":"content","url":"/terms#id-stochastic","position":47},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"波动性指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl4","url":"/terms#id-5","position":48},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"波动性指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"","type":"content","url":"/terms#id-5","position":49},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"布林带 (Bollinger Bands)","lvl4":"波动性指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl5","url":"/terms#id-bollinger-bands","position":50},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"布林带 (Bollinger Bands)","lvl4":"波动性指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"定义: 由移动平均线和标准差构成的通道指标。\n\n组成:\n\n中轨: 20日简单移动平均线\n\n上轨: 中轨 + (2 × 标准差)\n\n下轨: 中轨 - (2 × 标准差)\n\n交易应用:\n\n价格触及下轨: 可能的买入信号\n\n价格触及上轨: 可能的卖出信号","type":"content","url":"/terms#id-bollinger-bands","position":51},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"ATR (平均真实波幅)","lvl4":"波动性指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"type":"lvl5","url":"/terms#atr","position":52},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl5":"ATR (平均真实波幅)","lvl4":"波动性指标","lvl3":"技术指标 (Technical Indicators)","lvl2":"📈 技术分析术语"},"content":"定义: 衡量价格波动程度的指标。\n\n计算:\n\n真实波幅 = Max(H-L, |H-PC|, |L-PC|)\n\nATR = 真实波幅的n期移动平均\n\n应用: 设置止损、确定头寸大小","type":"content","url":"/terms#atr","position":53},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🎯 交易信号术语"},"type":"lvl2","url":"/terms#id-6","position":54},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🎯 交易信号术语"},"content":"","type":"content","url":"/terms#id-6","position":55},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"进场 (Entry)","lvl2":"🎯 交易信号术语"},"type":"lvl3","url":"/terms#id-entry","position":56},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"进场 (Entry)","lvl2":"🎯 交易信号术语"},"content":"定义: 开始一个新的交易头寸。\n\n类型:\n\n多头进场 (Long Entry): 买入资产，预期价格上涨\n\n空头进场 (Short Entry): 卖出（做空）资产，预期价格下跌\n\n在策略中的实现:dataframe.loc[条件, 'enter_long'] = 1    # 多头进场信号\ndataframe.loc[条件, 'enter_short'] = 1   # 空头进场信号","type":"content","url":"/terms#id-entry","position":57},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"出场 (Exit)","lvl2":"🎯 交易信号术语"},"type":"lvl3","url":"/terms#id-exit","position":58},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"出场 (Exit)","lvl2":"🎯 交易信号术语"},"content":"定义: 关闭已有的交易头寸。\n\n类型:\n\n多头出场 (Long Exit): 卖出持有的资产\n\n空头出场 (Short Exit): 买入以平仓空头头寸\n\n触发方式:\n\n策略信号\n\n止损\n\n止盈（ROI）\n\n时间止损","type":"content","url":"/terms#id-exit","position":59},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"信号 (Signal)","lvl2":"🎯 交易信号术语"},"type":"lvl3","url":"/terms#id-signal","position":60},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"信号 (Signal)","lvl2":"🎯 交易信号术语"},"content":"定义: 策略产生的买入或卖出指示。\n\n信号类型:\n\n进场信号: 开仓指示\n\n出场信号: 平仓指示\n\n强制信号: 手动触发的交易指令","type":"content","url":"/terms#id-signal","position":61},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"信号冲突 (Colliding Signals)","lvl2":"🎯 交易信号术语"},"type":"lvl3","url":"/terms#id-colliding-signals","position":62},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"信号冲突 (Colliding Signals)","lvl2":"🎯 交易信号术语"},"content":"定义: 在同一根K线上同时出现进场和出场信号的情况。\n\n详细解释:\n\n当 enter_long 和 exit_long 在同一时间点都为1时发生\n\nFreqtrade 会识别此情况并拒绝下单，避免矛盾操作\n\n通常表示策略逻辑需要优化或指标设置不当\n\n可通过调整指标参数或增加信号过滤条件来避免\n\n常见原因:\n\n指标参数设置过于敏感\n\n多个指标条件相互矛盾\n\n市场剧烈波动导致信号快速变化\n\n解决方案:\n\n增加信号确认条件\n\n调整指标参数\n\n使用信号过滤机制\n\n相关概念: 信号生成、策略优化、进场信号、出场信号","type":"content","url":"/terms#id-colliding-signals","position":63},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"💰 风险管理术语"},"type":"lvl2","url":"/terms#id-7","position":64},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"💰 风险管理术语"},"content":"","type":"content","url":"/terms#id-7","position":65},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"止损 (Stop Loss)","lvl2":"💰 风险管理术语"},"type":"lvl3","url":"/terms#id-stop-loss","position":66},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"止损 (Stop Loss)","lvl2":"💰 风险管理术语"},"content":"定义: 当亏损达到预设水平时自动平仓的风险控制机制。\n\n类型:\n\n固定止损: 基于固定百分比或金额\n\n追踪止损 (Trailing Stop): 随价格有利变动而调整的动态止损\n\n技术止损: 基于技术分析水平的止损\n\n在 Freqtrade 中设置:stoploss = -0.10  # 10% 止损","type":"content","url":"/terms#id-stop-loss","position":67},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"追踪止损 (Trailing Stop)","lvl2":"💰 风险管理术语"},"type":"lvl3","url":"/terms#id-trailing-stop","position":68},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"追踪止损 (Trailing Stop)","lvl2":"💰 风险管理术语"},"content":"定义: 随着盈利增加而向有利方向移动的止损订单。\n\n工作原理:\n\n价格向有利方向移动时，止损位跟随调整\n\n价格反向移动时，止损位保持不变\n\n当价格达到止损位时，自动平仓\n\n优点: 保护利润同时允许趋势继续发展","type":"content","url":"/terms#id-trailing-stop","position":69},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"ROI (投资回报率/Return on Investment)","lvl2":"💰 风险管理术语"},"type":"lvl3","url":"/terms#roi-return-on-investment","position":70},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"ROI (投资回报率/Return on Investment)","lvl2":"💰 风险管理术语"},"content":"定义: 在 Freqtrade 中指代止盈设置，当盈利达到目标时自动出场。\n\n配置示例:minimal_roi = {\n    \"0\": 0.20,      # 任何时候达到20%就退出\n    \"20\": 0.10,     # 20分钟后达到10%退出\n    \"60\": 0.05,     # 60分钟后达到5%退出\n    \"120\": 0        # 120分钟后保本退出\n}","type":"content","url":"/terms#roi-return-on-investment","position":71},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"头寸大小 (Position Size)","lvl2":"💰 风险管理术语"},"type":"lvl3","url":"/terms#id-position-size","position":72},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"头寸大小 (Position Size)","lvl2":"💰 风险管理术语"},"content":"定义: 单笔交易投入的资金量。\n\n相关参数:\n\nstake_amount: 每笔交易的投入金额\n\nmax_open_trades: 最大同时持仓数\n\nposition_stacking: 是否允许同一交易对多次开仓","type":"content","url":"/terms#id-position-size","position":73},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"风险收益比 (Risk-Reward Ratio)","lvl2":"💰 风险管理术语"},"type":"lvl3","url":"/terms#id-risk-reward-ratio","position":74},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"风险收益比 (Risk-Reward Ratio)","lvl2":"💰 风险管理术语"},"content":"定义: 预期盈利与可能亏损的比率。\n\n计算: 预期盈利 / 最大亏损\n示例: 如果止损 5%，止盈 15%，则风险收益比为 3:1","type":"content","url":"/terms#id-risk-reward-ratio","position":75},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 回测相关术语"},"type":"lvl2","url":"/terms#id-8","position":76},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 回测相关术语"},"content":"","type":"content","url":"/terms#id-8","position":77},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"回测 (Backtesting)","lvl2":"📊 回测相关术语"},"type":"lvl3","url":"/terms#id-backtesting","position":78},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"回测 (Backtesting)","lvl2":"📊 回测相关术语"},"content":"定义: 使用历史数据测试交易策略性能的过程。\n\n关键要素:\n\n历史数据: OHLCV K线数据\n\n策略规则: 进出场条件、风险管理\n\n交易成本: 手续费、滑点等\n\n起始资金: 模拟交易的初始金额\n\n局限性:\n\n基于历史数据，无法保证未来表现\n\n可能存在过拟合问题\n\n无法完全模拟真实交易环境","type":"content","url":"/terms#id-backtesting","position":79},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"前向测试 (Forward Testing)","lvl2":"📊 回测相关术语"},"type":"lvl3","url":"/terms#id-forward-testing","position":80},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"前向测试 (Forward Testing)","lvl2":"📊 回测相关术语"},"content":"定义: 使用实时数据但不在交易所实际下单的策略测试方法，也称为模拟盘。\n\n详细解释:\n\n与回测使用历史数据不同，前向测试使用实时市场数据\n\n在 Freqtrade 内部跟踪信号和交易，但不会产生真实的资金损益\n\n结果比回测更可靠，但耗时更长\n\n通过在配置文件中设置 dry_run: true 启用\n\n对比分析:\n\n回测: 快速但可能不准确，存在过拟合风险\n\n前向测试: 慢速但更真实，实时验证策略\n\n实盘: 真实但有资金风险，最终验证\n\n使用场景:\n\n策略验证\n\n实盘前测试\n\n策略参数微调\n\n新策略的安全测试\n\n配置示例:{\n  \"dry_run\": true,  // 启用模拟盘模式\n  \"dry_run_wallet\": 1000  // 模拟资金数量\n}","type":"content","url":"/terms#id-forward-testing","position":81},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"type":"lvl3","url":"/terms#id-9","position":82},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"content":"","type":"content","url":"/terms#id-9","position":83},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"总收益 (Total Return)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"type":"lvl4","url":"/terms#id-total-return","position":84},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"总收益 (Total Return)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"content":"定义: 策略期间的总盈亏百分比。\n\n计算: (期末资金 - 期初资金) / 期初资金 × 100%","type":"content","url":"/terms#id-total-return","position":85},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"年化收益率 (Annualized Return)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"type":"lvl4","url":"/terms#id-annualized-return","position":86},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"年化收益率 (Annualized Return)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"content":"定义: 将收益率标准化为年度收益率。\n\n计算: (1 + 总收益率)^(365/天数) - 1","type":"content","url":"/terms#id-annualized-return","position":87},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"最大回撤 (Maximum Drawdown)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"type":"lvl4","url":"/terms#id-maximum-drawdown","position":88},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"最大回撤 (Maximum Drawdown)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"content":"定义: 从峰值到谷值的最大亏损百分比。\n\n意义: 衡量策略的风险水平，数值越小越好\n计算: (峰值 - 谷值) / 峰值 × 100%","type":"content","url":"/terms#id-maximum-drawdown","position":89},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"夏普比率 (Sharpe Ratio)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"type":"lvl4","url":"/terms#id-sharpe-ratio","position":90},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"夏普比率 (Sharpe Ratio)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"content":"定义: 衡量单位风险下超额收益的指标。\n\n计算: (策略收益率 - 无风险收益率) / 策略收益率标准差\n解释:\n\n1: 良好\n\n2: 非常好\n\n3: 优秀","type":"content","url":"/terms#id-sharpe-ratio","position":91},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"索提诺比率 (Sortino Ratio)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"type":"lvl4","url":"/terms#id-sortino-ratio","position":92},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"索提诺比率 (Sortino Ratio)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"content":"定义: 类似夏普比率，但只考虑下行波动性。\n\n优点: 更关注下行风险，对交易者更有意义","type":"content","url":"/terms#id-sortino-ratio","position":93},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"胜率 (Win Rate)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"type":"lvl4","url":"/terms#id-win-rate","position":94},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"胜率 (Win Rate)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"content":"定义: 盈利交易占总交易数的百分比。\n\n计算: 盈利交易数 / 总交易数 × 100%","type":"content","url":"/terms#id-win-rate","position":95},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"盈亏比 (Profit Factor)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"type":"lvl4","url":"/terms#id-profit-factor","position":96},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl4":"盈亏比 (Profit Factor)","lvl3":"性能指标","lvl2":"📊 回测相关术语"},"content":"定义: 总盈利与总亏损的比率。\n\n计算: 所有盈利交易的总和 / 所有亏损交易的总和的绝对值\n解释:\n\n1: 策略盈利\n\n2: 良好策略\n\n3: 优秀策略","type":"content","url":"/terms#id-profit-factor","position":97},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔧 超参数优化术语"},"type":"lvl2","url":"/terms#id-10","position":98},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔧 超参数优化术语"},"content":"","type":"content","url":"/terms#id-10","position":99},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Hyperopt","lvl2":"🔧 超参数优化术语"},"type":"lvl3","url":"/terms#hyperopt","position":100},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Hyperopt","lvl2":"🔧 超参数优化术语"},"content":"定义: Freqtrade 中用于自动化参数优化的模块。\n\n功能:\n\n自动寻找策略的最佳参数组合\n\n使用 Optuna 库进行优化\n\n支持多种优化算法","type":"content","url":"/terms#hyperopt","position":101},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"超参数 (Hyperparameter)","lvl2":"🔧 超参数优化术语"},"type":"lvl3","url":"/terms#id-hyperparameter","position":102},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"超参数 (Hyperparameter)","lvl2":"🔧 超参数优化术语"},"content":"定义: 在策略中可调整的参数，如指标周期、阈值等。\n\n常见超参数:\n\n技术指标的周期参数\n\n进出场条件的阈值\n\n止损和止盈水平","type":"content","url":"/terms#id-hyperparameter","position":103},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"损失函数 (Loss Function)","lvl2":"🔧 超参数优化术语"},"type":"lvl3","url":"/terms#id-loss-function","position":104},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"损失函数 (Loss Function)","lvl2":"🔧 超参数优化术语"},"content":"定义: 优化过程中需要最小化的目标函数。\n\n常用损失函数:\n\nSharpeHyperOptLoss: 最大化夏普比率\n\nCalmarHyperOptLoss: 最大化卡尔玛比率\n\nSortinoHyperOptLoss: 最大化索提诺比率\n\nMaxDrawDownHyperOptLoss: 最小化最大回撤","type":"content","url":"/terms#id-loss-function","position":105},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"搜索空间 (Search Space)","lvl2":"🔧 超参数优化术语"},"type":"lvl3","url":"/terms#id-search-space","position":106},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"搜索空间 (Search Space)","lvl2":"🔧 超参数优化术语"},"content":"定义: 超参数可能取值的范围。\n\n定义方式:from freqtrade.optimize.space import Integer, Real, Categorical\n\nbuy_rsi = IntParameter(20, 40, default=30)\nsell_rsi = IntParameter(60, 80, default=70)","type":"content","url":"/terms#id-search-space","position":107},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Optuna","lvl2":"🔧 超参数优化术语"},"type":"lvl3","url":"/terms#optuna","position":108},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Optuna","lvl2":"🔧 超参数优化术语"},"content":"定义: Hyperopt 使用的优化框架。\n\n特点:\n\n基于贝叶斯优化\n\n支持多种采样器算法\n\n自动剪枝无效试验","type":"content","url":"/terms#optuna","position":109},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"试验 (Trial)","lvl2":"🔧 超参数优化术语"},"type":"lvl3","url":"/terms#id-trial","position":110},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"试验 (Trial)","lvl2":"🔧 超参数优化术语"},"content":"定义: 超参数优化中的单次参数组合测试。\n\n包含信息:\n\n参数值组合\n\n损失函数值\n\n执行时间\n\n状态（成功/失败/剪枝）","type":"content","url":"/terms#id-trial","position":111},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🤖 机器人运行术语"},"type":"lvl2","url":"/terms#id-11","position":112},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🤖 机器人运行术语"},"content":"","type":"content","url":"/terms#id-11","position":113},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"干跑模式 (Dry Run)","lvl2":"🤖 机器人运行术语"},"type":"lvl3","url":"/terms#id-dry-run","position":114},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"干跑模式 (Dry Run)","lvl2":"🤖 机器人运行术语"},"content":"定义: 模拟交易模式，不进行真实资金交易。\n\n特点:\n\n使用虚拟资金进行模拟交易\n\n可验证策略逻辑和配置\n\n无资金风险\n\n配置:{\n    \"dry_run\": true,\n    \"dry_run_wallet\": 1000\n}","type":"content","url":"/terms#id-dry-run","position":115},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"实盘交易 (Live Trading)","lvl2":"🤖 机器人运行术语"},"type":"lvl3","url":"/terms#id-live-trading","position":116},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"实盘交易 (Live Trading)","lvl2":"🤖 机器人运行术语"},"content":"定义: 使用真实资金进行交易。\n\n风险:\n\n资金损失风险\n\n需要充分测试策略\n\n需要实时监控","type":"content","url":"/terms#id-live-trading","position":117},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易日志 (Trade Log)","lvl2":"🤖 机器人运行术语"},"type":"lvl3","url":"/terms#id-trade-log","position":118},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易日志 (Trade Log)","lvl2":"🤖 机器人运行术语"},"content":"定义: 记录所有交易活动的日志文件。\n\n包含信息:\n\n交易时间\n\n交易对\n\n进出场价格\n\n盈亏情况\n\n手续费","type":"content","url":"/terms#id-trade-log","position":119},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl2","url":"/terms#id-freqai","position":120},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🤖 FreqAI 机器学习术语"},"content":"","type":"content","url":"/terms#id-freqai","position":121},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"FreqAI","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#freqai-1","position":122},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"FreqAI","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: Freqtrade 的机器学习模块，提供自动化的预测性建模功能。\n\n核心功能:\n\n自适应再训练\n\n快速特征工程\n\n智能异常值剔除\n\n自动数据归一化\n\n降维处理","type":"content","url":"/terms#freqai-1","position":123},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"特征 (Features)","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#id-features","position":124},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"特征 (Features)","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: 基于历史数据的参数，机器学习模型的输入变量。\n\n特点:\n\n每根K线的所有特征存储为一个向量\n\n可以是技术指标、价格数据或自定义计算\n\nFreqAI 支持创建1万+特征","type":"content","url":"/terms#id-features","position":125},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"标签 (Labels)","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#id-labels","position":126},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"标签 (Labels)","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: 机器学习模型的目标输出值，训练的预测目标。\n\n特征:\n\n通常\"看向未来\"的值\n\n由用户在策略中定义\n\n每个特征向量都关联一个标签","type":"content","url":"/terms#id-labels","position":127},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"训练 (Training)","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#id-training","position":128},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"训练 (Training)","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: 让机器学习模型学习特征与标签之间关系的过程。","type":"content","url":"/terms#id-training","position":129},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"推理 (Inference)","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#id-inference","position":130},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"推理 (Inference)","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: 使用训练好的模型对新数据进行预测的过程。","type":"content","url":"/terms#id-inference","position":131},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"特征工程 (Feature Engineering)","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#id-feature-engineering","position":132},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"特征工程 (Feature Engineering)","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: 创建和选择用于机器学习的输入特征的过程。\n\n技术:\n\n技术指标计算\n\n数据变换\n\n特征组合\n\n时间窗口特征","type":"content","url":"/terms#id-feature-engineering","position":133},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"异常值检测 (Outlier Detection)","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#id-outlier-detection","position":134},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"异常值检测 (Outlier Detection)","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: 识别和处理训练数据中异常值的技术。\n\n方法:\n\n统计方法\n\n基于距离的方法\n\n基于密度的方法","type":"content","url":"/terms#id-outlier-detection","position":135},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"数据归一化 (Data Normalization)","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#id-data-normalization","position":136},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"数据归一化 (Data Normalization)","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: 将不同量级的数据缩放到相似范围的预处理技术。\n\n目的:\n\n提高模型训练效率\n\n避免某些特征主导模型\n\n加快收敛速度","type":"content","url":"/terms#id-data-normalization","position":137},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"降维 (Dimensionality Reduction)","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#id-dimensionality-reduction","position":138},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"降维 (Dimensionality Reduction)","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: 减少数据特征数量的技术，常用主成分分析(PCA)。\n\n优点:\n\n减少计算复杂度\n\n消除噪声\n\n避免维度诅咒","type":"content","url":"/terms#id-dimensionality-reduction","position":139},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"回测模式 (Backtesting Mode)","lvl2":"🤖 FreqAI 机器学习术语"},"type":"lvl3","url":"/terms#id-backtesting-mode","position":140},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"回测模式 (Backtesting Mode)","lvl2":"🤖 FreqAI 机器学习术语"},"content":"定义: 在历史数据上模拟FreqAI自适应训练的过程。\n\n特点:\n\n模拟定期再训练\n\n验证模型在历史数据上的表现\n\n避免前瞻偏误","type":"content","url":"/terms#id-backtesting-mode","position":141},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔧 交易对列表管理术语"},"type":"lvl2","url":"/terms#id-12","position":142},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔧 交易对列表管理术语"},"content":"","type":"content","url":"/terms#id-12","position":143},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对列表 (Pair List)","lvl2":"🔧 交易对列表管理术语"},"type":"lvl3","url":"/terms#id-pair-list","position":144},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对列表 (Pair List)","lvl2":"🔧 交易对列表管理术语"},"content":"定义: 定义机器人应该交易的交易对集合的机制。\n\n类型:\n\n静态交易对列表\n\n动态交易对列表\n\n过滤器处理的列表","type":"content","url":"/terms#id-pair-list","position":145},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"StaticPairList","lvl2":"🔧 交易对列表管理术语"},"type":"lvl3","url":"/terms#staticpairlist","position":146},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"StaticPairList","lvl2":"🔧 交易对列表管理术语"},"content":"定义: 使用配置文件中静态定义的交易对白名单。\n\n特点:\n\n固定的交易对列表\n\n支持正则表达式\n\n最基础的交易对列表方式","type":"content","url":"/terms#staticpairlist","position":147},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"VolumePairList","lvl2":"🔧 交易对列表管理术语"},"type":"lvl3","url":"/terms#volumepairlist","position":148},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"VolumePairList","lvl2":"🔧 交易对列表管理术语"},"content":"定义: 基于成交量排序和过滤交易对的动态列表。\n\n参数:\n\nnumber_assets: 选择的交易对数量\n\nsort_key: 排序依据（如 quoteVolume）\n\nrefresh_period: 刷新周期","type":"content","url":"/terms#volumepairlist","position":149},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"PercentChangePairList","lvl2":"🔧 交易对列表管理术语"},"type":"lvl3","url":"/terms#percentchangepairlist","position":150},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"PercentChangePairList","lvl2":"🔧 交易对列表管理术语"},"content":"定义: 基于价格变化百分比选择交易对的列表。","type":"content","url":"/terms#percentchangepairlist","position":151},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对黑名单 (Pair Blacklist)","lvl2":"🔧 交易对列表管理术语"},"type":"lvl3","url":"/terms#id-pair-blacklist","position":152},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对黑名单 (Pair Blacklist)","lvl2":"🔧 交易对列表管理术语"},"content":"定义: 禁止交易的交易对列表。\n\n支持格式:\n\n具体交易对名称\n\n正则表达式模式\n\n通配符匹配","type":"content","url":"/terms#id-pair-blacklist","position":153},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对白名单 (Pair Whitelist)","lvl2":"🔧 交易对列表管理术语"},"type":"lvl3","url":"/terms#id-pair-whitelist","position":154},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对白名单 (Pair Whitelist)","lvl2":"🔧 交易对列表管理术语"},"content":"定义: 允许交易的交易对列表。","type":"content","url":"/terms#id-pair-whitelist","position":155},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对过滤器 (Pair Filters)","lvl2":"🔧 交易对列表管理术语"},"type":"lvl3","url":"/terms#id-pair-filters","position":156},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易对过滤器 (Pair Filters)","lvl2":"🔧 交易对列表管理术语"},"content":"定义: 对交易对列表进行进一步筛选的工具。\n\n常用过滤器:\n\nAgeFilter: 基于上市时间过滤\n\nPriceFilter: 基于价格范围过滤\n\nSpreadFilter: 基于点差过滤\n\nVolatilityFilter: 基于波动性过滤\n\nPrecisionFilter: 基于精度过滤","type":"content","url":"/terms#id-pair-filters","position":157},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🛡️ 保护机制术语"},"type":"lvl2","url":"/terms#id-13","position":158},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🛡️ 保护机制术语"},"content":"","type":"content","url":"/terms#id-13","position":159},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"保护机制 (Protections)","lvl2":"🛡️ 保护机制术语"},"type":"lvl3","url":"/terms#id-protections","position":160},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"保护机制 (Protections)","lvl2":"🛡️ 保护机制术语"},"content":"定义: 通过暂时停止交易来保护策略免受不利市场条件影响的机制。","type":"content","url":"/terms#id-protections","position":161},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"StoplossGuard","lvl2":"🛡️ 保护机制术语"},"type":"lvl3","url":"/terms#stoplossguard","position":162},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"StoplossGuard","lvl2":"🛡️ 保护机制术语"},"content":"定义: 在一定时间内发生多次止损后暂停交易的保护机制。\n\n参数:\n\ntrade_limit: 触发保护的止损次数\n\nlookback_period: 查看的时间窗口\n\nstop_duration: 停止交易的时长","type":"content","url":"/terms#stoplossguard","position":163},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"MaxDrawdown","lvl2":"🛡️ 保护机制术语"},"type":"lvl3","url":"/terms#maxdrawdown","position":164},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"MaxDrawdown","lvl2":"🛡️ 保护机制术语"},"content":"定义: 当达到最大回撤阈值时停止交易的保护机制。","type":"content","url":"/terms#maxdrawdown","position":165},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"LowProfitPairs","lvl2":"🛡️ 保护机制术语"},"type":"lvl3","url":"/terms#lowprofitpairs","position":166},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"LowProfitPairs","lvl2":"🛡️ 保护机制术语"},"content":"定义: 锁定低利润交易对的保护机制。","type":"content","url":"/terms#lowprofitpairs","position":167},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"CooldownPeriod","lvl2":"🛡️ 保护机制术语"},"type":"lvl3","url":"/terms#cooldownperiod","position":168},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"CooldownPeriod","lvl2":"🛡️ 保护机制术语"},"content":"定义: 在卖出后设置冷却期，防止立即重新买入的保护机制。","type":"content","url":"/terms#cooldownperiod","position":169},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"锁定 (Lock)","lvl2":"🛡️ 保护机制术语"},"type":"lvl3","url":"/terms#id-lock","position":170},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"锁定 (Lock)","lvl2":"🛡️ 保护机制术语"},"content":"定义: 保护机制激活时对特定交易对或全部交易对的交易限制。\n\n类型:\n\n全局锁定：影响所有交易对\n\n单对锁定：只影响特定交易对","type":"content","url":"/terms#id-lock","position":171},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📱 通知和控制术语"},"type":"lvl2","url":"/terms#id-14","position":172},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📱 通知和控制术语"},"content":"","type":"content","url":"/terms#id-14","position":173},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Telegram 机器人","lvl2":"📱 通知和控制术语"},"type":"lvl3","url":"/terms#telegram","position":174},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Telegram 机器人","lvl2":"📱 通知和控制术语"},"content":"定义: 通过 Telegram 消息平台控制和监控 Freqtrade 的功能。\n\n主要功能:\n\n接收交易通知\n\n查看账户状态\n\n手动控制交易\n\n查看性能统计\n\n常用命令:\n\n/status: 查看机器人状态\n\n/profit: 查看盈亏情况\n\n/balance: 查看账户余额\n\n/forcelong: 强制做多\n\n/forceshort: 强制做空","type":"content","url":"/terms#telegram","position":175},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Webhook","lvl2":"📱 通知和控制术语"},"type":"lvl3","url":"/terms#webhook","position":176},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"Webhook","lvl2":"📱 通知和控制术语"},"content":"定义: HTTP回调机制，用于向外部服务发送交易事件通知。\n\n应用场景:\n\n发送交易信号到其他系统\n\n与第三方监控服务集成\n\n自定义通知系统\n\n事件类型:\n\n进场事件 (entry)\n\n出场事件 (exit)\n\n成交事件 (fill)\n\n取消事件 (cancel)","type":"content","url":"/terms#webhook","position":177},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"FreqUI / WebUI","lvl2":"📱 通知和控制术语"},"type":"lvl3","url":"/terms#frequi-webui","position":178},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"FreqUI / WebUI","lvl2":"📱 通知和控制术语"},"content":"定义: Freqtrade 的网页管理界面。\n\n功能:\n\n图表展示\n\n交易历史查看\n\n实时监控\n\n配置管理\n\n策略性能分析","type":"content","url":"/terms#frequi-webui","position":179},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 数据和存储术语"},"type":"lvl2","url":"/terms#id-15","position":180},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 数据和存储术语"},"content":"","type":"content","url":"/terms#id-15","position":181},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"数据提供者 (Data Provider)","lvl2":"📊 数据和存储术语"},"type":"lvl3","url":"/terms#id-data-provider","position":182},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"数据提供者 (Data Provider)","lvl2":"📊 数据和存储术语"},"content":"定义: 为策略提供市场数据的模块。\n\n类型:\n\n历史数据: 用于回测的过去数据\n\n实时数据: 用于实盘交易的当前数据\n\n外部数据: 来自第三方API的补充数据","type":"content","url":"/terms#id-data-provider","position":183},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"数据帧 (DataFrame)","lvl2":"📊 数据和存储术语"},"type":"lvl3","url":"/terms#id-dataframe","position":184},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"数据帧 (DataFrame)","lvl2":"📊 数据和存储术语"},"content":"定义: Pandas 数据结构，用于存储和处理 OHLCV 数据。\n\n在策略中的使用:def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    dataframe['sma_20'] = ta.SMA(dataframe, timeperiod=20)\n    return dataframe","type":"content","url":"/terms#id-dataframe","position":185},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"主数据帧 (Main Dataframe)","lvl2":"📊 数据和存储术语"},"type":"lvl3","url":"/terms#id-main-dataframe","position":186},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"主数据帧 (Main Dataframe)","lvl2":"📊 数据和存储术语"},"content":"定义: Freqtrade 策略中使用的核心数据结构，存储交易对的K线数据和技术指标。\n\n详细解释:\n\n每个交易对都有独立的数据帧\n\n以时间为索引（如 2024-06-31 12:00）\n\n包含 OHLCV 数据：开盘价、最高价、最低价、收盘价、成交量\n\n通过 populate_indicators 函数添加技术指标列\n\n是所有信号生成和决策的数据基础\n\n基本结构:# 基础列\ncolumns = ['date', 'open', 'high', 'low', 'close', 'volume']\n\n# 策略添加的指标列\ndataframe['rsi'] = ta.RSI(dataframe)\ndataframe['sma_20'] = ta.SMA(dataframe, timeperiod=20)\ndataframe['bollinger_upper'] = bollinger['upper']\n\n核心特点:\n\n时间序列索引\n\n行代表时间点，列代表数据字段\n\n支持向量化计算，性能高效\n\n与 Pandas 生态系统完全兼容\n\n相关概念: K线数据、技术指标、信号生成、时间序列","type":"content","url":"/terms#id-main-dataframe","position":187},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"缓存 (Cache)","lvl2":"📊 数据和存储术语"},"type":"lvl3","url":"/terms#id-cache","position":188},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"缓存 (Cache)","lvl2":"📊 数据和存储术语"},"content":"定义: 临时存储数据以提高性能的机制。\n\n应用:\n\n缓存计算结果\n\n缓存网络请求\n\n缓存指标计算","type":"content","url":"/terms#id-cache","position":189},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 数据下载和管理术语"},"type":"lvl2","url":"/terms#id-16","position":190},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 数据下载和管理术语"},"content":"","type":"content","url":"/terms#id-16","position":191},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"数据下载 (Data Download)","lvl2":"📊 数据下载和管理术语"},"type":"lvl3","url":"/terms#id-data-download","position":192},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"数据下载 (Data Download)","lvl2":"📊 数据下载和管理术语"},"content":"定义: 获取历史K线数据用于回测和分析的过程。\n\n命令: freqtrade download-data\n\n常用参数:\n\n--days: 下载天数\n\n--timerange: 时间范围\n\n--timeframes: 时间周期\n\n--pairs: 交易对列表","type":"content","url":"/terms#id-data-download","position":193},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"增量下载 (Incremental Download)","lvl2":"📊 数据下载和管理术语"},"type":"lvl3","url":"/terms#id-incremental-download","position":194},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"增量下载 (Incremental Download)","lvl2":"📊 数据下载和管理术语"},"content":"定义: 只下载缺失数据，避免重复下载已有数据。\n\n优点:\n\n节省时间和带宽\n\n自动计算缺失区间\n\n保留原有数据","type":"content","url":"/terms#id-incremental-download","position":195},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"时间范围 (Timerange)","lvl2":"📊 数据下载和管理术语"},"type":"lvl3","url":"/terms#id-timerange","position":196},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"时间范围 (Timerange)","lvl2":"📊 数据下载和管理术语"},"content":"定义: 指定数据下载或回测的时间区间。\n\n格式:\n\n20200101-20201231: 绝对时间范围\n\n20200101-: 从指定日期到现在\n\n-20201231: 从最早到指定日期","type":"content","url":"/terms#id-timerange","position":197},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"⚙️ 配置管理术语"},"type":"lvl2","url":"/terms#id-17","position":198},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"⚙️ 配置管理术语"},"content":"","type":"content","url":"/terms#id-17","position":199},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"配置文件 (Configuration File)","lvl2":"⚙️ 配置管理术语"},"type":"lvl3","url":"/terms#id-configuration-file","position":200},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"配置文件 (Configuration File)","lvl2":"⚙️ 配置管理术语"},"content":"定义: 包含Freqtrade所有设置参数的JSON文件。\n\n默认文件: config.json\n生成命令: freqtrade new-config","type":"content","url":"/terms#id-configuration-file","position":201},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"环境变量 (Environment Variables)","lvl2":"⚙️ 配置管理术语"},"type":"lvl3","url":"/terms#id-environment-variables","position":202},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"环境变量 (Environment Variables)","lvl2":"⚙️ 配置管理术语"},"content":"定义: 通过系统环境变量设置配置参数的方式。\n\n格式: FREQTRADE__{section}__{key}\n示例: FREQTRADE__EXCHANGE__KEY=your_key\n\n优先级:\n\n命令行参数（最高）\n\n环境变量\n\n配置文件（最低）","type":"content","url":"/terms#id-environment-variables","position":203},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"用户目录 (User Directory)","lvl2":"⚙️ 配置管理术语"},"type":"lvl3","url":"/terms#id-user-directory","position":204},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"用户目录 (User Directory)","lvl2":"⚙️ 配置管理术语"},"content":"定义: 存放用户数据的目录。\n\n默认位置: user_data/\n包含内容:\n\n策略文件 (strategies/)\n\n历史数据 (data/)\n\n日志文件 (logs/)\n\n回测结果 (backtest_results/)","type":"content","url":"/terms#id-user-directory","position":205},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"启动周期 (Startup Candles)","lvl2":"⚙️ 配置管理术语"},"type":"lvl3","url":"/terms#id-startup-candles","position":206},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"启动周期 (Startup Candles)","lvl2":"⚙️ 配置管理术语"},"content":"定义: 策略开始交易前需要的历史K线数量。\n\n用途:\n\n预热技术指标\n\n计算初始状态\n\n避免数据不足","type":"content","url":"/terms#id-startup-candles","position":207},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易模式 (Trading Mode)","lvl2":"⚙️ 配置管理术语"},"type":"lvl3","url":"/terms#id-trading-mode","position":208},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易模式 (Trading Mode)","lvl2":"⚙️ 配置管理术语"},"content":"定义: 机器人的运行模式设置。\n\n模式类型:\n\nspot: 现货交易（默认）\n\nmargin: 保证金交易\n\nfutures: 期货/合约交易","type":"content","url":"/terms#id-trading-mode","position":209},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"保证金模式 (Margin Mode)","lvl2":"⚙️ 配置管理术语"},"type":"lvl3","url":"/terms#id-margin-mode","position":210},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"保证金模式 (Margin Mode)","lvl2":"⚙️ 配置管理术语"},"content":"定义: 杠杆交易中的保证金使用方式。\n\n类型:\n\nisolated: 隔离保证金（每个交易对独立）\n\ncross: 交叉保证金（共享保证金池）","type":"content","url":"/terms#id-margin-mode","position":211},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔒 安全和API术语"},"type":"lvl2","url":"/terms#id-api","position":212},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔒 安全和API术语"},"content":"","type":"content","url":"/terms#id-api","position":213},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"API密钥 (API Key)","lvl2":"🔒 安全和API术语"},"type":"lvl3","url":"/terms#api-api-key","position":214},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"API密钥 (API Key)","lvl2":"🔒 安全和API术语"},"content":"定义: 用于访问交易所API的认证凭据。\n\n组成:\n\nAPI Key: 公开标识符\n\nSecret Key: 私密密钥\n\nPassphrase: 额外的安全短语（某些交易所需要）\n\n权限类型:\n\n读取权限: 查看账户信息、交易历史\n\n交易权限: 下单、撤单\n\n提取权限: 资金提取（一般不授予）","type":"content","url":"/terms#api-api-key","position":215},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"沙盒模式 (Sandbox Mode)","lvl2":"🔒 安全和API术语"},"type":"lvl3","url":"/terms#id-sandbox-mode","position":216},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"沙盒模式 (Sandbox Mode)","lvl2":"🔒 安全和API术语"},"content":"定义: 交易所提供的测试环境，使用虚拟资金。\n\n用途:\n\nAPI集成测试\n\n策略验证\n\n系统稳定性测试","type":"content","url":"/terms#id-sandbox-mode","position":217},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"速率限制 (Rate Limiting)","lvl2":"🔒 安全和API术语"},"type":"lvl3","url":"/terms#id-rate-limiting","position":218},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"速率限制 (Rate Limiting)","lvl2":"🔒 安全和API术语"},"content":"定义: 交易所对API调用频率的限制。\n\n配置参数:\n\nenableRateLimit: 是否启用速率限制\n\nrateLimit: 调用间隔（毫秒）\n\nCCXT库设置:\"ccxt_config\": {\"enableRateLimit\": true},\n\"ccxt_async_config\": {\"rateLimit\": 3100}","type":"content","url":"/terms#id-rate-limiting","position":219},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"JWT密钥 (JWT Secret Key)","lvl2":"🔒 安全和API术语"},"type":"lvl3","url":"/terms#jwt-jwt-secret-key","position":220},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"JWT密钥 (JWT Secret Key)","lvl2":"🔒 安全和API术语"},"content":"定义: 用于REST API身份验证的密钥。\n\n用途:\n\nAPI访问认证\n\n会话管理\n\n安全通信","type":"content","url":"/terms#jwt-jwt-secret-key","position":221},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔧 技术术语"},"type":"lvl2","url":"/terms#id-18","position":222},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔧 技术术语"},"content":"","type":"content","url":"/terms#id-18","position":223},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"量化 (Quantification)","lvl2":"🔧 技术术语"},"type":"lvl3","url":"/terms#id-quantification","position":224},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"量化 (Quantification)","lvl2":"🔧 技术术语"},"content":"定义: 将人的交易直觉和经验转化为可执行的计算机程序和数学模型的过程。\n\n详细解释:\n\n核心是将主观判断转为客观规则\n\n需要明确定义进场、出场、风险控制等条件\n\n要求逻辑清晰、参数明确、可重复执行\n\n是策略开发中最具挑战性的环节之一\n\n量化流程:\n\n直觉识别: 发现市场规律或交易机会\n\n规则定义: 将直觉转为具体的判断条件\n\n参数设定: 确定阈值、时间框架等参数\n\n逻辑编码: 用代码实现交易逻辑\n\n测试验证: 通过回测和前向测试验证\n\n挑战:\n\n市场直觉难以用数学表达\n\n需要大量测试和优化\n\n要平衡复杂性和实用性\n\n避免过度拟合历史数据\n\n示例对比:\n\n直觉: “RSI超买时应该卖出”\n\n量化: “dataframe.loc[dataframe['rsi'] > 70, 'exit_long'] = 1”\n\n使用场景: 策略开发、交易系统设计、风险管理、算法交易","type":"content","url":"/terms#id-quantification","position":225},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"滑点 (Slippage)","lvl2":"🔧 技术术语"},"type":"lvl3","url":"/terms#id-slippage","position":226},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"滑点 (Slippage)","lvl2":"🔧 技术术语"},"content":"定义: 实际成交价格与预期价格的差异。\n\n原因:\n\n市场流动性不足\n\n订单执行延迟\n\n市场快速波动\n\n影响: 增加交易成本，影响策略收益","type":"content","url":"/terms#id-slippage","position":227},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"点差 (Spread)","lvl2":"🔧 技术术语"},"type":"lvl3","url":"/terms#id-spread","position":228},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"点差 (Spread)","lvl2":"🔧 技术术语"},"content":"定义: 买一价和卖一价之间的差价。\n\n计算: 卖一价 - 买一价\n影响: 交易成本，特别是高频交易","type":"content","url":"/terms#id-spread","position":229},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"订单簿 (Order Book)","lvl2":"🔧 技术术语"},"type":"lvl3","url":"/terms#id-order-book","position":230},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"订单簿 (Order Book)","lvl2":"🔧 技术术语"},"content":"定义: 显示当前所有买卖订单的实时列表。\n\n组成:\n\n买单 (Bids): 买方出价列表\n\n卖单 (Asks): 卖方报价列表\n\n深度: 各价位的订单数量","type":"content","url":"/terms#id-order-book","position":231},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"流动性 (Liquidity)","lvl2":"🔧 技术术语"},"type":"lvl3","url":"/terms#id-liquidity","position":232},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"流动性 (Liquidity)","lvl2":"🔧 技术术语"},"content":"定义: 资产转换为现金的容易程度。\n\n高流动性特征:\n\n小点差\n\n大交易量\n\n快速成交","type":"content","url":"/terms#id-liquidity","position":233},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"深度 (Market Depth)","lvl2":"🔧 技术术语"},"type":"lvl3","url":"/terms#id-market-depth","position":234},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"深度 (Market Depth)","lvl2":"🔧 技术术语"},"content":"定义: 各价位上的订单数量分布。\n\n意义:\n\n评估市场流动性\n\n预测价格冲击\n\n选择合适的订单类型","type":"content","url":"/terms#id-market-depth","position":235},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📈 市场术语"},"type":"lvl2","url":"/terms#id-19","position":236},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📈 市场术语"},"content":"","type":"content","url":"/terms#id-19","position":237},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"多头 (Long/Bull)","lvl2":"📈 市场术语"},"type":"lvl3","url":"/terms#id-long-bull","position":238},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"多头 (Long/Bull)","lvl2":"📈 市场术语"},"content":"定义: 看涨并持有资产的投资者或头寸。\n\n策略: 低买高卖\n市场观点: 预期价格上涨","type":"content","url":"/terms#id-long-bull","position":239},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"空头 (Short/Bear)","lvl2":"📈 市场术语"},"type":"lvl3","url":"/terms#id-short-bear","position":240},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"空头 (Short/Bear)","lvl2":"📈 市场术语"},"content":"定义: 看跌并卖出资产的投资者或头寸。\n\n策略: 高卖低买\n实现方式: 借入资产卖出，后续买回归还","type":"content","url":"/terms#id-short-bear","position":241},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"市价单 (Market Order)","lvl2":"📈 市场术语"},"type":"lvl3","url":"/terms#id-market-order","position":242},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"市价单 (Market Order)","lvl2":"📈 市场术语"},"content":"定义: 以当前市价立即成交的订单。\n\n特点:\n\n保证成交\n\n可能有滑点\n\n适合急需成交的情况","type":"content","url":"/terms#id-market-order","position":243},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"限价单 (Limit Order)","lvl2":"📈 市场术语"},"type":"lvl3","url":"/terms#id-limit-order","position":244},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"限价单 (Limit Order)","lvl2":"📈 市场术语"},"content":"定义: 指定价格或更好价格成交的订单。\n\n特点:\n\n控制成交价格\n\n可能不成交\n\n适合非急需成交的情况","type":"content","url":"/terms#id-limit-order","position":245},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"支撑位 (Support Level)","lvl2":"📈 市场术语"},"type":"lvl3","url":"/terms#id-support-level","position":246},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"支撑位 (Support Level)","lvl2":"📈 市场术语"},"content":"定义: 价格下跌过程中遇到买盘支撑的价格水平。\n\n特征:\n\n历史上多次获得支撑\n\n心理价位（如整数位）\n\n技术指标水平","type":"content","url":"/terms#id-support-level","position":247},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"阻力位 (Resistance Level)","lvl2":"📈 市场术语"},"type":"lvl3","url":"/terms#id-resistance-level","position":248},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"阻力位 (Resistance Level)","lvl2":"📈 市场术语"},"content":"定义: 价格上涨过程中遇到卖盘阻力的价格水平。\n\n特征:\n\n历史上多次受阻\n\n前期高点\n\n技术指标水平","type":"content","url":"/terms#id-resistance-level","position":249},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"突破 (Breakout)","lvl2":"📈 市场术语"},"type":"lvl3","url":"/terms#id-breakout","position":250},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"突破 (Breakout)","lvl2":"📈 市场术语"},"content":"定义: 价格突破重要支撑或阻力位的现象。\n\n类型:\n\n向上突破: 突破阻力位，看涨信号\n\n向下突破: 突破支撑位，看跌信号","type":"content","url":"/terms#id-breakout","position":251},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"假突破 (False Breakout)","lvl2":"📈 市场术语"},"type":"lvl3","url":"/terms#id-false-breakout","position":252},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"假突破 (False Breakout)","lvl2":"📈 市场术语"},"content":"定义: 价格短暂突破重要水平后迅速回撤的现象。\n\n风险: 可能导致错误的交易决策","type":"content","url":"/terms#id-false-breakout","position":253},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🎯 策略类型术语"},"type":"lvl2","url":"/terms#id-20","position":254},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🎯 策略类型术语"},"content":"","type":"content","url":"/terms#id-20","position":255},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"趋势跟踪 (Trend Following)","lvl2":"🎯 策略类型术语"},"type":"lvl3","url":"/terms#id-trend-following","position":256},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"趋势跟踪 (Trend Following)","lvl2":"🎯 策略类型术语"},"content":"定义: 识别并跟随市场趋势的策略类型。\n\n特点:\n\n追涨杀跌\n\n持仓时间较长\n\n适合趋势明显的市场\n\n常用指标: 移动平均线、MACD、ADX","type":"content","url":"/terms#id-trend-following","position":257},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"均值回归 (Mean Reversion)","lvl2":"🎯 策略类型术语"},"type":"lvl3","url":"/terms#id-mean-reversion","position":258},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"均值回归 (Mean Reversion)","lvl2":"🎯 策略类型术语"},"content":"定义: 基于价格会回归到平均值的假设的策略。\n\n特点:\n\n低买高卖\n\n持仓时间较短\n\n适合震荡市场\n\n常用指标: 布林带、RSI、随机指标","type":"content","url":"/terms#id-mean-reversion","position":259},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"套利 (Arbitrage)","lvl2":"🎯 策略类型术语"},"type":"lvl3","url":"/terms#id-arbitrage","position":260},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"套利 (Arbitrage)","lvl2":"🎯 策略类型术语"},"content":"定义: 利用不同市场或时间的价格差异获利的策略。\n\n类型:\n\n空间套利: 不同交易所间的价格差\n\n时间套利: 同一资产不同合约的价格差\n\n三角套利: 三种资产间的汇率差异","type":"content","url":"/terms#id-arbitrage","position":261},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"网格交易 (Grid Trading)","lvl2":"🎯 策略类型术语"},"type":"lvl3","url":"/terms#id-grid-trading","position":262},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"网格交易 (Grid Trading)","lvl2":"🎯 策略类型术语"},"content":"定义: 在预设价格区间内设置多个买卖订单的策略。\n\n特点:\n\n适合震荡市场\n\n自动化程度高\n\n需要合理设置网格参数","type":"content","url":"/terms#id-grid-trading","position":263},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"高频交易 (High Frequency Trading)","lvl2":"🎯 策略类型术语"},"type":"lvl3","url":"/terms#id-high-frequency-trading","position":264},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"高频交易 (High Frequency Trading)","lvl2":"🎯 策略类型术语"},"content":"定义: 利用极短时间内的价格波动进行大量交易的策略。\n\n特点:\n\n交易频率极高\n\n单笔利润微薄\n\n对技术要求极高","type":"content","url":"/terms#id-high-frequency-trading","position":265},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔄 期货和衍生品术语"},"type":"lvl2","url":"/terms#id-21","position":266},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔄 期货和衍生品术语"},"content":"","type":"content","url":"/terms#id-21","position":267},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"永续合约 (Perpetual Swap/Future)","lvl2":"🔄 期货和衍生品术语"},"type":"lvl3","url":"/terms#id-perpetual-swap-future","position":268},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"永续合约 (Perpetual Swap/Future)","lvl2":"🔄 期货和衍生品术语"},"content":"定义: 没有到期日的期货合约，可以无限期持有。\n\n特点:\n\n无到期日限制\n\n通过资金费率锚定现货价格\n\n支持杠杆交易","type":"content","url":"/terms#id-perpetual-swap-future","position":269},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"资金费率 (Funding Rate)","lvl2":"🔄 期货和衍生品术语"},"type":"lvl3","url":"/terms#id-funding-rate","position":270},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"资金费率 (Funding Rate)","lvl2":"🔄 期货和衍生品术语"},"content":"定义: 永续合约与现货价格之间的价差调节机制。\n\n作用:\n\n维持合约价格接近现货价格\n\n多头和空头之间的资金交换\n\n通常每8小时结算一次","type":"content","url":"/terms#id-funding-rate","position":271},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"合约命名 (Contract Naming)","lvl2":"🔄 期货和衍生品术语"},"type":"lvl3","url":"/terms#id-contract-naming","position":272},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"合约命名 (Contract Naming)","lvl2":"🔄 期货和衍生品术语"},"content":"定义: Freqtrade中期货合约的命名规则。\n\n格式: BASE/QUOTE:SETTLE\n示例: ETH/USDT:USDT\n\nBASE: 基础资产 (ETH)\n\nQUOTE: 计价货币 (USDT)\n\nSETTLE: 结算货币 (USDT)","type":"content","url":"/terms#id-contract-naming","position":273},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"清算 (Liquidation)","lvl2":"🔄 期货和衍生品术语"},"type":"lvl3","url":"/terms#id-liquidation","position":274},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"清算 (Liquidation)","lvl2":"🔄 期货和衍生品术语"},"content":"定义: 当亏损达到保证金阈值时，交易所强制平仓的机制。\n\n触发条件:\n\n保证金率低于维持保证金要求\n\n账户净值不足以支撑现有头寸\n\n后果:\n\n强制平仓\n\n额外的清算费用\n\n可能的穿仓风险","type":"content","url":"/terms#id-liquidation","position":275},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"清算价格 (Liquidation Price)","lvl2":"🔄 期货和衍生品术语"},"type":"lvl3","url":"/terms#id-liquidation-price","position":276},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"清算价格 (Liquidation Price)","lvl2":"🔄 期货和衍生品术语"},"content":"定义: 触发强制清算的价格水平。\n\n计算因素:\n\n开仓价格\n\n杠杆倍数\n\n维持保证金率\n\n未实现盈亏","type":"content","url":"/terms#id-liquidation-price","position":277},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"仓位模式 (Position Mode)","lvl2":"🔄 期货和衍生品术语"},"type":"lvl3","url":"/terms#id-position-mode","position":278},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"仓位模式 (Position Mode)","lvl2":"🔄 期货和衍生品术语"},"content":"定义: 期货交易中的持仓方式。\n\n类型:\n\n单向持仓: 同一合约只能持有一个方向\n\n双向持仓: 同时持有多空两个方向","type":"content","url":"/terms#id-position-mode","position":279},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📋 订单类型术语"},"type":"lvl2","url":"/terms#id-22","position":280},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📋 订单类型术语"},"content":"","type":"content","url":"/terms#id-22","position":281},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"订单类型 (Order Types)","lvl2":"📋 订单类型术语"},"type":"lvl3","url":"/terms#id-order-types","position":282},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"订单类型 (Order Types)","lvl2":"📋 订单类型术语"},"content":"定义: 不同的下单方式和执行条件。","type":"content","url":"/terms#id-order-types","position":283},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"市价单 (Market Order)","lvl2":"📋 订单类型术语"},"type":"lvl3","url":"/terms#id-market-order-1","position":284},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"市价单 (Market Order)","lvl2":"📋 订单类型术语"},"content":"定义: 以当前最优价格立即成交的订单。\n\n特点:\n\n保证成交\n\n可能存在滑点\n\n适合急需成交的情况","type":"content","url":"/terms#id-market-order-1","position":285},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"限价单 (Limit Order)","lvl2":"📋 订单类型术语"},"type":"lvl3","url":"/terms#id-limit-order-1","position":286},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"限价单 (Limit Order)","lvl2":"📋 订单类型术语"},"content":"定义: 指定价格或更优价格才成交的订单。\n\n特点:\n\n控制成交价格\n\n可能不成交\n\n适合非紧急交易","type":"content","url":"/terms#id-limit-order-1","position":287},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"止损单 (Stop Order)","lvl2":"📋 订单类型术语"},"type":"lvl3","url":"/terms#id-stop-order","position":288},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"止损单 (Stop Order)","lvl2":"📋 订单类型术语"},"content":"定义: 价格达到特定水平时触发的订单。\n\n类型:\n\n止损市价单: 触发后变为市价单\n\n止损限价单: 触发后变为限价单","type":"content","url":"/terms#id-stop-order","position":289},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易所止损 (Exchange Stop Loss)","lvl2":"📋 订单类型术语"},"type":"lvl3","url":"/terms#id-exchange-stop-loss","position":290},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"交易所止损 (Exchange Stop Loss)","lvl2":"📋 订单类型术语"},"content":"定义: 在交易所服务器上设置的止损订单。\n\n优点:\n\n不依赖本地网络连接\n\n执行速度更快\n\n减少技术风险\n\n配置: stoploss_on_exchange = True","type":"content","url":"/terms#id-exchange-stop-loss","position":291},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"时间有效期 (Time in Force)","lvl2":"📋 订单类型术语"},"type":"lvl3","url":"/terms#id-time-in-force","position":292},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"时间有效期 (Time in Force)","lvl2":"📋 订单类型术语"},"content":"定义: 订单的有效时间限制。\n\n类型:\n\nGTC (Good Till Canceled): 直到取消\n\nIOC (Immediate or Cancel): 立即成交或取消\n\nFOK (Fill or Kill): 全部成交或全部取消\n\nPO (Post Only): 只做挂单，不吃单","type":"content","url":"/terms#id-time-in-force","position":293},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 高级交易概念"},"type":"lvl2","url":"/terms#id-23","position":294},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📊 高级交易概念"},"content":"","type":"content","url":"/terms#id-23","position":295},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"做市商 (Maker)","lvl2":"📊 高级交易概念"},"type":"lvl3","url":"/terms#id-maker","position":296},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"做市商 (Maker)","lvl2":"📊 高级交易概念"},"content":"定义: 提供流动性的交易者，下单后等待成交。\n\n特点:\n\n增加市场流动性\n\n通常享受更低手续费\n\n挂单等待成交","type":"content","url":"/terms#id-maker","position":297},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"接受者 (Taker)","lvl2":"📊 高级交易概念"},"type":"lvl3","url":"/terms#id-taker","position":298},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"接受者 (Taker)","lvl2":"📊 高级交易概念"},"content":"定义: 消耗流动性的交易者，主动与现有订单成交。\n\n特点:\n\n消耗市场流动性\n\n通常支付更高手续费\n\n主动成交订单","type":"content","url":"/terms#id-taker","position":299},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"冰山订单 (Iceberg Order)","lvl2":"📊 高级交易概念"},"type":"lvl3","url":"/terms#id-iceberg-order","position":300},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"冰山订单 (Iceberg Order)","lvl2":"📊 高级交易概念"},"content":"定义: 将大额订单分割成多个小订单执行的技术。\n\n目的:\n\n隐藏真实订单规模\n\n减少对市场价格的冲击\n\n逐步建仓","type":"content","url":"/terms#id-iceberg-order","position":301},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"时间加权平均价格 (TWAP)","lvl2":"📊 高级交易概念"},"type":"lvl3","url":"/terms#id-twap","position":302},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"时间加权平均价格 (TWAP)","lvl2":"📊 高级交易概念"},"content":"定义: 在特定时间段内的平均价格。\n\n计算: 将时间段内的价格按时间加权平均","type":"content","url":"/terms#id-twap","position":303},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"成交量加权平均价格 (VWAP)","lvl2":"📊 高级交易概念"},"type":"lvl3","url":"/terms#id-vwap","position":304},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"成交量加权平均价格 (VWAP)","lvl2":"📊 高级交易概念"},"content":"定义: 以成交量为权重的平均价格。\n\n计算: 将价格按对应的成交量加权平均\n用途: 评估交易执行质量的基准","type":"content","url":"/terms#id-vwap","position":305},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📚 学习资源术语"},"type":"lvl2","url":"/terms#id-24","position":306},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📚 学习资源术语"},"content":"","type":"content","url":"/terms#id-24","position":307},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"策略库 (Strategy Repository)","lvl2":"📚 学习资源术语"},"type":"lvl3","url":"/terms#id-strategy-repository","position":308},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"策略库 (Strategy Repository)","lvl2":"📚 学习资源术语"},"content":"定义: 存放 Freqtrade 策略的代码仓库。\n\n官方仓库: \n\nhttps://​github​.com​/freqtrade​/freqtrade​-strategies","type":"content","url":"/terms#id-strategy-repository","position":309},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"示例策略 (Example Strategy)","lvl2":"📚 学习资源术语"},"type":"lvl3","url":"/terms#id-example-strategy","position":310},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"示例策略 (Example Strategy)","lvl2":"📚 学习资源术语"},"content":"定义: 用于学习和参考的策略模板。\n\n类型:\n\n简单策略: 基础指标组合\n\n高级策略: 复杂逻辑和多指标\n\nFreqAI策略: 机器学习策略","type":"content","url":"/terms#id-example-strategy","position":311},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"策略模板 (Strategy Template)","lvl2":"📚 学习资源术语"},"type":"lvl3","url":"/terms#id-strategy-template","position":312},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"策略模板 (Strategy Template)","lvl2":"📚 学习资源术语"},"content":"定义: 预定义的策略框架，用户可在此基础上开发。\n\n包含元素:\n\n基础类结构\n\n必要的方法定义\n\n参数配置示例","type":"content","url":"/terms#id-strategy-template","position":313},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"CCXT","lvl2":"📚 学习资源术语"},"type":"lvl3","url":"/terms#ccxt","position":314},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"CCXT","lvl2":"📚 学习资源术语"},"content":"定义: 统一的加密货币交易所接口库。\n\n全称: CryptoCurrency eXchange Trading Library\n作用: 为不同交易所提供统一的API接口\n支持: 100+ 交易所","type":"content","url":"/terms#ccxt","position":315},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔍 调试和优化术语"},"type":"lvl2","url":"/terms#id-25","position":316},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"🔍 调试和优化术语"},"content":"","type":"content","url":"/terms#id-25","position":317},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"日志级别 (Log Level)","lvl2":"🔍 调试和优化术语"},"type":"lvl3","url":"/terms#id-log-level","position":318},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"日志级别 (Log Level)","lvl2":"🔍 调试和优化术语"},"content":"定义: 控制日志输出详细程度的设置。\n\n级别:\n\nDEBUG: 详细调试信息\n\nINFO: 一般信息\n\nWARNING: 警告信息\n\nERROR: 错误信息\n\nCRITICAL: 严重错误","type":"content","url":"/terms#id-log-level","position":319},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"性能分析 (Performance Analysis)","lvl2":"🔍 调试和优化术语"},"type":"lvl3","url":"/terms#id-performance-analysis","position":320},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"性能分析 (Performance Analysis)","lvl2":"🔍 调试和优化术语"},"content":"定义: 对策略表现进行深入分析的过程。\n\n分析维度:\n\n收益分析\n\n风险分析\n\n交易行为分析\n\n市场适应性分析","type":"content","url":"/terms#id-performance-analysis","position":321},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"参数敏感性分析","lvl2":"🔍 调试和优化术语"},"type":"lvl3","url":"/terms#id-26","position":322},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl3":"参数敏感性分析","lvl2":"🔍 调试和优化术语"},"content":"定义: 研究参数变化对策略表现影响的分析方法。\n\n目的:\n\n找到最优参数\n\n评估策略稳定性\n\n避免过拟合","type":"content","url":"/terms#id-26","position":323},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📖 如何使用本词典"},"type":"lvl2","url":"/terms#id-27","position":324},{"hierarchy":{"lvl1":"Freqtrade 术语词典","lvl2":"📖 如何使用本词典"},"content":"按主题查找: 根据功能分类快速定位相关术语\n\n交叉引用: 术语间存在关联，建议结合学习\n\n实践应用: 结合实际操作加深理解\n\n持续更新: 随着学习深入，不断补充新的理解\n\n本词典将随着 Freqtrade 的发展持续更新，欢迎社区贡献更多术语和解释。\n\n最后更新: 2024-01-15版本: 1.0贡献者: Freqtrade 中文社区","type":"content","url":"/terms#id-27","position":325},{"hierarchy":{"lvl1":"交易对象文档"},"type":"lvl1","url":"/trade-object","position":0},{"hierarchy":{"lvl1":"交易对象文档"},"content":"","type":"content","url":"/trade-object","position":1},{"hierarchy":{"lvl1":"交易对象文档","lvl2":"交易对象"},"type":"lvl2","url":"/trade-object#id","position":2},{"hierarchy":{"lvl1":"交易对象文档","lvl2":"交易对象"},"content":"","type":"content","url":"/trade-object#id","position":3},{"hierarchy":{"lvl1":"交易对象文档","lvl3":"Trade","lvl2":"交易对象"},"type":"lvl3","url":"/trade-object#trade","position":4},{"hierarchy":{"lvl1":"交易对象文档","lvl3":"Trade","lvl2":"交易对象"},"content":"freqtrade 进入的仓位存储在 Trade 对象中 - 该对象会被持久化到数据库。\n这是 freqtrade 的核心概念 - 你会在文档的许多部分遇到它，这些部分很可能会指向这个位置。\n\n它将在许多\n\n策略回调中传递给策略。传递给策略的对象不能直接修改。间接修改可能基于回调结果发生。","type":"content","url":"/trade-object#trade","position":5},{"hierarchy":{"lvl1":"交易对象文档","lvl3":"Trade - 可用属性","lvl2":"交易对象"},"type":"lvl3","url":"/trade-object#trade-1","position":6},{"hierarchy":{"lvl1":"交易对象文档","lvl3":"Trade - 可用属性","lvl2":"交易对象"},"content":"以下属性可用于每个单独的交易 - 并且可以使用 trade.<property> 访问（例如 trade.pair）。\n\n属性\n\n数据类型\n\n描述\n\npair\n\nstring\n\n交易对。\n\nis_open\n\nboolean\n\n交易当前是否开放，或已结束。\n\nopen_rate\n\nfloat\n\n进入交易时的价格（在交易调整的情况下为平均入场价格）。\n\nclose_rate\n\nfloat\n\n平仓价格 - 仅在 is_open = False 时设置。\n\nstake_amount\n\nfloat\n\n以 Stake（或 Quote）货币计量的金额。\n\namount\n\nfloat\n\n当前拥有的资产/基础货币数量。在初始订单成交前将为 0.0。\n\nopen_date\n\ndatetime\n\n交易开始的时间戳 请使用 open_date_utc 代替\n\nopen_date_utc\n\ndatetime\n\n交易开始的时间戳 - UTC 时间。\n\nclose_date\n\ndatetime\n\n交易结束的时间戳 请使用 close_date_utc 代替\n\nclose_date_utc\n\ndatetime\n\n交易结束的时间戳 - UTC 时间。\n\nclose_profit\n\nfloat\n\n交易结束时的相对利润。0.01 == 1%\n\nclose_profit_abs\n\nfloat\n\n交易结束时的绝对利润（以 stake 货币计）。\n\nrealized_profit\n\nfloat\n\n交易仍然开放时已实现的绝对利润（以 stake 货币计）。\n\nleverage\n\nfloat\n\n此交易使用的杠杆 - 在现货市场中默认为 1.0。\n\nenter_tag\n\nstring\n\n通过 dataframe 中的 enter_tag 列提供的入场标签。\n\nis_short\n\nboolean\n\n做空交易为 True，否则为 False。\n\norders\n\nOrder[]\n\n附加到此交易的订单对象列表（包括已成交和已取消的订单）。\n\ndate_last_filled_utc\n\ndatetime\n\n最后一个成交订单的时间。\n\nentry_side\n\n“buy” / “sell”\n\n交易进入的订单方向。\n\nexit_side\n\n“buy” / “sell”\n\n将导致交易退出/仓位减少的订单方向。\n\ntrade_direction\n\n“long” / “short”\n\n文本形式的交易方向 - 做多或做空。\n\nnr_of_successful_entries\n\nint\n\n成功（已成交）的入场订单数量。\n\nnr_of_successful_exits\n\nint\n\n成功（已成交）的出场订单数量。\n\nhas_open_orders\n\nboolean\n\n交易是否有未完成订单（不包括止损订单）。","type":"content","url":"/trade-object#trade-1","position":7},{"hierarchy":{"lvl1":"交易对象文档","lvl3":"类方法","lvl2":"交易对象"},"type":"lvl3","url":"/trade-object#id-1","position":8},{"hierarchy":{"lvl1":"交易对象文档","lvl3":"类方法","lvl2":"交易对象"},"content":"以下是类方法 - 它们返回通用信息，通常会导致对数据库的显式查询。\n它们可以作为 Trade.<method> 使用 - 例如 open_trades = Trade.get_open_trade_count()\n\n回测/超优化\n\n大多数方法在回测/超优化和实盘/模拟模式下都能工作。\n\n在回测期间，它仅限于在\n\n策略回调中使用。不支持在 populate_*() 方法中使用，否则会导致错误结果。","type":"content","url":"/trade-object#id-1","position":9},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"get_trades_proxy","lvl3":"类方法","lvl2":"交易对象"},"type":"lvl4","url":"/trade-object#get-trades-proxy","position":10},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"get_trades_proxy","lvl3":"类方法","lvl2":"交易对象"},"content":"当你的策略需要一些关于现有（开放或关闭）交易的信息时 - 最好使用 Trade.get_trades_proxy()。\n\n用法：from freqtrade.persistence import Trade\nfrom datetime import timedelta\n\n# ...\ntrade_hist = Trade.get_trades_proxy(pair='ETH/USDT', is_open=False, open_date=current_date - timedelta(days=2))\n\n\nget_trades_proxy() 支持以下关键字参数。所有参数都是可选的 - 不带参数调用 get_trades_proxy() 将返回数据库中的所有交易列表。\n\npair 例如 pair='ETH/USDT'\n\nis_open 例如 is_open=False\n\nopen_date 例如 open_date=current_date - timedelta(days=2)\n\nclose_date 例如 close_date=current_date - timedelta(days=5)","type":"content","url":"/trade-object#get-trades-proxy","position":11},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"get_open_trade_count","lvl3":"类方法","lvl2":"交易对象"},"type":"lvl4","url":"/trade-object#get-open-trade-count","position":12},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"get_open_trade_count","lvl3":"类方法","lvl2":"交易对象"},"content":"获取当前开放交易的数量from freqtrade.persistence import Trade\n# ...\nopen_trades = Trade.get_open_trade_count()","type":"content","url":"/trade-object#get-open-trade-count","position":13},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"get_total_closed_profit","lvl3":"类方法","lvl2":"交易对象"},"type":"lvl4","url":"/trade-object#get-total-closed-profit","position":14},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"get_total_closed_profit","lvl3":"类方法","lvl2":"交易对象"},"content":"检索机器人到目前为止产生的总利润。\n汇总所有已关闭交易的 close_profit_abs。from freqtrade.persistence import Trade\n\n# ...\nprofit = Trade.get_total_closed_profit()","type":"content","url":"/trade-object#get-total-closed-profit","position":15},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"total_open_trades_stakes","lvl3":"类方法","lvl2":"交易对象"},"type":"lvl4","url":"/trade-object#total-open-trades-stakes","position":16},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"total_open_trades_stakes","lvl3":"类方法","lvl2":"交易对象"},"content":"检索当前在交易中的总 stake_amount。from freqtrade.persistence import Trade\n\n# ...\nprofit = Trade.total_open_trades_stakes()","type":"content","url":"/trade-object#total-open-trades-stakes","position":17},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"get_overall_performance","lvl3":"类方法","lvl2":"交易对象"},"type":"lvl4","url":"/trade-object#get-overall-performance","position":18},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"get_overall_performance","lvl3":"类方法","lvl2":"交易对象"},"content":"检索整体表现 - 类似于 /performance telegram 命令。from freqtrade.persistence import Trade\n\n# ...\nif self.config['runmode'].value in ('live', 'dry_run'):\n    performance = Trade.get_overall_performance()\n\n示例返回值：ETH/BTC 有 5 笔交易，总利润为 1.5%（比率为 0.015）。{\"pair\": \"ETH/BTC\", \"profit\": 0.015, \"count\": 5}","type":"content","url":"/trade-object#get-overall-performance","position":19},{"hierarchy":{"lvl1":"交易对象文档","lvl3":"Order 对象","lvl2":"交易对象"},"type":"lvl3","url":"/trade-object#order","position":20},{"hierarchy":{"lvl1":"交易对象文档","lvl3":"Order 对象","lvl2":"交易对象"},"content":"Order 对象代表交易所上的订单（或模拟模式下的模拟订单）。\nOrder 对象将始终与其对应的 \n\nTrade 绑定，并且只在交易的上下文中才有意义。","type":"content","url":"/trade-object#order","position":21},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"Order - 可用属性","lvl3":"Order 对象","lvl2":"交易对象"},"type":"lvl4","url":"/trade-object#order-1","position":22},{"hierarchy":{"lvl1":"交易对象文档","lvl4":"Order - 可用属性","lvl3":"Order 对象","lvl2":"交易对象"},"content":"Order 对象通常附加到交易上。\n这里的大多数属性可能为 None，因为它们依赖于交易所的响应。\n\n属性\n\n数据类型\n\n描述\n\ntrade\n\nTrade\n\n此订单附加到的交易对象\n\nft_pair\n\nstring\n\n此订单的交易对\n\nft_is_open\n\nboolean\n\n订单是否仍然开放？\n\norder_type\n\nstring\n\n交易所定义的订单类型 - 通常是市价单、限价单或止损单\n\nstatus\n\nstring\n\n由 \n\nccxt 的订单结构 定义的状态。通常是开放、关闭、过期、取消或拒绝\n\nside\n\nstring\n\n买入或卖出\n\nprice\n\nfloat\n\n订单放置的价格\n\naverage\n\nfloat\n\n订单成交的平均价格\n\namount\n\nfloat\n\n基础货币的数量\n\nfilled\n\nfloat\n\n已成交数量（以基础货币计）（请使用 safe_filled 代替）\n\nsafe_filled\n\nfloat\n\n已成交数量（以基础货币计）- 保证不为 None\n\nremaining\n\nfloat\n\n剩余数量（请使用 safe_remaining 代替）\n\nsafe_remaining\n\nfloat\n\n剩余数量 - 从交易所获取或计算得出。\n\ncost\n\nfloat\n\n订单成本 - 通常是 average * filled（在期货中取决于交易所，可能包含带或不带杠杆的成本，可能以合约计。）\n\nstake_amount\n\nfloat\n\n用于此订单的 stake 金额。2023.7 版本添加。\n\nstake_amount_filled\n\nfloat\n\n用于此订单的已成交 stake 金额。2024.11 版本添加。\n\norder_date\n\ndatetime\n\n订单创建日期 请使用 order_date_utc 代替\n\norder_date_utc\n\ndatetime\n\n订单创建日期（UTC 时间）\n\norder_fill_date\n\ndatetime\n\n订单成交日期 请使用 order_fill_utc 代替\n\norder_fill_date_utc\n\ndatetime\n\n订单成交日期","type":"content","url":"/trade-object#order-1","position":23},{"hierarchy":{"lvl1":"更新指南"},"type":"lvl1","url":"/updating","position":0},{"hierarchy":{"lvl1":"更新指南"},"content":"","type":"content","url":"/updating","position":1},{"hierarchy":{"lvl1":"更新指南","lvl2":"如何更新"},"type":"lvl2","url":"/updating#id","position":2},{"hierarchy":{"lvl1":"更新指南","lvl2":"如何更新"},"content":"要更新你的 freqtrade 安装，请使用以下方法之一，对应你的安装方式。\n\n跟踪变更\n\n破坏性更改/行为变更将在每个版本随附的更新日志中记录。\n\n对于 develop 分支，请关注 PR 以避免被变更所惊讶。","type":"content","url":"/updating#id","position":3},{"hierarchy":{"lvl1":"更新指南","lvl3":"Docker","lvl2":"如何更新"},"type":"lvl3","url":"/updating#docker","position":4},{"hierarchy":{"lvl1":"更新指南","lvl3":"Docker","lvl2":"如何更新"},"content":"使用 master 镜像的旧版安装\n\n我们正在将发布镜像从 master 切换到 stable - 请调整你的 docker 文件并将 freqtradeorg/freqtrade:master 替换为 freqtradeorg/freqtrade:stabledocker compose pull\ndocker compose up -d","type":"content","url":"/updating#docker","position":5},{"hierarchy":{"lvl1":"更新指南","lvl3":"通过安装脚本安装","lvl2":"如何更新"},"type":"lvl3","url":"/updating#id-1","position":6},{"hierarchy":{"lvl1":"更新指南","lvl3":"通过安装脚本安装","lvl2":"如何更新"},"content":"./setup.sh --update\n\nNote\n\n确保在禁用虚拟环境的情况下运行此命令！","type":"content","url":"/updating#id-1","position":7},{"hierarchy":{"lvl1":"更新指南","lvl3":"原生安装","lvl2":"如何更新"},"type":"lvl3","url":"/updating#id-2","position":8},{"hierarchy":{"lvl1":"更新指南","lvl3":"原生安装","lvl2":"如何更新"},"content":"请确保你也更新了依赖项 - 否则可能会在你不注意的情况下出现问题。git pull\npip install -U -r requirements.txt\npip install -e .\n\n# 确保 freqUI 是最新版本\nfreqtrade install-ui ","type":"content","url":"/updating#id-2","position":9},{"hierarchy":{"lvl1":"更新指南","lvl4":"更新问题","lvl3":"原生安装","lvl2":"如何更新"},"type":"lvl4","url":"/updating#id-3","position":10},{"hierarchy":{"lvl1":"更新指南","lvl4":"更新问题","lvl3":"原生安装","lvl2":"如何更新"},"content":"更新问题通常来自缺少依赖项（你没有按照上述说明操作）- 或者来自更新后的依赖项，这些依赖项安装失败（例如 TA-lib）。\n请参考相应的安装部分（常见问题链接如下）","type":"content","url":"/updating#id-3","position":11},{"hierarchy":{"lvl1":"实用工具命令指南"},"type":"lvl1","url":"/utils","position":0},{"hierarchy":{"lvl1":"实用工具命令指南"},"content":"","type":"content","url":"/utils","position":1},{"hierarchy":{"lvl1":"实用工具命令指南","lvl2":"实用工具子命令"},"type":"lvl2","url":"/utils#id","position":2},{"hierarchy":{"lvl1":"实用工具命令指南","lvl2":"实用工具子命令"},"content":"除了实盘交易和模拟交易模式、backtesting、edge 和 hyperopt 优化子命令，以及用于准备历史数据的 download-data 子命令外，机器人还包含许多实用工具子命令。本节将介绍这些命令。","type":"content","url":"/utils#id","position":3},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"创建用户目录","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-1","position":4},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"创建用户目录","lvl2":"实用工具子命令"},"content":"创建用于存放 freqtrade 文件的目录结构。\n同时会创建策略和超参数优化示例，帮助你快速入门。\n可以多次使用 - 使用 --reset 将重置示例策略和超参数优化文件到默认状态。\n\n用法: freqtrade create-userdir [-h] [--userdir PATH] [--reset]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  --reset               将示例文件重置为其原始状态。\n\nWarning\n\n使用 --reset 可能导致数据丢失，因为这将在不询问的情况下覆盖所有示例文件。├── backtest_results\n├── data\n├── hyperopt_results\n├── hyperopts\n│   ├── sample_hyperopt_loss.py\n├── notebooks \n│   └── strategy_analysis_example.ipynb\n├── plot\n└── strategies\n    └── sample_strategy.py","type":"content","url":"/utils#id-1","position":5},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"创建新配置","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-2","position":6},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"创建新配置","lvl2":"实用工具子命令"},"content":"创建新的配置文件，询问一些对配置很重要的选择性问题。\n\n用法: `freqtrade new-config [-h] [-c PATH]`\n\n选项:\n\n  -h, --help            显示帮助信息并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n\nWarning\n\n只询问关键问题。Freqtrade 提供了更多配置选项，这些选项在\n\n配置文档中列出。","type":"content","url":"/utils#id-2","position":7},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"创建配置示例","lvl3":"创建新配置","lvl2":"实用工具子命令"},"type":"lvl4","url":"/utils#id-3","position":8},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"创建配置示例","lvl3":"创建新配置","lvl2":"实用工具子命令"},"content":"$ freqtrade new-config --config user_data/config_binance.json\n\n? 是否启用模拟交易？  Yes\n? 请输入您的交易货币： BTC\n? 请输入您的交易金额： 0.05\n? 请输入最大开放交易数（整数或 -1 表示无限制）： 3\n? 请输入您期望的时间周期（例如 5m）： 5m\n? 请输入您的显示货币（用于报告）： USD\n? 选择交易所  binance\n? 是否启用 Telegram？  No","type":"content","url":"/utils#id-3","position":9},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"显示配置","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#show-config","position":10},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"显示配置","lvl2":"实用工具子命令"},"content":"显示配置文件（默认情况下敏感值会被隐藏）。\n\n在使用\n\n拆分配置文件或\n\n环境变量时特别有用，此命令将显示合并后的配置。\n\n用法: freqtrade show-config [-h] [--userdir PATH] [-c PATH]\n                             [--show-sensitive]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  --show-sensitive      在输出中显示敏感信息。您的组合配置是：\n{\n  \"exit_pricing\": {\n    \"price_side\": \"other\",\n    \"use_order_book\": true,\n    \"order_book_top\": 1\n  },\n  \"stake_currency\": \"USDT\",\n  \"exchange\": {\n    \"name\": \"binance\",\n    \"key\": \"REDACTED\",\n    \"secret\": \"REDACTED\",\n    \"ccxt_config\": {},\n    \"ccxt_async_config\": {},\n  }\n  // ...\n}\n\n共享此命令提供的信息\n\n我们尝试从默认输出中删除所有已知的敏感信息（不使用 --show-sensitive）。\n\n但是，请仔细检查输出中的敏感值，以确保您不会意外泄露任何私人信息。","type":"content","url":"/utils#show-config","position":11},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"创建新策略","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-4","position":12},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"创建新策略","lvl2":"实用工具子命令"},"content":"从类似于 SampleStrategy 的模板创建新策略。\n\n文件将根据您的类名命名，并且不会覆盖现有文件。\n\n结果将位于 user_data/strategies/<strategyclassname>.py。\n\n用法: freqtrade new-strategy [-h] [--userdir PATH] [-s NAME]\n                              [--strategy-path PATH]\n                              [--template {full,minimal,advanced}]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  -s NAME, --strategy NAME\n                        指定机器人使用的策略类名。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --template {full,minimal,advanced}\n                        使用模板，可以是 `minimal`、`full`（包含多个示例指标）或 `advanced`。\n                        默认：`full`。","type":"content","url":"/utils#id-4","position":13},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"新策略使用示例","lvl3":"创建新策略","lvl2":"实用工具子命令"},"type":"lvl4","url":"/utils#id-5","position":14},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"新策略使用示例","lvl3":"创建新策略","lvl2":"实用工具子命令"},"content":"freqtrade new-strategy --strategy AwesomeStrategy\n\n使用自定义用户目录freqtrade new-strategy --userdir ~/.freqtrade/ --strategy AwesomeStrategy\n\n使用高级模板（填充所有可选函数和方法）freqtrade new-strategy --strategy AwesomeStrategy --template advanced","type":"content","url":"/utils#id-5","position":15},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出策略","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-6","position":16},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出策略","lvl2":"实用工具子命令"},"content":"使用 list-strategies 子命令查看特定目录中的所有策略。\n\n此子命令对于查找环境中加载策略的问题很有用：包含错误且加载失败的策略模块将以红色显示（LOAD FAILED），而具有重复名称的策略将以黄色显示（DUPLICATE NAME）。\n\n用法: freqtrade list-strategies [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [--strategy-path PATH] [-1]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --strategy-path PATH  指定策略目录的路径。\n  -1, --one-column      以单列格式输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\nWarning\n\n使用这些命令将尝试从目录加载所有 Python 文件。如果该目录中存在不受信任的文件，这可能存在安全风险，因为所有模块级代码都会被执行。\n\n示例：搜索默认策略目录（在默认用户目录内）。freqtrade list-strategies\n\n示例：搜索用户目录中的策略目录。freqtrade list-strategies --userdir ~/.freqtrade/\n\n示例：搜索专用策略路径。freqtrade list-strategies --strategy-path ~/.freqtrade/strategies/","type":"content","url":"/utils#id-6","position":17},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出超参数优化损失函数","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-7","position":18},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出超参数优化损失函数","lvl2":"实用工具子命令"},"content":"使用 list-hyperoptloss 子命令查看所有可用的超参数优化损失函数。\n\n它提供了环境中所有可用损失函数的快速列表。\n\n此子命令对于查找环境中加载损失函数的问题很有用：包含错误且加载失败的损失函数模块将以红色显示（LOAD FAILED），而具有重复名称的损失函数将以黄色显示（DUPLICATE NAME）。\n\n用法: freqtrade list-hyperoptloss [-h] [-v] [--no-color] [--logfile FILE]\n                                   [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                   [--hyperopt-path PATH] [-1]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --hyperopt-path PATH  为超参数损失函数指定额外的查找路径。\n  -1, --one-column      以单列格式输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/utils#id-7","position":19},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出 freqAI 模型","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-freqai","position":20},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出 freqAI 模型","lvl2":"实用工具子命令"},"content":"使用 list-freqaimodels 子命令查看所有可用的 freqAI 模型。\n\n此子命令对于查找环境中加载 freqAI 模型的问题很有用：包含错误且加载失败的模型模块将以红色显示（LOAD FAILED），而具有重复名称的模型将以黄色显示（DUPLICATE NAME）。\n\n用法: freqtrade list-freqaimodels [-h] [-v] [--no-color] [--logfile FILE]\n                                   [-V] [-c PATH] [-d PATH] [--userdir PATH]\n                                   [--freqaimodel-path PATH] [-1]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --freqaimodel-path PATH\n                        为 freqaimodels 指定额外的查找路径。\n  -1, --one-column      以单列格式输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/utils#id-freqai","position":21},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出交易所","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-8","position":22},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出交易所","lvl2":"实用工具子命令"},"content":"使用 list-exchanges 子命令查看机器人可用的交易所。\n\n用法: freqtrade list-exchanges [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                [-c PATH] [-d PATH] [--userdir PATH] [-1] [-a]\n                                [--trading-mode {spot,margin,futures}]\n                                [--dex-exchanges]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  -1, --one-column      以单列格式输出。\n  -a, --all             打印 ccxt 库已知的所有交易所。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式\n  --dex-exchanges       仅打印 DEX 交易所。\n\n示例：查看机器人可用的交易所：$ freqtrade list-exchanges\nFreqtrade 可用的交易所：\n交易所名称        支持状态    市场                    原因\n------------------  -----------  ----------------------  ------------------------------------------------------------------------\nbinance            官方支持    现货、隔离期货\nbitmart            官方支持    现货\nbybit                         现货、隔离期货\ngate               官方支持    现货、隔离期货\nhtx                官方支持    现货\nhuobi                         现货\nkraken             官方支持    现货\nokx                官方支持    现货、隔离期货\n\n简化\n\n为清晰起见，输出已简化 - 支持和可用的交易所可能随时间变化。\n\n缺少优化选项的交易所\n\n标记为 “missing opt:” 的值可能需要特殊配置（例如，如果缺少 fetchTickers，则使用订单簿）- 但理论上应该可以工作（尽管我们不能保证它们会工作）。\n\n示例：查看 ccxt 库支持的所有交易所（包括\"不良\"交易所，即已知不能与 Freqtrade 一起工作的交易所）$ freqtrade list-exchanges -a\nccxt 库支持的所有交易所：\n交易所名称        有效    支持状态    市场                    原因\n------------------  -------  -----------  ----------------------  ---------------------------------------------------------------------------------\nbinance            True    官方支持    现货、隔离期货\nbitflyer           False                现货                    missing: fetchOrder. missing opt: fetchTickers.\nbitmart            True    官方支持    现货\nbybit              True                 现货、隔离期货\ngate               True    官方支持    现货、隔离期货\nhtx                True    官方支持    现货\nkraken             True    官方支持    现货\nokx                True    官方支持    现货、隔离期货\n\n简化\n\n输出已简化 - 支持和可用的交易所可能随时间变化。","type":"content","url":"/utils#id-8","position":23},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出时间周期","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-9","position":24},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出时间周期","lvl2":"实用工具子命令"},"content":"使用 list-timeframes 子命令查看交易所可用的时间周期列表。\n\n用法: freqtrade list-timeframes [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                 [-c PATH] [-d PATH] [--userdir PATH]\n                                 [--exchange EXCHANGE] [-1]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  -1, --one-column      以单列格式输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n示例：查看配置文件中设置的 ‘binance’ 交易所的时间周期：$ freqtrade list-timeframes -c config_binance.json\n...\n交易所 `binance` 可用的时间周期： \n    1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M\n\n示例：枚举 Freqtrade 可用的交易所并打印每个交易所支持的时间周期：> for i in `freqtrade list-exchanges -1`; do freqtrade list-timeframes --exchange $i; done","type":"content","url":"/utils#id-9","position":25},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出交易对/市场","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-10","position":26},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出交易对/市场","lvl2":"实用工具子命令"},"content":"list-pairs 和 list-markets 子命令允许查看交易所上可用的交易对/市场。\n\n交易对是在市场符号中基础货币部分和计价货币部分之间带有 ‘/’ 字符的市场。\n例如，在 ‘ETH/BTC’ 交易对中，‘ETH’ 是基础货币，而 ‘BTC’ 是计价货币。\n\n对于 Freqtrade 交易的交易对，交易对的计价货币由配置设置中的 stake_currency 值定义。\n\n您可以使用这些子命令打印任何交易对/市场的信息 - 并且您可以使用 --quote BTC 按计价货币过滤输出，或使用 --base ETH 选项按基础货币过滤输出。\n\n这些子命令具有相同的用法和相同的可用选项集：\n\n用法: freqtrade list-pairs [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                            [-c PATH] [-d PATH] [--userdir PATH]\n                            [--exchange EXCHANGE] [--print-list]\n                            [--print-json] [-1] [--print-csv]\n                            [--base BASE_CURRENCY [BASE_CURRENCY ...]]\n                            [--quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]]\n                            [-a] [--trading-mode {spot,margin,futures}]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。\n  --print-list          以列表形式打印交易对。默认以表格形式输出。\n  --print-json          以 JSON 格式打印交易对列表。\n  -1, --one-column      以单列格式输出。\n  --print-csv           以 CSV 格式打印交易所交易对数据。\n  --base BASE_CURRENCY [BASE_CURRENCY ...]\n                        指定基础货币。空格分隔的列表。\n  --quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]\n                        指定计价货币。空格分隔的列表。\n  -a, --all             打印所有交易对。默认仅显示活跃的。\n  --trading-mode {spot,margin,futures}, --tradingmode {spot,margin,futures}\n                        选择交易模式。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\n默认情况下，只显示活跃的交易对/市场。活跃的交易对/市场是当前可以在交易所交易的交易对/市场。\n您可以使用 -a/-all 选项查看所有交易对/市场的列表，包括不活跃的。\n如果市场的最小可交易价格非常小，即小于 1e-11（0.00000000001），则交易对可能被列为不可交易。\n\n在打印输出中，交易对/市场按其符号字符串排序。","type":"content","url":"/utils#id-10","position":27},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"列出交易对/市场","lvl2":"实用工具子命令"},"type":"lvl4","url":"/utils#id-11","position":28},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"列出交易对/市场","lvl2":"实用工具子命令"},"content":"以 JSON 格式打印默认配置文件中指定的交易所（即 “Binance” 交易所）上以 USD 为计价货币的活跃交易对列表：> freqtrade list-pairs --quote USD --print-json\n\n打印 config_binance.json 配置文件指定的交易所（即 “Binance” 交易所）上所有以 BTC 或 ETH 为基础货币，以 USDT 或 USD 为计价货币的交易对列表，以人类可读的列表形式显示并带有摘要：> freqtrade list-pairs -c config_binance.json --all --base BTC ETH --quote USDT USD --print-list\n\n以表格格式打印 “Kraken” 交易所上的所有市场：> freqtrade list-markets --exchange kraken --all","type":"content","url":"/utils#id-11","position":29},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"测试交易对列表","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-12","position":30},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"测试交易对列表","lvl2":"实用工具子命令"},"content":"使用 test-pairlist 子命令测试\n\n动态交易对列表的配置。\n\n需要具有指定 pairlists 属性的配置。\n可用于生成在回测/超参数优化期间使用的静态交易对列表。\n\n用法: freqtrade test-pairlist [-h] [--userdir PATH] [-v] [-c PATH]\n                               [--quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]]\n                               [-1] [--print-json] [--exchange EXCHANGE]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  --quote QUOTE_CURRENCY [QUOTE_CURRENCY ...]\n                        指定报价货币。以空格分隔的列表。\n  -1, --one-column      以单列格式输出。\n  --print-json          以 JSON 格式打印交易对或市场符号列表。\n  --exchange EXCHANGE   交易所名称。仅在未提供配置时有效。","type":"content","url":"/utils#id-12","position":31},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"测试交易对列表","lvl2":"实用工具子命令"},"type":"lvl4","url":"/utils#id-13","position":32},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"测试交易对列表","lvl2":"实用工具子命令"},"content":"显示使用\n\n动态交易对列表时的白名单。freqtrade test-pairlist --config config.json --quote USDT BTC","type":"content","url":"/utils#id-13","position":33},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"转换数据库","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-14","position":34},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"转换数据库","lvl2":"实用工具子命令"},"content":"freqtrade convert-db 可用于将数据库从一个系统转换到另一个系统（sqlite -> postgres，postgres -> 其他 postgres），迁移所有交易、订单和交易对锁定。\n\n请参阅\n\n相应文档了解不同数据库系统的要求。\n\n用法: freqtrade convert-db [-h] [--db-url PATH] [--db-url-from PATH]\n\n选项:\n  -h, --help          显示帮助信息并退出\n  --db-url PATH       覆盖交易数据库 URL，这在自定义部署中很有用\n                      （默认：实盘模式为 `sqlite:///tradesv3.sqlite`，\n                      模拟运行模式为 `sqlite:///tradesv3.dryrun.sqlite`）。\n  --db-url-from PATH  迁移数据库时使用的源数据库 URL。\n\nWarning\n\n请确保仅在空的目标数据库上使用此功能。Freqtrade 将执行常规迁移，但如果已存在条目，可能会失败。","type":"content","url":"/utils#id-14","position":35},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"网页服务器模式","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-15","position":36},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"网页服务器模式","lvl2":"实用工具子命令"},"content":"实验性\n\n网页服务器模式是一种实验性模式，用于提高回测和策略开发效率。\n可能仍存在错误 - 如果您遇到这些错误，请将其报告为 github issues，谢谢。\n\n以网页服务器模式运行 freqtrade。\nFreqtrade 将启动网页服务器并允许 FreqUI 启动和控制回测进程。\n这样做的好处是，只要时间周期和时间范围保持不变，数据就不会在回测运行之间重新加载。\nFreqUI 还将显示回测结果。\n\n用法: freqtrade webserver [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                           [-c PATH] [-d PATH] [--userdir PATH]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/utils#id-15","position":37},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"网页服务器模式 - docker","lvl3":"网页服务器模式","lvl2":"实用工具子命令"},"type":"lvl4","url":"/utils#id-docker","position":38},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"网页服务器模式 - docker","lvl3":"网页服务器模式","lvl2":"实用工具子命令"},"content":"您也可以通过 docker 使用网页服务器模式。\n启动一次性容器需要明确配置端口，因为默认情况下不会暴露端口。\n您可以使用 docker compose run --rm -p 127.0.0.1:8080:8080 freqtrade webserver 启动一个一次性容器，一旦停止就会被删除。这假设端口 8080 仍然可用，并且没有其他机器人在该端口上运行。\n\n或者，您可以重新配置 docker-compose 文件以更新命令：    command: >\n      webserver\n      --config /freqtrade/user_data/config.json\n\n您现在可以使用 docker compose up 启动网页服务器。\n这假设配置已启用网页服务器并为 docker 配置（监听端口 = 0.0.0.0）。\n\nTip\n\n如果您想启动实盘或模拟交易机器人，别忘了将命令重置回交易命令。","type":"content","url":"/utils#id-docker","position":39},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"显示之前的回测结果","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-16","position":40},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"显示之前的回测结果","lvl2":"实用工具子命令"},"content":"允许您显示之前的回测结果。\n添加 --show-pair-list 会输出一个排序后的交易对列表，您可以轻松地复制/粘贴到配置中（省略不好的交易对）。\n\n策略过拟合\n\n仅使用盈利的交易对可能导致策略过拟合，这在未来的数据上效果不会很好。在冒险使用真实资金之前，请确保在模拟交易中广泛测试您的策略。\n\n用法: freqtrade backtesting-show [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                  [-c PATH] [-d PATH] [--userdir PATH]\n                                  [--backtest-filename PATH]\n                                  [--backtest-directory PATH]\n                                  [--show-pair-list]\n                                  [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或 `--export-directory` 作为基础目录。\n  --backtest-directory PATH, --export-directory PATH\n                        用于回测结果的目录。示例：\n                        `--export-directory=user_data/backtest_results/`。\n  --show-pair-list      按利润排序显示回测交易对列表。\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        显示按[日、周、月、年]的回测明细。\n\nCommon arguments:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n","type":"content","url":"/utils#id-16","position":41},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"详细回测分析","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-17","position":42},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"详细回测分析","lvl2":"实用工具子命令"},"content":"高级回测结果分析。\n\n更多详情请参阅\n\n回测分析部分。\n\n用法: freqtrade backtesting-analysis [-h] [-v] [--no-color] [--logfile FILE]\n                                      [-V] [-c PATH] [-d PATH]\n                                      [--userdir PATH]\n                                      [--backtest-filename PATH]\n                                      [--backtest-directory PATH]\n                                      [--analysis-groups {0,1,2,3,4,5} [{0,1,2,3,4,5} ...]]\n                                      [--enter-reason-list ENTER_REASON_LIST [ENTER_REASON_LIST ...]]\n                                      [--exit-reason-list EXIT_REASON_LIST [EXIT_REASON_LIST ...]]\n                                      [--indicator-list INDICATOR_LIST [INDICATOR_LIST ...]]\n                                      [--entry-only] [--exit-only]\n                                      [--timerange TIMERANGE]\n                                      [--rejected-signals] [--analysis-to-csv]\n                                      [--analysis-csv-path ANALYSIS_CSV_PATH]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --backtest-filename PATH, --export-filename PATH\n                        使用此文件名作为回测结果。示例：\n                        `--backtest-filename=backtest_results_2020-09-27_16-20-48.json`。\n                        假设以 `user_data/backtest_results/` 或 `--export-directory` 作为基础目录。\n  --analysis-groups {0,1,2,3,4,5} [{0,1,2,3,4,5} ...]\n                        分组输出 - 0: 按入场标签的简单盈亏，1: 按入场标签，\n                        2: 按入场标签和出场标签，3: 按交易对和入场标签，\n                        4: 按交易对、入场标签和出场标签（这可能会变得相当大），\n                        5: 按出场标签\n  --enter-reason-list ENTER_REASON_LIST [ENTER_REASON_LIST ...]\n                        要分析的入场信号列表（用空格分隔）。\n                        默认：全部。例如：'entry_tag_a entry_tag_b'\n  --exit-reason-list EXIT_REASON_LIST [EXIT_REASON_LIST ...]\n                        要分析的出场信号列表（用空格分隔）。\n                        默认：全部。例如：'exit_tag_a roi stop_loss trailing_stop_loss'\n  --indicator-list INDICATOR_LIST [INDICATOR_LIST ...]\n                        要分析的指标列表（用空格分隔）。例如：\n                        'close rsi bb_lowerband profit_abs'\n  --entry-only          仅分析入场信号。\n  --exit-only           仅分析出场信号。\n  --timerange TIMERANGE\n                        指定要使用的数据时间范围。\n  --rejected-signals    分析被拒绝的信号。\n  --analysis-to-csv     将选定的分析表保存为单独的CSV文件。\n  --analysis-csv-path ANALYSIS_CSV_PATH\n                        如果启用了 --analysis-to-csv，指定保存分析CSV文件的路径。\n                        默认：user_data/backtesting_results/\n\nCommon arguments:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n","type":"content","url":"/utils#id-17","position":43},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出超参数优化结果","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#list-hyperopt-results","position":44},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"列出超参数优化结果","lvl2":"实用工具子命令"},"content":"您可以使用 hyperopt-list 子命令列出超参数优化模块之前评估的超参数优化周期。\n\n用法: freqtrade hyperopt-list [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH] [--best]\n                               [--profitable] [--min-trades INT]\n                               [--max-trades INT] [--min-avg-time FLOAT]\n                               [--max-avg-time FLOAT] [--min-avg-profit FLOAT]\n                               [--max-avg-profit FLOAT]\n                               [--min-total-profit FLOAT]\n                               [--max-total-profit FLOAT]\n                               [--min-objective FLOAT] [--max-objective FLOAT]\n                               [--print-json] [--no-details]\n                               [--hyperopt-filename FILENAME]\n                               [--export-csv FILE]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --best                仅选择最佳 epoch。\n  --profitable          仅选择有利润的 epoch。\n  --min-trades INT      选择交易次数大于 INT 的 epoch。\n  --max-trades INT      选择交易次数小于 INT 的 epoch。\n  --min-avg-time FLOAT  选择平均用时大于指定值的 epoch。\n  --max-avg-time FLOAT  选择平均用时小于指定值的 epoch。\n  --min-avg-profit FLOAT\n                        选择平均利润大于指定值的 epoch。\n  --max-avg-profit FLOAT\n                        选择平均利润小于指定值的 epoch。\n  --min-total-profit FLOAT\n                        选择总利润大于指定值的 epoch。\n  --max-total-profit FLOAT\n                        选择总利润小于指定值的 epoch。\n  --min-objective FLOAT\n                        选择目标值大于指定值的 epoch。\n  --max-objective FLOAT\n                        选择目标值小于指定值的 epoch。\n  --print-json          以 JSON 格式输出结果。\n  --no-details          不打印最佳 epoch 的详细信息。\n  --hyperopt-filename FILENAME\n                        超参数优化结果文件名。例如：`--hyperopt-filename=hyperopt_results_2020-09-27_16-20-48.pickle`\n  --export-csv FILE     导出为 CSV 文件。此操作会禁用表格打印。\n                        例如：--export-csv hyperopt.csv\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\nNote\n\nhyperopt-list 将自动使用最新的可用超参数优化结果文件。\n您可以使用 --hyperopt-filename 参数覆盖此设置，并指定另一个可用的文件名（不带路径！）。","type":"content","url":"/utils#list-hyperopt-results","position":45},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"列出超参数优化结果","lvl2":"实用工具子命令"},"type":"lvl4","url":"/utils#id-18","position":46},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"列出超参数优化结果","lvl2":"实用工具子命令"},"content":"列出所有结果，在末尾打印最佳结果的详细信息：freqtrade hyperopt-list\n\n仅列出具有正利润的周期。不打印最佳周期的详细信息，以便可以在脚本中迭代列表：freqtrade hyperopt-list --profitable --no-details","type":"content","url":"/utils#id-18","position":47},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"显示超参数优化结果的详细信息","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-19","position":48},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"显示超参数优化结果的详细信息","lvl2":"实用工具子命令"},"content":"您可以使用 hyperopt-show 子命令显示超参数优化模块之前评估的任何超参数优化周期的详细信息。\n\n用法: freqtrade hyperopt-show [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                               [-c PATH] [-d PATH] [--userdir PATH] [--best]\n                               [--profitable] [-n INT] [--print-json]\n                               [--hyperopt-filename FILENAME] [--no-header]\n                               [--disable-param-export]\n                               [--breakdown {day,week,month,year} [{day,week,month,year} ...]]\n\n选项:\n  -h, --help            显示帮助信息并退出\n  --best                仅选择最佳 epoch。\n  --profitable          仅选择有利润的 epoch。\n  -n INT, --index INT   指定要打印详细信息的 epoch 索引。\n  --print-json          以 JSON 格式输出结果。\n  --hyperopt-filename FILENAME\n                        超参数优化结果文件名。例如：`--hyperopt-filename=hyperopt_results_2020-09-27_16-20-48.pickle`\n  --no-header           不打印 epoch 详细信息标题。\n  --disable-param-export\n                        禁用自动导出超参数。\n  --breakdown {day,week,month,year} [{day,week,month,year} ...]\n                        按 [日、周、月、年] 显示回测明细。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。\n\nNote\n\nhyperopt-show 将自动使用最新的可用超参数优化结果文件。\n您可以使用 --hyperopt-filename 参数覆盖此设置，并指定另一个可用的文件名（不带路径！）。","type":"content","url":"/utils#id-19","position":49},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"显示超参数优化结果的详细信息","lvl2":"实用工具子命令"},"type":"lvl4","url":"/utils#id-20","position":50},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"显示超参数优化结果的详细信息","lvl2":"实用工具子命令"},"content":"打印周期 168 的详细信息（周期编号由 hyperopt-list 子命令或超参数优化运行期间的超参数优化本身显示）：freqtrade hyperopt-show -n 168\n\n打印最后一个最佳周期（即所有周期中最好的）的 JSON 数据：freqtrade hyperopt-show --best -n -1 --print-json --no-header","type":"content","url":"/utils#id-20","position":51},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"显示交易","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-21","position":52},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"显示交易","lvl2":"实用工具子命令"},"content":"将数据库中的选定（或所有）交易打印到屏幕。\n\n用法: freqtrade show-trades [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                             [-c PATH] [-d PATH] [--userdir PATH]\n                             [--db-url PATH]\n                             [--trade-ids TRADE_IDS [TRADE_IDS ...]]\n                             [--print-json]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --db-url PATH         覆盖交易数据库 URL，这在自定义部署中很有用（默认：`sqlite:///tradesv3.sqlite` 用于实时运行模式，`sqlite:///tradesv3.dryrun.sqlite` 用于模拟运行）。\n  --trade-ids TRADE_IDS [TRADE_IDS ...]\n                        指定交易 ID 列表。\n  --print-json          以 JSON 格式打印输出。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：\n                        'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。\n                        可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/utils#id-21","position":53},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"显示交易","lvl2":"实用工具子命令"},"type":"lvl4","url":"/utils#id-22","position":54},{"hierarchy":{"lvl1":"实用工具命令指南","lvl4":"示例","lvl3":"显示交易","lvl2":"实用工具子命令"},"content":"以 json 格式打印 id 为 2 和 3 的交易freqtrade show-trades --db-url sqlite:///tradesv3.sqlite --trade-ids 2 3 --print-json","type":"content","url":"/utils#id-22","position":55},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"策略更新器","lvl2":"实用工具子命令"},"type":"lvl3","url":"/utils#id-23","position":56},{"hierarchy":{"lvl1":"实用工具命令指南","lvl3":"策略更新器","lvl2":"实用工具子命令"},"content":"更新列出的策略或策略文件夹中的所有策略，使其符合 v3 标准。\n如果命令在没有 --strategy-list 的情况下运行，则策略文件夹中的所有策略都将被转换。\n您的原始策略将保留在 user_data/strategies_orig_updater/ 目录中。\n\n转换结果\n\n策略更新器将以\"尽力而为\"的方式工作。请尽职调查并验证转换结果。\n我们还建议运行 python 格式化工具（例如 black）以合理的方式格式化结果。\n\n用法: freqtrade strategy-updater [-h] [-v] [--no-color] [--logfile FILE] [-V]\n                                  [-c PATH] [-d PATH] [--userdir PATH]\n                                  [--strategy-list STRATEGY_LIST [STRATEGY_LIST ...]]\n                                  [--strategy-path PATH]\n                                  [--recursive-strategy-search]\n\n选项:\n  -h, --help            显示帮助信息并退出。\n  --strategy-list STRATEGY_LIST [STRATEGY_LIST ...]\n                        提供一个以空格分隔的策略列表进行回测。请注意，时间周期需要在配置文件或命令行中设置。当与 `--export trades` 一起使用时，策略名称会被注入到文件名中（例如 `backtest-data.json` 会变成 `backtest-data-SampleStrategy.json`）。\n  --strategy-path PATH  指定额外的策略查找路径。\n  --recursive-strategy-search\n                        在策略文件夹中递归查找策略。\n\n通用参数:\n  -v, --verbose         详细模式（-vv 获取更多信息，-vvv 获取所有消息）。\n  --no-color            禁用超参数优化结果的着色。在将输出重定向到文件时可能有用。\n  --logfile FILE, --log-file FILE\n                        记录到指定的文件。特殊值包括：'syslog', 'journald'。有关更多详细信息，请参阅文档。\n  -V, --version         显示程序版本号并退出。\n  -c PATH, --config PATH\n                        指定配置文件（默认：`userdir/config.json` 或 `config.json`，以存在的为准）。可以使用多个 --config 选项。可以设置为 `-` 以从标准输入读取配置。\n  -d PATH, --datadir PATH, --data-dir PATH\n                        交易所历史回测数据的基本目录路径。要查看期货数据，需要额外使用 trading-mode。\n  --userdir PATH, --user-data-dir PATH\n                        用户数据目录的路径。","type":"content","url":"/utils#id-23","position":57},{"hierarchy":{"lvl1":"Webhook 配置指南"},"type":"lvl1","url":"/webhook-config","position":0},{"hierarchy":{"lvl1":"Webhook 配置指南"},"content":"","type":"content","url":"/webhook-config","position":1},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl2":"Webhook 使用"},"type":"lvl2","url":"/webhook-config#webhook","position":2},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl2":"Webhook 使用"},"content":"","type":"content","url":"/webhook-config#webhook","position":3},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl3":"配置","lvl2":"Webhook 使用"},"type":"lvl3","url":"/webhook-config#id","position":4},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl3":"配置","lvl2":"Webhook 使用"},"content":"通过在配置文件中添加 webhook 部分并将 webhook.enabled 设置为 true 来启用 webhook。\n\n示例配置（使用 IFTTT 测试）。  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://maker.ifttt.com/trigger/<YOUREVENT>/with/key/<YOURKEY>/\",\n        \"entry\": {\n            \"value1\": \"买入 {pair}\",\n            \"value2\": \"限价 {limit:8f}\",\n            \"value3\": \"{stake_amount:8f} {stake_currency}\"\n        },\n        \"entry_cancel\": {\n            \"value1\": \"取消 {pair} 的开放买单\",\n            \"value2\": \"限价 {limit:8f}\",\n            \"value3\": \"{stake_amount:8f} {stake_currency}\"\n        },\n         \"entry_fill\": {\n            \"value1\": \"{pair} 买单已成交\",\n            \"value2\": \"成交价 {open_rate:8f}\",\n            \"value3\": \"\"\n        },\n        \"exit\": {\n            \"value1\": \"退出 {pair}\",\n            \"value2\": \"限价 {limit:8f}\",\n            \"value3\": \"利润: {profit_amount:8f} {stake_currency} ({profit_ratio})\"\n        },\n        \"exit_cancel\": {\n            \"value1\": \"取消 {pair} 的开放卖单\",\n            \"value2\": \"限价 {limit:8f}\",\n            \"value3\": \"利润: {profit_amount:8f} {stake_currency} ({profit_ratio})\"\n        },\n        \"exit_fill\": {\n            \"value1\": \"{pair} 卖单已成交\",\n            \"value2\": \"成交价 {close_rate:8f}\",\n            \"value3\": \"\"\n        },\n        \"status\": {\n            \"value1\": \"状态: {status}\",\n            \"value2\": \"\",\n            \"value3\": \"\"\n        }\n    },\n\nwebhook.url 中的 url 应该指向您的 webhook 的正确 url。如果您使用 \n\nIFTTT（如上面的示例所示），请在 url 中插入您的事件和密钥。\n\n您可以将 POST 正文格式设置为表单编码（默认）、JSON 编码或原始数据。分别使用 \"format\": \"form\"、\"format\": \"json\" 或 \"format\": \"raw\"。Mattermost Cloud 集成的示例配置：  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://<YOURSUBDOMAIN>.cloud.mattermost.com/hooks/<YOURHOOK>\",\n        \"format\": \"json\",\n        \"status\": {\n            \"text\": \"状态: {status}\"\n        }\n    },\n\n结果将是一个 POST 请求，例如 {\"text\":\"状态: running\"} 正文和 Content-Type: application/json 头，这将在 Mattermost 频道中显示 状态: running 消息。\n\n使用表单编码或 JSON 编码配置时，您可以配置任意数量的有效负载值，键和值都将在 POST 请求中输出。但是，使用原始数据格式时，您只能配置一个值，并且它必须命名为 \"data\"。在这种情况下，数据键不会在 POST 请求中输出，只会输出值。例如：  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://<YOURHOOKURL>\",\n        \"format\": \"raw\",\n        \"webhookstatus\": {\n            \"data\": \"状态: {status}\"\n        }\n    },\n\n结果将是一个 POST 请求，例如 状态: running 正文和 Content-Type: text/plain 头。","type":"content","url":"/webhook-config#id","position":5},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"嵌套 Webhook 配置","lvl3":"配置","lvl2":"Webhook 使用"},"type":"lvl4","url":"/webhook-config#id-webhook","position":6},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"嵌套 Webhook 配置","lvl3":"配置","lvl2":"Webhook 使用"},"content":"一些 webhook 目标需要嵌套结构。\n这可以通过将内容设置为字典或列表而不是直接设置为文本来实现。\n\n这仅支持 JSON 格式。\"webhook\": {\n    \"enabled\": true,\n    \"url\": \"https://<yourhookurl>\",\n    \"format\": \"json\",\n    \"status\": {\n        \"msgtype\": \"text\",\n        \"text\": {\n            \"content\": \"Status update: {status}\"\n        }\n    }\n}\n\n结果将是一个带有例如 {\"msgtype\":\"text\",\"text\":{\"content\":\"Status update: running\"}} 主体和 Content-Type: application/json 头的 POST 请求。","type":"content","url":"/webhook-config#id-webhook","position":7},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl3":"其他配置","lvl2":"Webhook 使用"},"type":"lvl3","url":"/webhook-config#id-1","position":8},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl3":"其他配置","lvl2":"Webhook 使用"},"content":"webhook.retries 参数可以设置为 webhook 请求在失败时（即 HTTP 响应状态不是 200）应尝试的最大重试次数。默认情况下，这设置为 0，表示禁用。还可以设置额外的 webhook.retry_delay 参数来指定重试尝试之间的时间（以秒为单位）。默认情况下，这设置为 0.1（即 100ms）。请注意，如果 webhook 存在连接问题，增加重试次数或重试延迟可能会减慢交易者的速度。\n您还可以指定 webhook.timeout - 它定义了机器人在认为其他主机无响应之前将等待多长时间（默认为 10 秒）。\n\n重试的示例配置：  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://<YOURHOOKURL>\",\n        \"timeout\": 10,\n        \"retries\": 3,\n        \"retry_delay\": 0.2,\n        \"status\": {\n            \"status\": \"状态: {status}\"\n        }\n    },\n\n可以通过策略中的 self.dp.send_msg() 函数将自定义消息发送到 Webhook 端点。要启用此功能，请将 allow_custom_messages 选项设置为 true：  \"webhook\": {\n        \"enabled\": true,\n        \"url\": \"https://<YOURHOOKURL>\",\n        \"allow_custom_messages\": true,\n        \"strategy_msg\": {\n            \"status\": \"策略消息: {msg}\"\n        }\n    },\n\n可以为不同事件配置不同的有效负载。并非所有字段都是必需的，但您应该至少配置其中一个字典，否则 webhook 将永远不会被调用。","type":"content","url":"/webhook-config#id-1","position":9},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"type":"lvl3","url":"/webhook-config#webhook-1","position":10},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"content":"","type":"content","url":"/webhook-config#webhook-1","position":11},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"入场 / 入场成交","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"type":"lvl4","url":"/webhook-config#id-2","position":12},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"入场 / 入场成交","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"content":"当机器人下达多头/空头订单以增加仓位时，或者当该订单成交时，webhook.entry 和 webhook.entry_fill 中的字段会被相应地填充。参数使用 string.format 填充。\n可能的参数有：\n\ntrade_id\n\nexchange\n\npair\n\ndirection\n\nleverage\n\n~~limit # 已弃用 - 不应再使用。~~\n\nopen_rate\n\namount\n\nopen_date\n\nstake_amount\n\nstake_currency\n\nbase_currency\n\nquote_currency\n\nfiat_currency\n\norder_type\n\ncurrent_rate\n\nenter_tag\n\n以下是翻译后的中文内容，保持了Markdown格式：","type":"content","url":"/webhook-config#id-2","position":13},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"出场 / 出场成交","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"type":"lvl4","url":"/webhook-config#id-3","position":14},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"出场 / 出场成交","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"content":"当机器人下达出场订单或该出场订单成交时，webhook.exit 和 webhook.exit_fill 中的字段会被相应地填充。参数使用 string.format 填充。\n可能的参数有：\n\ntrade_id\n\nexchange\n\npair\n\ndirection\n\nleverage\n\ngain\n\namount\n\nopen_rate\n\nclose_rate\n\ncurrent_rate\n\nprofit_amount\n\nprofit_ratio\n\nstake_currency\n\nbase_currency\n\nquote_currency\n\nfiat_currency\n\nenter_tag\n\nexit_reason\n\norder_type\n\nopen_date\n\nclose_date\n\nsub_trade\n\nis_final_exit","type":"content","url":"/webhook-config#id-3","position":15},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"出场取消","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"type":"lvl4","url":"/webhook-config#id-4","position":16},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"出场取消","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"content":"当机器人取消出场订单时，webhook.exit_cancel 中的字段会被填充。参数使用 string.format 填充。\n可能的参数有：\n\ntrade_id\n\nexchange\n\npair\n\ndirection\n\nleverage\n\ngain\n\norder_rate\n\namount\n\nopen_rate\n\ncurrent_rate\n\nprofit_amount\n\nprofit_ratio\n\nstake_currency\n\nbase_currency\n\nquote_currency\n\nfiat_currency\n\nexit_reason\n\norder_type\n\nopen_date\n\nclose_date","type":"content","url":"/webhook-config#id-4","position":17},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"状态","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"type":"lvl4","url":"/webhook-config#id-5","position":18},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl4":"状态","lvl3":"Webhook 消息类型","lvl2":"Webhook 使用"},"content":"webhook.status 中的字段用于常规状态消息（已启动 / 已停止 / ...）。参数使用 string.format 填充。\n\n这里唯一可能的值是 {status}。","type":"content","url":"/webhook-config#id-5","position":19},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl3":"Discord","lvl2":"Webhook 使用"},"type":"lvl3","url":"/webhook-config#discord","position":20},{"hierarchy":{"lvl1":"Webhook 配置指南","lvl3":"Discord","lvl2":"Webhook 使用"},"content":"Discord 提供了一种特殊形式的 webhook。\n您可以按如下方式配置：\"discord\": {\n    \"enabled\": true,\n    \"webhook_url\": \"https://discord.com/api/webhooks/<Your webhook URL ...>\",\n    \"exit_fill\": [\n        {\"Trade ID\": \"{trade_id}\"},\n        {\"Exchange\": \"{exchange}\"},\n        {\"Pair\": \"{pair}\"},\n        {\"Direction\": \"{direction}\"},\n        {\"Open rate\": \"{open_rate}\"},\n        {\"Close rate\": \"{close_rate}\"},\n        {\"Amount\": \"{amount}\"},\n        {\"Open date\": \"{open_date:%Y-%m-%d %H:%M:%S}\"},\n        {\"Close date\": \"{close_date:%Y-%m-%d %H:%M:%S}\"},\n        {\"Profit\": \"{profit_amount} {stake_currency}\"},\n        {\"Profitability\": \"{profit_ratio:.2%}\"},\n        {\"Enter tag\": \"{enter_tag}\"},\n        {\"Exit Reason\": \"{exit_reason}\"},\n        {\"Strategy\": \"{strategy}\"},\n        {\"Timeframe\": \"{timeframe}\"},\n    ],\n    \"entry_fill\": [\n        {\"Trade ID\": \"{trade_id}\"},\n        {\"Exchange\": \"{exchange}\"},\n        {\"Pair\": \"{pair}\"},\n        {\"Direction\": \"{direction}\"},\n        {\"Open rate\": \"{open_rate}\"},\n        {\"Amount\": \"{amount}\"},\n        {\"Open date\": \"{open_date:%Y-%m-%d %H:%M:%S}\"},\n        {\"Enter tag\": \"{enter_tag}\"},\n        {\"Strategy\": \"{strategy} {timeframe}\"},\n    ]\n}\n\n上述配置代表默认设置（exit_fill 和 entry_fill 是可选的，将默认使用上述配置） - 显然可以进行修改。\n要禁用这两个默认值中的任何一个（entry_fill / exit_fill），您可以为它们分配一个空数组（exit_fill: []）。\n\n可用字段对应于 webhook 的字段，并在相应的 webhook 部分中有文档说明。\n\n默认情况下，通知将如下所示。\n\n可以通过 dataprovider.send_msg() 函数从策略向 Discord 端点发送自定义消息。要启用此功能，请将 allow_custom_messages 选项设置为 true：  \"discord\": {\n        \"enabled\": true,\n        \"webhook_url\": \"https://discord.com/api/webhooks/<Your webhook URL ...>\",\n        \"allow_custom_messages\": true,\n    },","type":"content","url":"/webhook-config#discord","position":21},{"hierarchy":{"lvl1":"Windows 安装指南"},"type":"lvl1","url":"/windows-installation","position":0},{"hierarchy":{"lvl1":"Windows 安装指南"},"content":"","type":"content","url":"/windows-installation","position":1},{"hierarchy":{"lvl1":"Windows 安装指南","lvl2":"Windows 安装"},"type":"lvl2","url":"/windows-installation#windows","position":2},{"hierarchy":{"lvl1":"Windows 安装指南","lvl2":"Windows 安装"},"content":"我们强烈建议 Windows 用户使用 \n\nDocker，因为这将更容易和更顺畅地工作（也更安全）。\n\n如果不可能，请尝试使用 Windows Linux 子系统（WSL）- 对于 Ubuntu 的说明应该有效。\n\n否则，请按照以下说明进行操作。\n\n所有说明都假设已安装并可用 Python 3.10+。","type":"content","url":"/windows-installation#windows","position":3},{"hierarchy":{"lvl1":"Windows 安装指南","lvl3":"克隆 git 仓库","lvl2":"Windows 安装"},"type":"lvl3","url":"/windows-installation#id-git","position":4},{"hierarchy":{"lvl1":"Windows 安装指南","lvl3":"克隆 git 仓库","lvl2":"Windows 安装"},"content":"首先，通过运行以下命令克隆仓库：git clone https://github.com/freqtrade/freqtrade.git\n\n现在，选择您的安装方法，要么通过脚本自动安装（推荐），要么按照相应的说明手动安装。","type":"content","url":"/windows-installation#id-git","position":5},{"hierarchy":{"lvl1":"Windows 安装指南","lvl3":"自动安装 freqtrade","lvl2":"Windows 安装"},"type":"lvl3","url":"/windows-installation#id-freqtrade","position":6},{"hierarchy":{"lvl1":"Windows 安装指南","lvl3":"自动安装 freqtrade","lvl2":"Windows 安装"},"content":"","type":"content","url":"/windows-installation#id-freqtrade","position":7},{"hierarchy":{"lvl1":"Windows 安装指南","lvl4":"运行安装脚本","lvl3":"自动安装 freqtrade","lvl2":"Windows 安装"},"type":"lvl4","url":"/windows-installation#id","position":8},{"hierarchy":{"lvl1":"Windows 安装指南","lvl4":"运行安装脚本","lvl3":"自动安装 freqtrade","lvl2":"Windows 安装"},"content":"脚本将询问您几个问题，以确定应安装哪些部分。Set-ExecutionPolicy -ExecutionPolicy Bypass\ncd freqtrade\n. .\\setup.ps1","type":"content","url":"/windows-installation#id","position":9},{"hierarchy":{"lvl1":"Windows 安装指南","lvl3":"手动安装 freqtrade","lvl2":"Windows 安装"},"type":"lvl3","url":"/windows-installation#id-freqtrade-1","position":10},{"hierarchy":{"lvl1":"Windows 安装指南","lvl3":"手动安装 freqtrade","lvl2":"Windows 安装"},"content":"64位 Python 版本\n\n请确保使用 64 位 Windows 和 64 位 Python，以避免由于 32 位应用程序在 Windows 下的内存限制而导致回测或超参数优化问题。\n32 位 Python 版本在 Windows 下不再受支持。\n\n建议 Windows 中使用 Anaconda\n\n在 Windows 下使用 \n\nAnaconda Distribution 可以大大帮助解决安装问题。查看文档中的 \n\nAnaconda 安装部分 以获取更多信息。","type":"content","url":"/windows-installation#id-freqtrade-1","position":11},{"hierarchy":{"lvl1":"Windows 安装指南","lvl4":"Windows 安装过程中的错误","lvl3":"手动安装 freqtrade","lvl2":"Windows 安装"},"type":"lvl4","url":"/windows-installation#windows-1","position":12},{"hierarchy":{"lvl1":"Windows 安装指南","lvl4":"Windows 安装过程中的错误","lvl3":"手动安装 freqtrade","lvl2":"Windows 安装"},"content":"error: Microsoft Visual C++ 14.0 is required. Get it with \"Microsoft Visual C++ Build Tools\": http://landinghub.visualstudio.com/visual-cpp-build-tools\n\n不幸的是，许多需要编译的包没有提供预构建的 Wheels。因此，必须为您的 Python 环境安装并可用 C/C++ 编译器。\n\n您可以从\n\n这里下载 Visual C++ 构建工具，并在其默认配置中安装\"使用 C++ 的桌面开发\"。不幸的是，这是一个很重的下载/依赖项，因此您可能想先考虑 WSL2 或 \n\ndocker compose。","type":"content","url":"/windows-installation#windows-1","position":13}]}